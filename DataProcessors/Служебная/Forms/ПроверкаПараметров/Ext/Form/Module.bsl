// ПРОВЕРКА СОЕДИНЕНИЯ //

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	Попытка 
		ПроверитьСоединениеНаСервере();
	Исключение
		ОбработкаОшибкиКлиент(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоединениеНаСервере()
	СтрЗапроса = Новый Структура; 
	СтрЗапроса.Вставить("ТипРегистрации", "Проверка соединения"); 
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	
	СтруктураПодключения            = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.ИмяФункции = "Registration";
	
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтруктураПодключения); 
	
	Если ОбработкаОшибок(Ответ.Ошибка) Тогда
		Возврат; 
	Иначе
		Элементы.НадписьИнформацияОСоединении.Заголовок = Ответ.Информация;
		Сообщить(Ответ.Информация);
	КонецЕсли;	
КонецПроцедуры

// ПЕРЕРЕГИСТРАЦИЯ //
&НаКлиенте
Процедура ПриПодтвержденииОчисткиУстройства(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ ЗапросОтключенияУстройствоНаСервер() Тогда
			Сообщить("Устройство не отключено от ЦБ");
		КонецЕсли;
		// 2017-05-19 МСН
		стрАдресСервера = ПолучитьАдресСервера();
		признПолныйДоступ = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ПолныйДоступ");
		
		ПеререгистрацияУстройстваНаСервере();
		ОткрытьФорму("ОбщаяФорма.ФормаАвторизации", Новый Структура("Этап,АдресСервераАвторизации,ПолныйДоступ", 1, стрАдресСервера, признПолныйДоступ));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеререгистрацияУстройства(Команда)
	ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииОчисткиУстройства", ЭтотОбъект), "Выполнить очистку устройства?", РежимДиалогаВопрос.ДаНет);
	
	//Если Вопрос("Выполнить очистку устройства?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//	Если НЕ ЗапросОтключенияУстройствоНаСервер() Тогда
	//		Сообщить("Устройство не отключено от ЦБ");
	//	КонецЕсли;
	//	// 2017-05-19 МСН
	//	стрАдресСервера = ПолучитьАдресСервера();
	//	
	//	ПеререгистрацияУстройстваНаСервере();
	//	ОткрытьФорму("ОбщаяФорма.ФормаАвторизации", Новый Структура("Этап,АдресСервераАвторизации", 1, стрАдресСервера));
	//КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресСервера()
	Перем стрПодключения;
	// 2017-05-19 МСН, чтобы иметь возможность перерегистрироваться, при других параметрах подключения
	стрПодключения = Константы.АдресСервера.Получить();
	Возврат стрПодключения;
КонецФункции

&НаСервере
Процедура ПеререгистрацияУстройстваНаСервере()
	ОбщийМодульСервер.ОчисткаБазыДанных();
КонецПроцедуры

&НаСервере
Функция ЗапросОтключенияУстройствоНаСервер ()
	Попытка
		СтрЗапроса = Новый Структура; 
		СтрЗапроса.Вставить("ТипРегистрации"                  , "Отключение устройства"); 
		СтрЗапроса.Вставить("ИнформацияОКонфигурации"         , ПолучитьИнфуОКонфигурации());
		СтрЗапроса.ИнформацияОКонфигурации.Вставить("СтарыйID", СтрЗапроса.ИнформацияОКонфигурации.ID);
		СтруктураПодключения = СтандартныеНастройкиПодключения();
		Ответ                = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтруктураПодключения); 
		
		Если ОбработкаОшибок(Ответ.Ошибка) Тогда
			Возврат ЛОЖЬ; 
		Иначе
			Если Ответ.УстройствоОтвязано Тогда
				Константы.СтарыйID.Установить("");
				Возврат Истина;
			Иначе
				Возврат ЛОЖЬ;
			КонецЕсли;	
		КонецЕсли;
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
КонецФункции	

// ПРОСМОТР СТРОКИ ПОДКЛЮЧЕНИЯ //

&НаСервере
Процедура ПросмотрСтрокиПодключенияНаСервере()
	СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
	Если ТипЗнч(СтруктураПодключения) = Тип("Структура") Тогда
		СтруктураПодключения.Свойство("Адрес",Элементы.Декорация1.Заголовок);
	Иначе
		Элементы.Декорация1.Заголовок = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрСтрокиПодключения(Команда)
	ПросмотрСтрокиПодключенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолнаяЗагрузкаДанныхНаСервере()
	ФоновыеЗаданияСервер.ОстановитьВсеФоновыеЗадания();
	УстановитьМонопольныйРежим(Истина);
	
	Стр = Новый Структура;
	Для Каждого мКонстанта Из Метаданные.Константы Цикл
		Стр.Вставить(мКонстанта.Имя,Константы[мКонстанта.Имя].Получить());
	КонецЦикла;
	
	СтрЗапроса = Новый Структура; 
	СтрЗапроса.Вставить("ТипРегистрации", "Полная загрузка"); 
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	
	СтруктураПодключения            = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.ИмяФункции = "Registration";
	
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтруктураПодключения); 
	
	Если ОбработкаОшибок(Ответ.Ошибка) Тогда
		Возврат; 
	Иначе
		Элементы.НадписьИнформацияОСоединении.Заголовок = Ответ.Информация;
		Сообщить(Ответ.Информация);
		
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_ОбменСМобильнымиУстройствами.Ссылка,
		|	ОС_ОбменСМобильнымиУстройствами.ВерсияДанных,
		|	ОС_ОбменСМобильнымиУстройствами.ПометкаУдаления,
		|	ОС_ОбменСМобильнымиУстройствами.ЭтотУзел,
		|	ОС_ОбменСМобильнымиУстройствами.Код,
		|	ОС_ОбменСМобильнымиУстройствами.Наименование,
		|	ОС_ОбменСМобильнымиУстройствами.НомерОтправленного,
		|	ОС_ОбменСМобильнымиУстройствами.НомерПринятого
		|ИЗ
		|	ПланОбмена.ОС_ОбменСМобильнымиУстройствами КАК ОС_ОбменСМобильнымиУстройствами";
		ТЗ  = Запрос.Выполнить().Выгрузить();
		
		Попытка
			УдалитьДанныеИнформационнойБазы();
		Исключение
		КонецПопытки;	
			
		Для Каждого СтрокаТЧ Из ТЗ Цикл       

			Если СтрокаТЧ.ЭтотУзел Тогда
				мУзел = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел().ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(мУзел,СтрокаТЧ,"Код,Наименование");
			Иначе	
				мУзел = СтрокаТЧ.Ссылка.ПолучитьОбъект();
				Если мУзел = Неопределено Тогда
					мУзел = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.СоздатьУзел();
					мУзел.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(мУзел,СтрокаТЧ);
			КонецЕсли;	
			мУзел.ОбменДанными.Загрузка = Истина;
			мУзел.Записать();
		КонецЦикла;	
		
		Для Каждого Эл Из Стр Цикл
			Константы[Эл.Ключ].Установить(Эл.Значение);	
		КонецЦикла;	
		
	КонецЕсли;	
	
	УстановитьМонопольныйРежим(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяЗагрузкаДанных(Команда)
	Оповещение = Новый ОписаниеОповещения("ПолнаяЗагрузкаДанныхЗавершение",ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Все неотправленные на сервер данные будут утеряны, продолжить?",РежимДиалогаВопрос.ДаНет)
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяЗагрузкаДанныхЗавершение (Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПолнаяЗагрузкаДанныхНаСервере();
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура УдалитьДанныеИБВыборочно()
	
	Имена = Новый Массив;
	Имена.Добавить("Справочники");
	Имена.Добавить("Документы");	
	
	Для Каждого Имя Из Имена Цикл
		Для Каждого Мета Из Метаданные[Имя] Цикл
			Запрос = Новый Запрос("Выбрать Различные Ссылка Из " + Мета.ПолноеИмя());
			ТЗ = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТЧ Из ТЗ Цикл
				мОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
				Если мОбъект <> Неопределено Тогда
					мОбъект.ОбменДанными.Загрузка = Истина;
					мОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	
	РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей().Записать(Истина);
	//РегистрыСведений.ГеоКоординаты.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОграчениеОтгрузокВозвратообразущейПродукции.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_Логи.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_ПрисоединенныеФайлы.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_ДанныеПродажДляМП.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_ДанныеВзаиморасчетовДляМП.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_ОстаткиТоваров.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ТекущаяПринадлежностьКонтрагентовГруппам.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ДокументыДляОбработки.СоздатьНаборЗаписей().Записать(Истина);
	РегистрыСведений.ОС_ПланыПродаж.СоздатьНаборЗаписей().Записать(Истина);
КонецПроцедуры	

&НаКлиенте
Процедура Test(Команда)
	TestСервер();
КонецПроцедуры

&НаСервере
Процедура TestСервер ()
	СтрЗапроса = Новый Структура; 
	СтрЗапроса.Вставить("ТипРегистрации", "Проверка соединения"); 
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	
	СтруктураПодключения            = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.ИмяФункции = "Test";
	
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтруктураПодключения); 
	
	Если ОбработкаОшибок(Ответ.Ошибка) Тогда
		Возврат; 
	Иначе
		Элементы.НадписьИнформацияОСоединении.Заголовок = Ответ.Информация;
		Сообщить(Ответ.Информация);
	КонецЕсли;	
КонецПроцедуры	

// ОБНОВЛЕНИЕ КОНФИГУРАЦИИ //

&НаКлиенте
Процедура ОбновлениеX86(Команда)
	ОбновитьКонфигурацию("x86");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеARM(Команда)
	ОбновитьКонфигурацию("arm");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонфигурацию (ТипПроцессора)
	Адрес = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	Рез   = ОбщийМодульСервер.ОбновитьКонфигурацию(Адрес,ТипПроцессора);
	Если Рез.Успех Тогда
		ДД   = ПолучитьИзВременногоХранилища(Адрес);
	    Путь = КаталогВременныхФайлов() + "update.apk";
		Если ДД = Неопределено Тогда
			ОбработкаОшибкиКлиент("Файл обновлений не загружен!");
			Возврат;
		КонецЕсли;	
		ДД.Записать(Путь);
		ЗапуститьПриложение(Путь);
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПараметрыПодключения(Команда)
	ОбновитьПараметрыПодключенияСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПодключенияСервер ()
	СтрЗапроса = Новый Структура; 	
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	СтрЗапроса.Вставить("ТипРегистрации","ОбновитьПараметрыПодключения");
	Ответ      = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтандартныеНастройкиПодключения());
	Если ОбработкаОшибок(Ответ.Ошибка) Тогда
		Возврат; 
	Иначе
		Константы.НастройкиПодключения.Установить(Новый ХранилищеЗначения(Ответ.СтруктураСоединенияСЦентральнойБазой));
		Сообщить(Ответ.Информация);
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОчисткаБазыДанных(Команда)
	ОбщийМодульСервер.ОчисткаБазыДанных();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКоординаты(Команда)
	ФоновыеЗаданияСервер.СинхронизироватьКоординаты(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СделатьОбмен(Команда)
	Всп = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПриложение(Команда)
	СисИнфо = Новый СистемнаяИнформация;
	Сообщить(СисИнфо.ВерсияОС);

	//ОбновитьКонфигурацию();
КонецПроцедуры


&НаКлиенте
Процедура СинхронизироватьКоординатыФон(Команда)
	Оповестить("НачатьЗагрузкуКоординат");
КонецПроцедуры

