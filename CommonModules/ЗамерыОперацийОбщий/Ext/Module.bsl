// Открывает замер операции.
// Рекомендуется вызывать с клиента, чтобы работал контроль незавершенных замеров в потоке кода замеров.
// При повторном вызове начала замера для тех же ИмяОперации+Ключ мы обновляем все, кроме ДатаНачала.
// Параметры:
//  ИмяОперации - Строка
//  Ключ - Произвольное - ключ конкретной операции, чтобы отличать ее от одноименных, например уникальный идентификатор ссылочного объекта или формы; 
//                  имеет смысл указывать при потенциальном наличии вложенных вызовов операций с одним именем
//  СсылочныйОбъектИлиСсылка - ЛюбаяСсылка, ЛюбойСсылочныйОбъект - позволяет связать замер со ссылкой на объект БД
//  РазрешитьВложенныйЗамер - Булево, *Ложь - если уже есть активный замер, то замер будет начат, иначе будет проигнорирован
//  РазрешитьВФоновомЗадании - Булево, *Ложь - если текущий сеанс является фоновым, то замер будет начат, иначе будет проигнорирован
//  ЗавершатьПриОжиданииПользователя - Булево, *Ложь - если сработал обработчик ожидания, то замер будет досрочно завершен, иначе он будет удален
//  Комментарий - Строка - сопровождающий замер комментарий в журнале
//
Функция НачатьИлиОбновитьЗамер(ИмяОперации, Ключ = Неопределено, СсылочныйОбъектИлиСсылка = Неопределено, РазрешитьВложенныйЗамер = Ложь, РазрешитьВФоновомЗадании = Ложь,
	ЗавершатьПриОжиданииПользователя = Ложь, Комментарий = "") Экспорт 
	
	//Если ирПлатформа.ПолучитьИдентификаторПроцессаОтладчика() <> Неопределено Тогда
	//	// При подключенном отладчике время будет отличаться на разный процент в зависимости от характера выполненных интерпретатором команд и их соотношения с вызовами сервера
	//	Возврат;
	//КонецЕсли;
	Разделитель = "^;^";
	Если Найти(ИмяОперации, Разделитель) > 0 Тогда
		ВызватьИсключение "Имя замеряемой операции не должно содержать """ + Разделитель + """";
	КонецЕсли; 
	Если Найти(Комментарий, Разделитель) > 0 Тогда
		ВызватьИсключение "Комментарий операции не должен содержать """ + Разделитель + """";
	КонецЕсли; 
	НастройкиЗамеров = ЗамерыОперацийКэшируемый.ПолучитьПараметрыЗамеровОпераций();
	Если Ложь
		Или Не НастройкиЗамеров.ЗамерыВключены
		Или (Истина
			И Не РазрешитьВФоновомЗадании
			И НастройкиЗамеров.ЭтоФоновоеЗадание)
	Тогда
		Возврат Неопределено;
	КонецЕсли; 
	МассивЗамеров = ПолучитьМассивЗамеров();
	Если МассивЗамеров = Неопределено Тогда
		МассивЗамеров = Новый Массив;
	КонецЕсли;
	ИндексТекущегоЗамера = Неопределено;
	Для Индекс = 0 По МассивЗамеров.ВГраница() Цикл
		СтруктураЗамера = ПолучитьСтруктуруЗамера(МассивЗамеров[Индекс]);
		Если Истина
			И НРег(СтруктураЗамера.ИмяОперации) = НРег(ИмяОперации)
			И СтруктураЗамера.Ключ = Ключ
		Тогда
			// Это повторное начала замера. Здесь мы сохраняем дату начала, но обновляем остальные параметры, например ЗавершатьПриОжиданииПользователя
			ИндексТекущегоЗамера = Индекс;
			ДатаНачала = СтруктураЗамера.ДатаНачала;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СсылкаОбъекта = Неопределено;
	Если ИндексТекущегоЗамера = Неопределено Тогда
		Если Истина
			И Не РазрешитьВложенныйЗамер
			И МассивЗамеров.Количество() > 0 
		Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли; 
	#Если Не ТонкийКлиент И Не ВебКлиент И Не МобильноеПриложениеКлиент Тогда
		Если СсылочныйОбъектИлиСсылка <> Неопределено Тогда
			Попытка
				СсылкаОбъекта = ПолучитьТочнуюСсылкуОбъекта(СсылочныйОбъектИлиСсылка);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки; 
		КонецЕсли; 
	#КонецЕсли 
	#Если Клиент Тогда
		ПодключитьОбработчикОжиданияЗавершенияЗамера();
	#КонецЕсли 
	ДатаНачала = ПолучитьТекущееВремяВМилисекундах();
	ОписаниеЗамера = Новый Массив;
	ОписаниеЗамера.Добавить(ИмяОперации);
	ОписаниеЗамера.Добавить(Ключ);
	ОписаниеЗамера.Добавить(ДатаНачала);
	ОписаниеЗамера.Добавить(СсылкаОбъекта);
	ОписаниеЗамера.Добавить(ЗавершатьПриОжиданииПользователя);
	ОписаниеЗамера.Добавить(Комментарий);
	//ОписаниеЗамера = ИмяОперации + ";" + Ключ + ";" + Формат(ДатаНачала, "ЧГ=") + ";" + СсылкаОбъектаВнутр + ";" + Формат(?(ЗавершатьПриОжиданииПользователя, 1, 0), "ЧН=");
	Если ИндексТекущегоЗамера <> Неопределено Тогда
		МассивЗамеров[ИндексТекущегоЗамера] = ОписаниеЗамера;
	Иначе
		МассивЗамеров.Добавить(ОписаниеЗамера);
	КонецЕсли; 
	ЗамерыОперацийОбщий.УстановитьМассивЗамеров(МассивЗамеров);
	Возврат ДатаНачала;
	
КонецФункции

#Если Клиент Тогда

// Нужно вызывать при первой же возможности на клиенте в случае, когда замер начинается на сервере.
Процедура ПодключитьОбработчикОжиданияЗавершенияЗамера() Экспорт 
    
    ПодключитьОбработчикОжидания("УдалитьНезавершенныеЗамерыОпераций", 0.1, Истина);

КонецПроцедуры

#КонецЕсли 

// Фиксирует замер операции в журнале регистрации.
// Параметры:
//  ИмяОперации - Строка
//  Ключ - Строка - ключ конкретной операции, чтобы отличать ее от одноименных, например уникальный идентификатор ссылочного объекта
//  Ссылка - СсылкаБД - ссылка на любой объект базы данных для помещения в поле Данные записи журнала регистрации
//  МинимальнаяДлительность - Число - отсечение по минимальной длительности операции в милисекундах, в большинстве случаев не требуется
//
Функция ЗавершитьЗамер(ИмяОперации, Ключ = "", МинимальнаяДлительность = 0) Экспорт 
	
	МассивЗамеров = ПолучитьМассивЗамеров();
	Если МассивЗамеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	#Если _ Тогда
	    МассивЗамеров = Новый Массив;
	#КонецЕсли
	КоличествоАктивныхЗамеров = МассивЗамеров.Количество();
	СтруктураЗамераНайдена = Ложь;
	Для Счетчик = 1 По КоличествоАктивныхЗамеров Цикл
		Индекс = КоличествоАктивныхЗамеров - Счетчик;
		СтруктураЗамера = ПолучитьСтруктуруЗамера(МассивЗамеров[Индекс]);
		Если Истина
			И НРег(СтруктураЗамера.ИмяОперации) = НРег(ИмяОперации)
			И СтруктураЗамера.Ключ = Ключ
		Тогда
			СтруктураЗамераНайдена = Истина;
			Прервать;
		Иначе
			Если Индекс > 0 Тогда
				//Сообщить("Замеры операций >> Удален незавершенный замер операции " + СтруктураЗамера.ИмяОперации + "." + СтруктураЗамера.Ключ + " при завершении замера " + ИмяОперации + "." + Ключ);
				МассивЗамеров.Удалить(Индекс);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если Не СтруктураЗамераНайдена Тогда
		//Сообщить("Замеры операций >> Невозможно завершить замер операции " + ИмяОперации + "." + Ключ);
		Возврат Неопределено;
	КонецЕсли;
	Длительность = ПолучитьТекущееВремяВМилисекундах() - СтруктураЗамера.ДатаНачала;
	МассивЗамеров.Удалить(Индекс);
	ЗамерыОперацийОбщий.УстановитьМассивЗамеров(МассивЗамеров);
	Если Длительность < МинимальнаяДлительность Тогда
		Возврат Неопределено;
	КонецЕсли; 
	#Если Не ВебКлиент Тогда
		ИмяКомпьютера = ИмяКомпьютера();
	#Иначе
		ИмяКомпьютера = Неопределено;
	#КонецЕсли 
	ЗамерыОперацийСервер.ЗарегистрироватьЗамер(ИмяОперации, Длительность, СтруктураЗамера.СсылкаОбъекта, ИмяКомпьютера, СтруктураЗамера.Комментарий);
	
	Возврат Длительность;
	
КонецФункции

// Возвращает текущее время в секундах.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьТекущееВремяВМилисекундах() Экспорт
	
	ТекущееВремя = Неопределено;
	Попытка
		Выполнить("ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();"); // 1мс
	Исключение
	КонецПопытки; 
	//Если ТекущееВремя = Неопределено Тогда
	//	// 1мс
	//	СкриптМенеджер = ЗамерыОперацийКэшируемый.ПолучитьСкриптМенеджер();
	//	Если СкриптМенеджер <> Неопределено Тогда
	//		ТекущееВремя = СкриптМенеджер.Eval("(new Date()).valueOf()");
	//	КонецЕсли; 
	//КонецЕсли;
	//Если ТекущееВремя = Неопределено Тогда
	//	// 10мс
	//	СлужбаWMI = ЗамерыОперацийКэшируемый.ПолучитьСлужбуWMI();
	//	Если СлужбаWMI <> Неопределено Тогда
	//		КоллекцияОС = СлужбаWMI.InstancesOf("Win32_OperatingSystem");
	//		Для каждого ОбъектОС Из КоллекцияОС Цикл
	//			Прервать;
	//		КонецЦикла;
	//		Если ОбъектОС <> Неопределено Тогда
	//			СтрокаВремениСервера = ОбъектОС.LocalDateTime;
	//			ТекущееВремя = 1000 * (Дата(Лев(СтрокаВремениСервера, 14)) - Дата(1,1,1)) + Сред(СтрокаВремениСервера, 16, 3);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли;
	Если ТекущееВремя = Неопределено Тогда
		ТекущееВремя = 1000 * (ТекущаяДата() - Дата(1,1,1));
		//Сообщить("Замеры операций >> Получение времени с высокой точностью недоступно. Замеры операций будут обрезаться до секунд");
	КонецЕсли;
    Возврат ТекущееВремя;
	
КонецФункции

Функция ПолучитьМассивЗамеров() Экспорт 
	
	#Если ТонкийКлиент Или ВебКлиент Или МобильноеПриложениеКлиент Тогда
		Результат = ЗамерыОперацийСервер.ПолучитьМассивЗамеров();
	#Иначе
		Попытка
			ФиксированныйМассив = ПараметрыСеанса.ЗамерыОпераций;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		#Если _ Тогда
		    ФиксированныйМассив = Новый ФиксированныйМассив;
		#КонецЕсли
		Результат = Новый Массив;
		Для Каждого Элемент Из ФиксированныйМассив Цикл
			Результат.Добавить(Элемент);
		КонецЦикла; 
	#КонецЕсли 
	Возврат Результат;
	
КонецФункции

Процедура УстановитьМассивЗамеров(МассивЗамеров) Экспорт 

	#Если Не ТонкийКлиент И Не ВебКлиент И Не МобильноеПриложениеКлиент Тогда
		ПараметрыСеанса.ЗамерыОпераций = Новый ФиксированныйМассив(МассивЗамеров);
	#Иначе
		ЗамерыОперацийСервер.УстановитьМассивЗамеров(МассивЗамеров);
	#КонецЕсли

КонецПроцедуры // УстановитьМассивЗамеровОпераций()
 
Функция ПолучитьСтруктуруЗамера(ОписаниеЗамера) Экспорт 
	
	СтруктураЗамера = Новый Структура;
	СтруктураЗамера.Вставить("ИмяОперации", ОписаниеЗамера[0]);
	СтруктураЗамера.Вставить("Ключ", ОписаниеЗамера[1]);
	СтруктураЗамера.Вставить("ДатаНачала", ОписаниеЗамера[2]);
	СтруктураЗамера.Вставить("СсылкаОбъекта", ОписаниеЗамера[3]);
	СтруктураЗамера.Вставить("ЗавершатьПриОжиданииПользователя", ОписаниеЗамера[4]);
	СтруктураЗамера.Вставить("Комментарий", ОписаниеЗамера[5]);
	Возврат СтруктураЗамера;
	
КонецФункции

#Если Не ТонкийКлиент И Не ВебКлиент И Не МобильноеПриложениеКлиент Тогда

//Если объекту не назначена ссылка, назначает эту ссылку
//
// Параметры:
//	ОбъектБД - <тип> - 
//
// Возвращаемое значение:
//
Функция ПолучитьТочнуюСсылкуОбъекта(ОбъектБД) Экспорт

	Ссылка = ОбъектБД.Ссылка;
	Если Ссылка.Пустая() Тогда
		Ссылка = ОбъектБД.ПолучитьСсылкуНового();
		Если Ссылка.Пустая() Тогда
			Ссылка = XMLЗначение(ТипЗнч(Ссылка), "" + Новый УникальныйИдентификатор);
			ОбъектБД.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	Возврат Ссылка;

КонецФункции

#КонецЕсли 
