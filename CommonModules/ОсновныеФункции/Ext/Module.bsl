Функция ПолучитьВСПрокси(СтруктураПодключения = Неопределено)  Экспорт

	Таймаут = Константы.ОС_СрокОжиданияВебСервиса.Получить();
	
	СтруктураПодключения.Свойство("Таймаут",Таймаут);
	
	//Если Таймаут = 0 Тогда
		Таймаут = 300;
	//КонецЕсли;	

	мАдрес = СтруктураПодключения.Адрес;
	мАдрес = СтрЗаменить(мАдрес,"ru_RU","");
	мАдрес = СтрЗаменить(мАдрес,"\","/");
	мАдрес = СтрЗаменить(мАдрес,"//","/");
	мАдрес = СтрЗаменить(мАдрес,"http:/","http://");
	мАдрес = СтрЗаменить(мАдрес,"https:/","https://");
	
	СисИнфо = Новый СистемнаяИнформация;
	НовыйСпособПодкючения = ЛОЖЬ;
	Если СисИнфо.ВерсияПриложения >= "8.3.7" Тогда
		НовыйСпособПодкючения = Истина;
	КонецЕсли;	
	
	Если Найти(нРег(мАдрес), "test") > 0 Тогда
		ВССсылка = WSСсылки.СсылкаНаСервисТест;
	Иначе
		ВССсылка = WSСсылки.СсылкаНаСервисNew;
	КонецЕсли; 
	
	Если НовыйСпособПодкючения Тогда
		ВСОпределение = ВССсылка.ПолучитьWSОпределения();
	Иначе
		ВСОпределение = Новый WSОпределения(мАдрес,СтруктураПодключения.Пользователь,СтруктураПодключения.Пароль,,Таймаут);
	КонецЕсли;
	
	ВСервис         = ВСОпределение.Сервисы.Получить(СтруктураПодключения.URIПространстваИменСервиса,СтруктураПодключения.ИмяСервиса);
	ВТочкаВхода     = ВСервис.ТочкиПодключения.Получить(СтруктураПодключения.ИмяСервиса + "Soap"); 
	ВОперация       = ВТочкаВхода.Интерфейс.Операции.Получить(СтруктураПодключения.ИмяФункции); 
	
	Если НовыйСпособПодкючения Тогда
		ВСПрокси = ВССсылка.СоздатьWSПрокси(СтруктураПодключения.URIПространстваИменСервиса,СтруктураПодключения.ИмяСервиса,СтруктураПодключения.ИмяСервиса + "Soap",,Таймаут,,Лев(мАдрес,СтрДлина(мАдрес) - 5));
	Иначе
		ВСПрокси = Новый WSПрокси(ВСОпределение, СтруктураПодключения.URIПространстваИменСервиса,СтруктураПодключения.ИмяСервиса,СтруктураПодключения.ИмяСервиса + "Soap",,Таймаут);
	КонецЕсли;
	
	ВСПрокси.Пользователь = СтруктураПодключения.Пользователь;
	ВСПрокси.Пароль       = СтруктураПодключения.Пароль;
	
	Возврат ВСПрокси;
КонецФункции	

Функция ТестПодключенияКСервисуЦентральнойБД(СтруктураПодключения = Неопределено) Экспорт
	Если СтруктураПодключения = Неопределено Тогда
		СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
	КонецЕсли;
	
	Если СтруктураПодключения = Неопределено Тогда
		ВызватьИсключение "Подключите устройство к базе данных!";
	КонецЕсли;	
	
	ВСПрокси = ПолучитьВСПрокси(СтруктураПодключения);
КонецФункции	

Функция ПодключениеКВебСервисуЦентральнойБД(Параметр, СтруктураПодключения = Неопределено, ЕстьПараметры = Истина) Экспорт  //Сервер базы данных//
	Если СтруктураПодключения = Неопределено Тогда
		СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
	КонецЕсли;
	
	Если СтруктураПодключения = Неопределено Тогда
		ВызватьИсключение "Подключите устройство к базе данных!";
	КонецЕсли;	
	
	ВСПрокси = ПолучитьВСПрокси(СтруктураПодключения);
	
	Попытка
		Если ЕстьПараметры Тогда
			Выполнить("Ответ = ВСПрокси." + СтруктураПодключения.ИмяФункции + "(Новый ХранилищеЗначения(Сериализовать(Параметр),Новый СжатиеДанных (9)))");	
		Иначе
			Выполнить("Ответ = ВСПрокси." + СтруктураПодключения.ИмяФункции + "()");	
		КонецЕсли;
		Ответ = Десериализовать(Ответ.Получить());
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка подключения",,, ПодробноеПредставлениеОшибки(Инфо) + Символы.ПС + "При выполнении метода " + СтруктураПодключения.ИмяФункции);
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции	

Функция ПолучитьИнфуОКонфигурации() Экспорт 
	СтрКонфы = Новый Структура; 
	СтрКонфы.Вставить("Конфигурация"    , Метаданные.Имя); 
	СтрКонфы.Вставить("ВерсияПриложения", Метаданные.Версия); 
	СтрКонфы.Вставить("ID"              , ?(ЗначениеЗаполнено(Константы.ID.Получить()),Константы.ID.Получить(),Новый УникальныйИдентификатор));
	СтрКонфы.Вставить("Пользователь"    , Строка(Константы.ТекущийПользователь.Получить())); 
	СтрКонфы.Вставить("МодельПланшета"  , Константы.МодельПланшета.Получить());
	СтрКонфы.Вставить("ВерсияСлужбы"    , Константы.ВерсияСлужбы.Получить());
	Возврат СтрКонфы;
КонецФункции

Функция ОбработкаОшибок(СтрОшибки, НеОповещатьОбОшибках = ЛОЖЬ) Экспорт 
	Если НЕ СтрОшибки.ЕстьОшибка Тогда 
		Возврат Ложь;
	Иначе
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка: " + СтрОшибки.ТекстОшибки);
		Если Не НеОповещатьОбОшибках Тогда
			Сообщить(СтрОшибки.ТекстОшибки,СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	//тут можно прописать вывод сообщения куда угодно. Сообщить(СтрОшибки.ТекстОшибки,СтатусСообщения.ОченьВажное); Возврат Истина;
КонецФункции

#ОБЛАСТЬ СЕРИАЛИЗАЦИЯ

Функция Сериализовать(Объект) Экспорт
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Объект);
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	ФабрикаXDTO.ЗаписатьXML(Запись,ОбъектXDTO);
	Возврат Запись.Закрыть();
КонецФункции

Функция Десериализовать(СтрокаXML) Экспорт
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СокрЛП(СтрокаXML));
	Рез = СериализаторXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	Возврат Рез;
КонецФункции	

#КОНЕЦОБЛАСТИ

Функция СтандартныеНастройкиПодключения() Экспорт
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("Адрес","http://"+СтрЗаменить(Константы.АдресСервера.Получить(),"\","/")+"/ws/DataTransfer.1cws?wsdl");
	СтруктураПодключения.Вставить("URIПространстваИменСервиса","DataTransfer");
	СтруктураПодключения.Вставить("ИмяСервиса"  ,"DataTransfer");
	СтруктураПодключения.Вставить("ИмяФункции"  ,"Registration");
	СтруктураПодключения.Вставить("Пользователь",ЗначенияПоУмолчаниюПереопределямый.ИмяПользователяПоУмолчанию());
	СтруктураПодключения.Вставить("Пароль"      ,ЗначенияПоУмолчаниюПереопределямый.ПарольПользователяПоУмолчанию());
	Возврат СтруктураПодключения;
КонецФункции	
