
#ОБЛАСТЬ ОБЩИЕПРОЦЕДУРЫИФУНКЦИИ

// КОНСТАНТЫ //

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции	

Функция УстановитьЗначениеКонстанты(ИмяКонстанты,Значение) Экспорт
	Константы[ИмяКонстанты].Установить(Значение);	
КонецФункции	

Функция ПользовательЗарегистрирован() Экспорт
	
	мПользователь = Константы.ТекущийПользователь.Получить();
	
	Если Не ЗначениеЗаполнено(мПользователь) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;	
	
	Если мПользователь.ПолучитьОбъект() = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции	

Функция АдресСервераАвторизацииПоУмолчанию() Экспорт
	Возврат ЗначенияПоУмолчаниюПереопределямый.АдресСервераПоУмолчанию();
КонецФункции	

// СТРОКИ //

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция Хэшировать(Пароль) Экспорт
	Хэш         = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хэш.Добавить(Пароль);
	ХэшПароля   = СтрЗаменить(Строка(Хэш.ХешСумма)," ","");
	Возврат ХэшПароля;
КонецФункции

//Удаляет повторяющиеся элементы массива
//
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМассиве 		   = Новый Соответствие; 
		БылоНеопределено 	   = Ложь;
		КолвоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента    = ТипЗнч(ЭлементМассива); 
			
			Если ЭлементМассива = Неопределено Тогда
				
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМассиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
			
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// ДАТЫ //

Функция ДеньНеделиПоНомеру(Номер = Неопределено) Экспорт
	Если Номер = Неопределено Тогда
		Номер = ТекущаяДата();
	КонецЕсли;	
	
	Если ТипЗнч(Номер) = Тип("Число") Тогда
		Если Номер >= 1 И Номер <= 7 Тогда
			Возврат Перечисления.ДниНедели.Получить(Номер - 1);
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Номер) = Тип("Дата") Тогда
		Возврат ДеньНеделиПоНомеру(ДеньНедели(Номер));
	КонецЕсли;
КонецФункции	

Функция ФорматДаты(Дата, НеВыводитьВремя = ЛОЖЬ) Экспорт
	Возврат "" + ДеньНеделиПоНомеру(ДеньНедели(Дата)) + ", " + Формат(Дата,?(НеВыводитьВремя,"ДФ=dd.MM.yyyy","ДФ='dd.MM.yyyy HH:mm:ss'"));
КонецФункции

Функция РазностьДатВСекундах(БольшаяДата,МеньшаяДата = '00010101') Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ	РАЗНОСТЬДАТ(&ДатаНачала,&ДатаОкончания, СЕКУНДА) КАК Рез";
	Запрос.УстановитьПараметр("ДатаНачала",МеньшаяДата);
	Запрос.УстановитьПараметр("ДатаОкончания",БольшаяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Рез;	
КонецФункции

Функция ПолучитьНачалоКонецНедели() Экспорт
	ТекДата = ТекущаяДата();
	//Если ДеньНедели(ТекДата) <= 5 Тогда
	//	ДатаНач = НачалоНедели(ТекДата)- 2 * 24 * 60 * 60;    // С субботы
	//	ДатаКон = КонецНедели(ТекДата) - 2 * 24 * 60 * 60;// По конец пятницы 
	//Иначе
	//	ДатаНач = НачалоНедели(ТекДата) + 5 * 24 * 60 * 60;// С субботы
	//	ДатаКон = КонецНедели(ТекДата) + 5 * 24 * 60 * 60;// По конец следующей пятницы 
	//КонецЕсли;	
	
	Стр = Новый Структура;
	
	//Стр.Вставить("НачалоНедели",ДатаНач);
	//Стр.Вставить("КонецНедели" ,ДатаКон);
	Стр.Вставить("НачалоНедели",НачалоНедели(ТекДата));
	Стр.Вставить("КонецНедели" ,КонецНедели(ТекДата));
	
	Возврат Стр;
КонецФункции	

Функция РассчитатьДопустимуюСуммаЗаказаНаБонусЗаВозврат( Контрагент ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистры.Контрагент,
	|	Регистры.ВидТоварногоБонуса,
	|	СУММА(Регистры.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварныйБонусКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|		ТоварныйБонусКонтрагентовСрезПоследних.ВидТоварногоБонуса КАК ВидТоварногоБонуса,
	|		ТоварныйБонусКонтрагентовСрезПоследних.Сумма КАК Сумма
	|	ИЗ
	|		РегистрСведений.ТоварныйБонусКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент = &Контрагент
	|					И ВидТоварногоБонуса = ЗНАЧЕНИЕ(Перечисление.Балмико_ВидыТоварногоБонуса.БонусТоваромЗаВозврат)) КАК ТоварныйБонусКонтрагентовСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Балмико_ТоварныйБонусОбороты.Контрагент,
	|		Балмико_ТоварныйБонусОбороты.ВидТоварногоБонуса,
	|		Балмико_ТоварныйБонусОбороты.СуммаОборот
	|	ИЗ             
	|		РегистрНакопления.Балмико_ТоварныйБонус.Обороты(
	|				,
	|				,
	|				Период,
	|				Контрагент = &Контрагент
	|					И ВидТоварногоБонуса = ЗНАЧЕНИЕ(Перечисление.Балмико_ВидыТоварногоБонуса.БонусТоваромЗаВозврат)) КАК Балмико_ТоварныйБонусОбороты) КАК Регистры
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистры.Контрагент,
	|	Регистры.ВидТоварногоБонуса";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	МинСуммаЗаказа = Константы.МинимальнаяСуммаЗаказа.Получить();
	Запрос.УстановитьПараметр("МинСуммаЗаказа", МинСуммаЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции	// РассчитатьДопустимуюСуммаЗаказаНаБонусЗаВозврат

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ИНИЦИАЛИЗАЦИЯРАБОЧЕГОСТОЛА

Функция ПолучитьАктуальныйМаршрут(Сотрудник = Неопределено, ДеньНедели = Неопределено)  Экспорт
	Если Сотрудник = Неопределено Тогда
		Сотрудник = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если ТипЗнч(ДеньНедели) <> Тип("ПеречислениеСсылка.ДниНедели") Тогда
		мДень = ДеньНеделиПоНомеру(ДеньНедели);
	Иначе
		мДень = ДеньНедели;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктуальныеМаршрутыСрезПоследних.Маршрут
	|ИЗ
	|	РегистрСведений.АктуальныеМаршруты.СрезПоследних(
	|			&ТекущаяДата,
	|			ТорговыйПредставитель = &ТорговыйПредставитель
	|				И (Период МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ))) КАК АктуальныеМаршрутыСрезПоследних";
	Запрос.УстановитьПараметр("ТорговыйПредставитель",Сотрудник.ФизЛицо);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Маршрут;
	КонецЕсли;
	
	Возврат Документы.Маршрут.ПустаяСсылка();
КонецФункции	

Функция ПолучитьАктуальныйРабочийДень(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Возврат РегистрыСведений.СостоянияРабочегоДня.ПолучитьПоследнее(,Новый Структура("Сотрудник",Пользователь)).РабочийДень;
	
КонецФункции	

Функция ПолучитьАктуальноеПосещение(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Возврат РегистрыСведений.СостоянияПосещений.ПолучитьПоследнее(,Новый Структура("Сотрудник",Пользователь)).Посещение;
	
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ УТИЛИТЫ

Процедура УстановитьУтилитыСервер(Знач Путь) Экспорт
    ПолучитьОбщийМакет("Сервис").Записать(Путь);
КонецПроцедуры

Функция ЗапросКВебСерверуАгента(ИмяФункции, Заголовки = Неопределено) Экспорт
	Соединение = Новый HTTPСоединение("Localhost",24283,,,,5);
	Запрос     = Новый HTTPЗапрос(ИмяФункции,Заголовки);
	Рез        = Соединение.ОтправитьДляОбработки(Запрос);
	Возврат Рез;
КонецФункции	

Функция ВерсияСлужбСервер()  Экспорт
	Рез = ЗапросКВебСерверуАгента("GETVERSION",Неопределено);
	Возврат Рез.ПолучитьТелоКакСтроку();
КонецФункции	

Процедура ПерезапускСлужбСервер(СтрокаЗапуска) Экспорт
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PARAM",СтрокаЗапуска);	
	Рез = ЗапросКВебСерверуАгента("STARTSERVICE",Заголовки);
КонецПроцедуры	

Функция МодельПланшетаСервер()  Экспорт
	Рез = ЗапросКВебСерверуАгента("GETMODELDEVICE",Неопределено);
	Возврат Рез.ПолучитьТелоКакСтроку();
КонецФункции	

Функция ЗарядБатареиСервер()  Экспорт
	Рез = ЗапросКВебСерверуАгента("GETBATTERYLEVEL",Неопределено);
	Возврат Рез.ПолучитьТелоКакСтроку();
КонецФункции	


#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ОБНОВЛЕНИЕКОНФИГУРАЦИИ

Функция ОбновитьКонфигурацию(АдресРезультата, ТипПроцессора) Экспорт 
	Попытка
		Ответ = ОбщийМодульСервер.ЗапросКВебСерверуАгента("GETNETWOKSTATE",Новый Соответствие);
		Если Ответ.ПолучитьТелоКакСтроку("UTF-8") <> "ON" Тогда
			Возврат Новый Структура("Успех,Ошибка",Ложь,"Сеть недоступна");
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	Ответ = Новый Структура;
	
	НастройкиПодключения = Константы.НастройкиПодключения.Получить().Получить();
	
	Если НастройкиПодключения = Неопределено Тогда
		НастройкиПодключения = СтандартныеНастройкиПодключения();
	КонецЕсли;	
	
	НастройкиПодключения.Вставить("ИмяФункции","GetActualVersion");
	
	Попытка
		Прокси = ПолучитьВСПрокси(НастройкиПодключения);
		Рез    = Прокси.GetActualVersion();
		Если Рез <> Метаданные.Версия Тогда
			НастройкиПодключения.Вставить("ИмяФункции","GetUpdate");
			Прокси = ПолучитьВСПрокси(НастройкиПодключения);		
			Рез    = Прокси.GetUpdate(ТипПроцессора); 
			ПоместитьВоВременноеХранилище(Рез.Получить(),АдресРезультата);
			Ответ.Вставить("АдресРезультата",АдресРезультата);
			Ответ.Вставить("Успех"          ,Истина);
		Иначе
			Ответ.Вставить("Успех",Истина);
			Ответ.Вставить("Ошибка","Конфигурация актуальная");
		КонецЕсли;	
	Исключение
		Ошибка = ИнформацияОбОшибке();
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Загрузка обновления",,,Ошибка.Описание);
		Ответ.Вставить("Успех" ,Ложь);
		Ответ.Вставить("Ошибка",Ошибка.Описание);
	КонецПопытки;	
	
	Возврат Ответ;
КонецФункции	

Процедура ОчисткаБазыДанных() Экспорт
	ФоновыеЗаданияСервер.ОстановитьВсеФоновыеЗадания();
	УстановитьМонопольныйРежим(Истина);
	УдалитьДанныеИнформационнойБазы();
	УстановитьМонопольныйРежим(Ложь);
КонецПроцедуры	

Функция ОпределитьТипПроцессора() Экспорт
	СисИнфо   = Новый СистемнаяИнформация;
	Процессор = НРег(СисИнфо.Процессор);
	Если Найти(Процессор,"arm") > 0 Тогда 
		Возврат "arm";
	ИначеЕсли Процессор = "aarch64" Тогда
		Возврат "arm";
	ИначеЕсли Процессор = "i686" Тогда
		Возврат "x86";
	ИначеЕсли Процессор = "x86_64" Тогда
		Возврат "x86";		
	КонецЕсли;	
КонецФункции

Функция ПроверитьСкорректироватьУзелПланаОбмена() Экспорт
	// 2017-06-05 МСН
	ЭтотУзел = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел().ПолучитьОбъект();
	Если ТипЗнч(ЭтотУзел) = Тип("ПланОбменаОбъект.ОС_ОбменСМобильнымиУстройствами") И ПустаяСтрока(ЭтотУзел.Код) Тогда
		ВыборкаПланов = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.Выбрать();
		Пока ВыборкаПланов.Следующий() Цикл
			Если ВыборкаПланов.ЭтотУзел Тогда
			ИначеЕсли ВыборкаПланов.Код = "ЦБ" Тогда
			ИначеЕсли Не ПустаяСтрока(ВыборкаПланов.Код) И Найти(ВыборкаПланов.Код,"_") = 0 Тогда
				НачатьТранзакцию();
				
				Всп = ВыборкаПланов.Ссылка.ПолучитьОбъект();
				Всп.Код = СокрЛП(Всп.Код) + "_";
				Всп.Записать();
				
				ЭтотУзел.Код = ВыборкаПланов.Код;
				ЭтотУзел.Наименование = ВыборкаПланов.Наименование;
				ЭтотУзел.Записать();
				
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭтотУзел) = Тип("ПланОбменаОбъект.ОС_ОбменСМобильнымиУстройствами") Тогда
		ЦБСсылка = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
		ВыборкаПланов = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.Выбрать();
		Пока ВыборкаПланов.Следующий() Цикл
			Если ВыборкаПланов.ЭтотУзел Тогда
			ИначеЕсли ВыборкаПланов.Код = "ЦБ" Тогда
			Иначе
				
				ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ВыборкаПланов.Ссылка, ВыборкаПланов.НомерОтправленного);
				Пока ВыборкаИзменений.Следующий() Цикл
					ИзмененныйОбъект = ВыборкаИзменений.Получить();
					ПланыОбмена.ЗарегистрироватьИзменения(ЦБСсылка, ИзмененныйОбъект);
				КонецЦикла;
				
				Всп = ВыборкаПланов.Ссылка.ПолучитьОбъект();
				Всп.Удалить();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ РАБОТАСГЕОКООРДИНАТАМИ

// Получаем геокоординаты не через запуск приложения, а через веб-сервис //

Функция ПрочитатьКоординатыАгентаСервер() Экспорт
	
	Продолжать = ЛОЖЬ;
	
	Результат = Новый Структура;
	
	Если Не ОбщийМодульСервер.ПользовательЗарегистрирован() Тогда
		Результат.Вставить("Успех",ЛОЖЬ);
		Результат.Вставить("Ошибка","Пользователь не зарегистрирован");
		Возврат Результат;
	КонецЕсли;	
	
	КоличествоЗаписей = 50;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PARAM",КоличествоЗаписей);	
	Попытка
		Рез = ЗапросКВебСерверуАгента("READ_GPS",Заголовки);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка при загрузке координат: " + Ошибка.Описание);
		Результат.Вставить("Успех",ЛОЖЬ);
		Результат.Вставить("Ошибка",Ошибка);
		
		Возврат Результат;
	КонецПопытки;	
		
	ИдДляУдаления = "";
	
	Данные = Рез.ПолучитьТелоКакСтроку("UTF-8");
	Если Данные <> Неопределено Тогда
		Попытка
			Массив = БыстрыйПарсингМассиваJSON(Данные);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка при загрузке координат: " + Ошибка.Описание);
			Результат.Вставить("Успех",ЛОЖЬ);
			Результат.Вставить("Ошибка",Ошибка);
			Возврат Результат;
		КонецПопытки;	
		
		Для Каждого Эл Из Массив Цикл
			ИдДляУдаления = ИдДляУдаления + ?(ПустаяСтрока(ИдДляУдаления),"",",") + Эл.ID;
			Стр = МэппингСтруктурКоординатСервер(Эл);
			ЗаписатьМестоположениеСервер(Стр);
		КонецЦикла;	
		
		Если КоличествоЗаписей = Массив.Количество() Тогда
			Продолжать = Истина;
		Иначе
			Продолжать = Ложь;
		КонецЕсли;
		
		Результат.Вставить("Успех",Истина);
		Результат.Вставить("Продолжать",Продолжать);
	КонецЕсли;
	
	Если ИдДляУдаления <> "" Тогда
		ИдДляУдаления = "[" + ИдДляУдаления + "]";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("PARAM",ИдДляУдаления);	
		Попытка
			Рез = ЗапросКВебСерверуАгента("DELETEGPSBUID",Заголовки);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка при загрузке координат: " + Ошибка.Описание);
			Результат.Вставить("Успех",ЛОЖЬ);
			Результат.Вставить("Ошибка",Ошибка);
			Возврат Результат;
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции	

Функция ПолучитьТекущиеКоординатыСервер() Экспорт
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("PARAM",1);	
	Попытка
		Рез = ЗапросКВебСерверуАгента("GETCURRENTGPS",Заголовки);
	Исключение
		//ОбщийМодульКлиент.УстановитьИЗапуститьСлужбу();
		// ТЕСТ //
		//Сообщить("" + ОписаниеОшибки());
		Возврат ЛОЖЬ;
	КонецПопытки;	
	
	Данные = Рез.ПолучитьТелоКакСтроку("UTF-8");
	Если Данные <> Неопределено Тогда
		Результат = БыстрыйПарсингСтруктурыJSON(Данные);
 		Возврат Результат;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗафиксироватьМестоположениеСервер(Документ = Неопределено, Событие = "") Экспорт
	Рез             = ПолучитьТекущиеКоординатыСервер();
	ДанныеДляЗаписи = МэппингСтруктурКоординатСервер(Рез);
	ЗаписатьМестоположениеСервер(ДанныеДляЗаписи,Документ,Событие);
КонецФункции	

// Процедуры для обработки полученных строк в виде координат //

Функция МэппингСтруктурКоординатСервер(ИсходнаяСтруктура) Экспорт 
	Стр = Новый Структура();
	Стр.Вставить("ДатаУстройства",ИсходнаяСтруктура.deviceDate);
	Стр.Вставить("ВремяСпутника" ,ИсходнаяСтруктура.gpsDate);
	Стр.Вставить("gpsВключен"    ,?(ИсходнаяСтруктура.gpsOn = "1",Истина,Ложь));
	Стр.Вставить("ИмяПровайдера" ,"gps");
	Стр.Вставить("Широта"        ,Число(ИсходнаяСтруктура.latitude));
	Стр.Вставить("Долгота"       ,Число(ИсходнаяСтруктура.longitude));	
	
	ЗарядкаИдет = Ложь;
	ИсходнаяСтруктура.Свойство("chargingStat", ЗарядкаИдет);
	Стр.Вставить("ЗарядкаИдет"    ,?(ЗарядкаИдет = "1",Истина,Ложь));
	УровеньЗаряда = Ложь;
	ИсходнаяСтруктура.Свойство("bateryLevel", УровеньЗаряда);
	Стр.Вставить("УровеньЗарядаБатареи"    ,?(УровеньЗаряда = Неопределено,0,УровеньЗаряда));
	ЧасовойПояс = "";
	ИсходнаяСтруктура.Свойство("timeZone", ЧасовойПояс);
	Стр.Вставить("ЧасовойПояс"    ,ЧасовойПояс);	
	
	//Для Каждого Эл из ИсходнаяСтруктура Цикл
	//	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("!"+Эл.Ключ+"!");
	//КонецЦикла;

	//Стр.Вставить("ЗарядкаИдет"    ,?(ИсходнаяСтруктура.CHARGINGSTAT = "1",Истина,Ложь));
	//Стр.Вставить("УровеньЗарядаБатареи" ,Число(ИсходнаяСтруктура.BATTERYLEVEL));
	Возврат Стр;
КонецФункции

Функция БыстрыйПарсингМассиваJSON(Знач мСтрока) Экспорт
	Строка = мСтрока;
	
	Если Лев(Строка,1) = "[" Тогда
		Строка = Прав(Строка,СтрДлина(Строка) - 1);
	КонецЕсли;
	Если Прав(Строка,1) = "]" Тогда
		Строка = Лев(Строка,СтрДлина(Строка) - 1);
	КонецЕсли;
	
	Рез = Новый Массив;
	
	МассивБудущихСтруктур = РазложитьСтрокуВМассивПодстрок(Строка,"}");	
	Для Каждого СтрСтруктура Из МассивБудущихСтруктур Цикл
		
		Если СтрДлина(СтрСтруктура) < 5 Тогда
			Продолжить;
		КонецЕсли;	
		
		Рез.Добавить(БыстрыйПарсингСтруктурыJSON(СтрСтруктура));
	КонецЦикла;	
	
	Возврат Рез;
КонецФункции	 

Функция БыстрыйПарсингСтруктурыJSON(Знач СтрСтруктура) Экспорт
	Если Прав(СтрСтруктура,1) = "}" Тогда
		СтрСтруктура = Лев(СтрСтруктура, СтрДлина(СтрСтруктура) - 1);
	КонецЕсли;
	Если Лев(СтрСтруктура,1) = "," Тогда
		СтрСтруктура = Прав(СтрСтруктура, СтрДлина(СтрСтруктура) - 1);
	КонецЕсли;
	Если Лев(СтрСтруктура,1) = "{" Тогда
		СтрСтруктура = Прав(СтрСтруктура, СтрДлина(СтрСтруктура) - 1);
	КонецЕсли;
	
	ДанныеДляСтруктуры = РазложитьСтрокуВМассивПодстрок(СтрСтруктура, ",");
	
	Стр = Новый Структура;
	Для Каждого ЭлСтруктуры Из ДанныеДляСтруктуры Цикл
		ИмяЭл = Лев(ЭлСтруктуры,Найти(ЭлСтруктуры,":") - 2);
		ИмяЭл = СтрЗаменить(ИмяЭл,"""","");
		ЗначениеЭл = СтрЗаменить(ЭлСтруктуры,"""" + ИмяЭл + """:","");
		Если Найти(НРег(ИмяЭл),"date") > 0 Тогда
			ЗначениеЭл = СтрЗаменить(ЗначениеЭл, "_", "");
			ЗначениеЭл = СтрЗаменить(ЗначениеЭл, """", "");
			ЗначениеЭл = Дата(ЗначениеЭл);
			Если ЗначениеЭл < '19800101' Тогда
				ЗначениеЭл = '00010101';
			КонецЕсли;
			Стр.Вставить(ИмяЭл, ЗначениеЭл);
		Иначе
			Стр.Вставить(ИмяЭл, ЗначениеЭл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Записываем координаты в БД //

Процедура ЗаписатьМестоположениеСервер(Координаты, Документ = Неопределено, Событие = "")  Экспорт
	Запись = РегистрыСведений.ГеоКоординаты.СоздатьМенеджерЗаписи();
	
	Запись.Сотрудник     		= Константы.ТекущийПользователь.Получить();
	
	Запись.Период        		= Координаты.ДатаУстройства;
	Запись.ВремяСпутника 		= Координаты.ВремяСпутника;
	Запись.Широта        		= Координаты.Широта;
	Запись.Долгота       		= Координаты.Долгота;
	Запись.ИмяПровайдера 		= Координаты.ИмяПровайдера;	
	Запись.Документ      		= Документ;
	Запись.Событие       		= Событие;
	Запись.gpsВключен    		= Координаты.gpsВключен;
	Запись.ЗарядкаИдет	 		= Координаты.ЗарядкаИдет;
	Запись.УровеньЗарядаБатареи = Координаты.УровеньЗарядаБатареи;
	Запись.ЧасовойПояс 			= Координаты.ЧасовойПояс;
	
	Запись.Записать(Истина);
КонецПроцедуры	

#КОНЕЦОБЛАСТИ	// РАБОТАСГЕОКООРДИНАТАМИ


#ОБЛАСТЬ ОПТИМИЗАЦИЯБД
//Киселев
Процедура ОчиститьУстаревшиеДанныеБД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК Кол
	               |ИЗ
	               |	РегистрСведений.ОС_ПрисоединенныеФайлы.Изменения КАК ОС_ПрисоединенныеФайлыИзменения";
	
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда
		
		Набор = РегистрыСведений.ОС_ПрисоединенныеФайлы.СоздатьНаборЗаписей();
		Набор.Записать();
		
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК Кол
	               |ИЗ
	               |	РегистрСведений.ГеоКоординаты.Изменения КАК ГеоКоординатыИзменения";
	
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда
		
		Набор = РегистрыСведений.ГеоКоординаты.СоздатьНаборЗаписей();
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КОНЕЦОБЛАСТИ
