
Процедура УстановкаКодаСправочникиПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Префикс = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел().Код + "-";
КонецПроцедуры

Процедура УстановкаНомераДокументыПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Префикс = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел().Код + "-";
КонецПроцедуры

Функция ПроверкаЭтапаАвторизацииСервер () Экспорт
	Этап = 0;
	НастройкиПодключения = Константы.НастройкиПодключения.Получить().Получить();
	
	Если НЕ ЗначениеЗаполнено(Константы.ID.Получить())  Или (ТипЗнч(НастройкиПодключения) = Тип ("Структура") И НастройкиПодключения.Пользователь = ЗначенияПоУмолчаниюПереопределямый.ИмяПользователяПоУмолчанию()) Тогда
		Этап = 1;
	ИначеЕсли НЕ (ТипЗнч(НастройкиПодключения) = Тип ("Структура") И НастройкиПодключения.Пользователь <> ЗначенияПоУмолчаниюПереопределямый.ИмяПользователяПоУмолчанию()) Тогда
		Этап = 2;
	ИначеЕсли Не ОбщийМодульСервер.ПользовательЗарегистрирован() Тогда
		Этап = 3;
	КонецЕсли;
	
	Возврат Этап;
КонецФункции	

Процедура ПроверкаИзмененияВерсий () Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОС_Логи.Объект,
	               |	ОС_Логи.НаправлениеОбмена
	               |ИЗ
	               |	РегистрСведений.ОС_Логи КАК ОС_Логи
	               |ГДЕ
	               |	ОС_Логи.Объект.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.ОС_Логи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер,Выборка);
		Менеджер.Удалить();
	КонецЦикла;	
	Константы.ВерсияКонфигурации.Установить(Метаданные.Версия);
КонецПроцедуры 	

Процедура ОткрытиеФормыОбъектаОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕСЕРВЕР ТОГДА
	Мета          = Источник.ПустаяСсылка().Метаданные();
	ИскомаяСтрока = Метаданные.ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.Состав.Найти(Мета);
	Если ИскомаяСтрока <> Неопределено И ИскомаяСтрока.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		ВыбраннаяФорма       = Мета.ПолноеИмя() + "." + ВидФормы;
		Параметры.Вставить("ТолькоПросмотр",Истина);
	КонецЕсли;
	#КОНЕЦЕСЛИ
КонецПроцедуры

#ОБЛАСТЬ ПРИСОЕДИНЕННЫЕФАЙЛЫ 

Процедура ПрисоединенныеФайлы_ИнициализироватьТаблицуПрисоединенныхФайлов(Форма, ГруппаФайлов = Неопределено)  Экспорт
	
	Команда = Форма.Команды.Добавить("ПрисоединенныеФайлы_ДобавитьФайл");
	Команда.Действие    = "ДобавитьФайл";
	Команда.Картинка    = БиблиотекаКартинок.ДобавитьЭлементСписка;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Заголовок   = "Добавить фото";
	
	Команда = Форма.Команды.Добавить("ПрисоединенныеФайлы_УдалитьФайл");
	Команда.Действие    = "УдалитьФайл";
	Команда.Картинка    = БиблиотекаКартинок.УдалитьЭлементСписка;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Заголовок   = "Удалить фото";
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Таблица = Новый РеквизитФормы("Таблица_ПрисоединенныеФайлы",Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("ТипСодержимого",Новый ОписаниеТипов("Строка"),"Таблица_ПрисоединенныеФайлы");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("Расширение",Новый ОписаниеТипов("Строка"),"Таблица_ПрисоединенныеФайлы");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("АдресФайла",Новый ОписаниеТипов("Строка"),"Таблица_ПрисоединенныеФайлы");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("ИДФайла"   ,Новый ОписаниеТипов("Строка"),"Таблица_ПрисоединенныеФайлы");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("Удалить"   ,Новый ОписаниеТипов("Булево"),"Таблица_ПрисоединенныеФайлы");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавим группу "Страницы" для файлов
	ГруппаПФ     = Форма.Элементы.Добавить("Группа_ПрисоединенныеФайлы",Тип("ГруппаФормы"),ГруппаФайлов);
	ГруппаПФ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группапф.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаПФ.ОтображатьЗаголовок = ЛОЖЬ;
	
	ГруппаКнопок       = Форма.Элементы.Добавить("ГруппаКнопок_ПрисоединенныеФайлы",Тип("ГруппаФормы"),ГруппаПФ);
	ГруппаКнопок.Вид   = ВидГруппыФормы.Страницы;	
	ГруппаКнопок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКнопок.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаКнопок.ОтображатьЗаголовок = ЛОЖЬ;
	ГруппаКнопок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Кнопка            = Форма.Элементы.Добавить("ПрисоединенныеФайлы_ДобавитьФайл",Тип("КнопкаФормы"),ГруппаКнопок);
	Кнопка.ИмяКоманды = "ПрисоединенныеФайлы_ДобавитьФайл";
	
	Кнопка            = Форма.Элементы.Добавить("ПрисоединенныеФайлы_УдалитьФайл",Тип("КнопкаФормы"),ГруппаКнопок);
	Кнопка.ИмяКоманды = "ПрисоединенныеФайлы_УдалитьФайл";
	
	Группа       = Форма.Элементы.Добавить("ГруппаСтраниц_ПрисоединенныеФайлы",Тип("ГруппаФормы"),ГруппаПФ);
	Группа.Вид   = ВидГруппыФормы.Страницы;
	
	//Версия работы с фото
	Группа.УстановитьДействие("ПриСменеСтраницы", "ПодгрузитьФото");
	
	мОбъект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(мОбъект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	// Загрузим присоединенные файлы из регистра //
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.ИдентификаторФайла,
	|	ПрисоединенныеФайлы.ХранилищеДанных,
	|	ПрисоединенныеФайлы.Расширение,
	|	ПрисоединенныеФайлы.ТипСодержимого
	|ИЗ
	|	РегистрСведений.ОС_ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.СсылкаНаОбъект = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла",мОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                = Форма.Таблица_ПрисоединенныеФайлы.Добавить();
		НоваяСтрока.Расширение     = Выборка.Расширение;
		НоваяСтрока.ИДФайла        = Выборка.ИдентификаторФайла;
		НоваяСтрока.АдресФайла     = ПоместитьВоВременноеХранилище(Выборка.ХранилищеДанных.Получить(),Новый УникальныйИдентификатор(НоваяСтрока.ИДФайла));
		НоваяСтрока.ТипСодержимого = Выборка.ТипСодержимого;
	КонецЦикла;	
	
	ПрисоединенныеФайлы_ОбновитьРеквизитыФормы(Форма);
КонецПроцедуры	

Процедура ПрисоединенныеФайлы_ОбновитьРеквизитыФормы (Форма)  Экспорт
	
	СЧ = 0;
	
	Для Каждого СтрокаТЧ Из Форма.Таблица_ПрисоединенныеФайлы Цикл
		ИД = СтрЗаменить(СтрокаТЧ.ИДФайла,"-","_");
		СЧ = СЧ + 1;
		Если Форма.Элементы.Найти("Страница_" + ИД) = Неопределено Тогда
			Группа                     = Форма.Элементы.Добавить("Страница_" + ИД, Тип("ГруппаФормы"),Форма.Элементы.ГруппаСтраниц_ПрисоединенныеФайлы);
			Группа.Вид                 = ВидГруппыФормы.Страница;
			Группа.отображатьЗаголовок = Истина;
			Группа.Заголовок           = СтрокаТЧ.ТипСодержимого;
			
			//Версия работы с фото
			//Поле                       = Форма.Элементы.Добавить("Декорация_" + ИД,Тип("ПолеФормы"),Группа);
			//Поле.Вид                   = ВидПоляФормы.ПолеКартинки;
			//Поле.ПоложениеЗаголовка    = ПоложениеЗаголовкаЭлементаФормы.Нет;
			//Поле.РазмерКартинки        = РазмерКартинки.АвтоРазмер;
			//Поле.ПутьКДанным           = "Таблица_ПрисоединенныеФайлы[" + Формат(СЧ - 1,"ЧДЦ=; ЧН=0; ЧГ=0") + "].АдресФайла";
			Надпись = Форма.Элементы.Добавить("Надпись_" + ИД,Тип("ДекорацияФормы"),Группа);
			
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

Процедура ПрисоединенныеФайлы_СохранитьПрисоединенныеФайлы (Форма)  Экспорт
	мОбъект = Форма.Объект;
	
	Набор = РегистрыСведений.ОС_ПрисоединенныеФайлы.СоздатьНаборЗаписей();
	Набор.Отбор.СсылкаНаОбъект.Установить(мОбъект.Ссылка);
	Для Каждого СтрокаТЧ Из Форма.Таблица_ПрисоединенныеФайлы Цикл
		Если СтрокаТЧ.Удалить Тогда
			Продолжить;
		КонецЕсли; 	
		Запись = Набор.Добавить();
		Запись.СсылкаНаОбъект     = мОбъект.Ссылка;
		Запись.ИдентификаторФайла = СтрокаТЧ.ИДФайла;
		Если ЭтоАдресВременногоХранилища(СтрокаТЧ.АдресФайла) Тогда 
			Запись.ХранилищеДанных    = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТЧ.АдресФайла));
		Иначе
			Запись.ХранилищеДанных = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтрокаТЧ.АдресФайла));
		КонецЕсли;
			
		Запись.Расширение         = СтрокаТЧ.Расширение;
		Запись.ТипСодержимого     = СтрокаТЧ.ТипСодержимого;
	КонецЦикла;
	Набор.Записать(Истина);
	
	Для Каждого СтрокаТЧ Из Форма.Таблица_ПрисоединенныеФайлы Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаТЧ.АдресФайла) Тогда 

		Иначе
			
			УдалитьФайлы(СтрокаТЧ.АдресФайла);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ НАСТРОЙКАФОРМЫВВОДАЦЕН 

Функция ПолучитьАктуальныйДоговорКонтрагента (Контрагент) Экспорт
	
	КонтрагентДляДоговора = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) И Контрагент.ГоловнойКонтрагент <> Контрагент И Не Контрагент.ФБ_СамостоятельноеПодразделение Тогда
		КонтрагентДляДоговора = Контрагент.ГоловнойКонтрагент;
	Иначе
		КонтрагентДляДоговора = Контрагент;
	КонецЕсли;
	
	Возврат КонтрагентДляДоговора.ОсновнойДоговор;
	
КонецФункции

Функция ПолучитьЗначениеКИОбъекта (Объект, ВидКИ) Экспорт
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.ВидКонтактнойИнформации = &ВидКонтактнойИнформации";
	Запрос.УстановитьПараметр("Ссылка"                 ,Объект);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации",ВидКИ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Представление;
	КонецЕсли;	
КонецФункции	

Функция ЗапросДляОтбораНоменклатуры (Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	//Глебов Изменим Матрицы под УПП
	ЗапросНаПроверкуМатриц = Новый Запрос;
	ЗапросНаПроверкуМатриц.Текст = 
		"ВЫБРАТЬ
		|	УсловияПоставокПоДоговорамКонтрагентов.Ссылка
		|ИЗ
		|	Документ.УсловияПоставокПоДоговорамКонтрагентов КАК УсловияПоставокПоДоговорамКонтрагентов
		|ГДЕ
		|	УсловияПоставокПоДоговорамКонтрагентов.Проведен
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДатаОкончания >= &ДатаДоставки
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	ЗапросНаПроверкуМатриц.УстановитьПараметр("ДоговорКонтрагента", Форма.ДоговорКонтрагента);
	ЗапросНаПроверкуМатриц.УстановитьПараметр("ДатаДоставки", Форма.ДатаДоставки);
	
	РезультатЗапроса = ЗапросНаПроверкуМатриц.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МатрицаДействует = Ложь;
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		МатрицаДействует = Истина;
	КонецЕсли;
	//РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Матрица действует " + МатрицаДействует);
	//\\
	
	ЗапросПоГруппам = Новый Запрос;
	ЗапросПоГруппам.Текст = 
	"ВЫБРАТЬ
	|	ГруппыНоменклатуры.Ссылка КАК ГруппаНоменклатуры,
	|	ГруппыНоменклатуры.ПроизвольныйЗапрос,
	|	ГруппыНоменклатуры.Приоритет,
	|	ГруппыНоменклатуры.Код,
	|	ГруппыНоменклатуры.ИмяПоляНоменклатура
	|ИЗ
	|	Справочник.ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|ГДЕ
	|	НЕ ГруппыНоменклатуры.ПометкаУдаления
	|	И НЕ ГруппыНоменклатуры.НеАктивна
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыНоменклатуры.Приоритет УБЫВ,
	|	ГруппыНоменклатуры.Код УБЫВ";
	
	Выборка = ЗапросПоГруппам.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ТипЦен"              ,Форма.ТипЦен);
	Запрос.УстановитьПараметр("Контрагент"          ,Форма.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента"  ,Форма.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Посещение"           ,Форма.Посещение);
	Запрос.УстановитьПараметр("ТекущаяДата"         ,ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаДоставки"        ,Форма.ДатаДоставки);
	//Запрос.УстановитьПараметр("ИспользоватьСпецЦены",Форма.ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями);
	Запрос.УстановитьПараметр("ИспользоватьСпецЦены",МатрицаДействует);
	
	ОтборПоНоменклатуре = " %ПолеНоменклатура% В (Выбрать ТЧ.Номенклатура Из СпрНоменклатура Как ТЧ) ";
	
	// В случае, если выборка будет ограничена условиями поставок, то ограничим ее потом //
	Если Форма.ДоговорКонтрагента.ВидУсловийДоговора <> Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями
		Или Форма.ДоговорКонтрагента.ФБ_СпециальныеЦены Или Не МатрицаДействует Тогда
		ТекстЗапросаОбщий = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(Ограничение.Количество, 0) КАК ОграничениеЗаказа,
		|	ЛОЖЬ Как ЗапретЗаказа
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОграчениеОтгрузокВозвратообразущейПродукции КАК Ограничение
		|		ПО (Ограничение.Грузополучатель = &Контрагент)
		|			И (Ограничение.Номенклатура = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаОбщий = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(Ограничение.Количество, 0) КАК ОграничениеЗаказа,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Ограничение.Количество, 0) >= 0 И НЕ ТЧ.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапретЗаказа
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОграчениеОтгрузокВозвратообразущейПродукции КАК Ограничение
		|		ПО (Ограничение.Грузополучатель = &Контрагент)
		|			И (Ограничение.Номенклатура = СпрНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&ДатаДоставки, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ТЧ
		|		ПО СпрНоменклатура.Ссылка = ТЧ.Номенклатура
		|			И (ТЧ.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ НАЧАЛОПЕРИОДА(ТЧ.ДатаОкончания, ДЕНЬ) >= &ДатаДоставки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	КонецЕсли;
	
	// Сначала нужно будет создать таблицу СпрНоменклатура для отбора //
	ТекстЗапросаОбщий =  ТекстЗапросаОбщий  +" ; 
	|ВЫБРАТЬ
	|	ТЧУсловия.Номенклатура КАК Номенклатура,
	|	ТЧУсловия.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТЧУсловия.Цена,
	|	ТЧУсловия.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТСпециальныеУсловия
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
	|			&ДатаДоставки,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И &ИспользоватьСпецЦены) КАК ТЧУсловия
	|ГДЕ
	|	(ТЧУсловия.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(ТЧУсловия.ДатаОкончания, ДЕНЬ) >= &ДатаДоставки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Цены.Номенклатура,
	|	Цены.ХарактеристикаНоменклатуры,
	|	Цены.Цена,
	|	Цены.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаДоставки,
	|			ТипЦен = &ТипЦен
	|				И &ОтборПоНоменклатуре) КАК Цены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОстаткиТоваров.Количество) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрСведений.ОС_ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	&ОтборПоНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%","Номенклатура")) + ";";
	
	// В результате получаем помещенные во временные таблицы, каждый со своим ИД таблицы выборки номенклатуры //
	ТекстЗапроса    = ""; // Содержит запрос формирования временных таблиц по номенклатуре. 1 группа = 1 ВТ //	
	ТекстСоединения = ""; // Содержит текст соединений //
	ТекстПоля       = ""; // Содержит поля таблицы значений по группам - значение Истина, если номенклатура принадлежит группе и Ложь, если не принадлежит //
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ИДПриоритета = Формат(Выборка.Приоритет,"ЧН=0; ЧГ=0") + "_" + Выборка.Код;
		Запрос.УстановитьПараметр("Группа" + ИДПриоритета,Выборка.ГруппаНоменклатуры);	
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПринадлежитГруппе" + ИДПриоритета,Новый ОписаниеТипов("Булево"),"СписокТоваров"));
		
		Если Выборка.ПроизвольныйЗапрос Тогда
			ТекстЗапросаДляДобавления = Выборка.ГруппаНоменклатуры.ТекстЗапроса;
			// В тексте запроса обязательно должны содержаться следующее -
			//  Поле "Номенклатура" в выборке 
			// "//ПРИОРИТЕТ" - для того, чтобы подставить в запрос автоматически сгенерированный ИД приоритета
			// "//ПОМЕСТИТЬ" - для того, чтобы было понятно в каком месте идет помещение в ВТ
			// &ОтборПоНоменклатуре - опционально, чтобы предварительно уменьшить список только используемой номенклатуры и таким образом увеличить производительность запроса //
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПРИОРИТЕТ",",""" + ИДПриоритета + """ Как ИдПриоритета");
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПОМЕСТИТЬ","ПОМЕСТИТЬ СпрНоменклатура" + ИДПриоритета);
			Для Каждого СтрокаПараметр Из Выборка.ГруппаНоменклатуры.ЗначенияПараметров Цикл			
				ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&" + СтрокаПараметр.ИмяПараметра,"&" + СтрокаПараметр.ИмяПараметра + ИДПриоритета);
				мЗначениеПараметра = Неопределено;
				Если Не ПустаяСтрока(СтрокаПараметр.ТекстПолученияПараметра) Тогда
					Выполнить СтрокаПараметр.ТекстПолученияПараметра;
				Иначе
					мЗначениеПараметра = СтрокаПараметр.ЗначениеПараметра;
				КонецЕсли;					
				Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра + ИДПриоритета,мЗначениеПараметра);
			КонецЦикла;             
			
			// Устанавливаем отбор по номенклатуре, если нужно //
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%",Выборка.ИмяПоляНоменклатура));
			
			ТекстЗапросаДляДобавления = ТекстЗапросаДляДобавления + "
			| ИНДЕКСИРОВАТЬ ПО Номенклатура";
			
		Иначе
			ТекстЗапросаДляДобавления = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СпрНоменклатура.Номенклатура КАК Номенклатура,
			|	""" + ИДПриоритета + """ Как ИдПриоритета
			|ПОМЕСТИТЬ СпрНоменклатура" + ИДПриоритета + "
			|ИЗ
			|	РегистрСведений.ПринадлежностьНоменклатурыГруппам.СрезПоследних(, Группа = &Группа" + ИДПриоритета + " И &ОтборПоНоменклатуре) КАК СпрНоменклатура
			|ГДЕ
			|	НЕ СпрНоменклатура.Номенклатура.ЭтоГруппа
			|	И СпрНоменклатура.ПринадлежитГруппе = ИСТИНА
			|	
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, ИДПриоритета;";
			
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%","Номенклатура"));
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстЗапросаДляДобавления + ?(Прав(ТекстЗапросаДляДобавления,1) = ";","",";");
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ СпрНоменклатура" + ИДПриоритета + " 
		|			ПО СпрНоменклатура.Номенклатура = СпрНоменклатура" + ИДПриоритета + ".Номенклатура";
		
		ТекстПоля = ТекстПоля + "
		|	, ВЫБОР КОГДА  СпрНоменклатура" + ИДПриоритета + ".Номенклатура ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ Как ПринадлежитГруппе" + ИДПриоритета;
		
		// Установим условное оформление //
		Настройки = Выборка.ГруппаНоменклатуры.НастройкиУсловногоОформления.Получить();
		Если Настройки <> Неопределено Тогда
			ЭлОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
			Поле               = ЭлОформления.Поля.Элементы.Добавить();
			Поле.Поле          = Новый ПолеКомпоновкиДанных("СписокНоменклатура");
			Поле.Использование = Истина;
			
			Отбор = ЭлОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование  = Истина;
			Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокТоваров.ПринадлежитГруппе" + ИДПриоритета);
			Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.ПравоеЗначение = Истина;
			
			Для Каждого Эл Из Настройки Цикл
				ЭлНастройка = ЭлОформления.Оформление.Элементы.Найти(Эл.Ключ);
				Если ЭлНастройка <> Неопределено Тогда
					ЭлНастройка.Значение = Эл.Значение;
					ЭлНастройка.Использование = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		// Установим условное оформление //
		
	КонецЦикла;	
	
	ТекстЗапросаОбщий = ТекстЗапросаОбщий + ТекстЗапроса + "
	|	ВЫБРАТЬ
	|	СпрНоменклатура.Номенклатура,
	|	ВЫБОР 
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка)
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка)
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель
	|	КОНЕЦ Как Родитель,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА СпрНоменклатура.ОграничениеЗаказа >= 0 
	|			ТОГДА СпрНоменклатура.ЗапретЗаказа
	|		ИНАЧЕ Истина
	|	КОНЕЦ КАК ЗапретЗаказа,
	|	ЕСТЬNULL(ВТСпециальныеУсловия.Цена,ЕСТЬNULL(ВТЦены.Цена, 0)) * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения.Коэффициент,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0)) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения.Коэффициент,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0))
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(ВТЦены.Цена, 0) * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0)
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК ЦенаБезСкидки,
	|	ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения, """")) КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.ОграничениеЗаказа,
	|	ВТОстатки.КоличествоОстаток КАК Остаток
	|//ПОЛЯ//
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО СпрНоменклатура.Номенклатура = ВТЦены.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТЦены.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальныеУсловия КАК ВТСпециальныеУсловия
	|		ПО СпрНоменклатура.Номенклатура = ВТСпециальныеУсловия.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТСпециальныеУсловия.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстатки КАК ВТОстатки
	|		ПО СпрНоменклатура.Номенклатура = ВТОстатки.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТОстатки.ХарактеристикаНоменклатуры
	|//СОЕДИНЕНИЯ//
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Номенклатура.Наименование
	|";
		
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//ПОЛЯ//"      ,ТекстПоля);
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//СОЕДИНЕНИЯ//",ТекстСоединения);
	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"&ОтборПоНоменклатуре",ОтборПоНоменклатуре);
	
	Запрос.Текст = ТекстЗапросаОбщий;
	
	// Добавим реквизиты на форму //
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.СписокТоваров.Загрузить(Запрос.Выполнить().Выгрузить());
КонецФункции	

Функция ЗапросДляОтбораНоменклатуры_Дерево (Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	//Глебов Изменим Матрицы под УПП
	ЗапросНаПроверкуМатриц = Новый Запрос;
	ЗапросНаПроверкуМатриц.Текст = 
		"ВЫБРАТЬ
		|	УсловияПоставокПоДоговорамКонтрагентов.Ссылка
		|ИЗ
		|	Документ.УсловияПоставокПоДоговорамКонтрагентов КАК УсловияПоставокПоДоговорамКонтрагентов
		|ГДЕ
		|	УсловияПоставокПоДоговорамКонтрагентов.Проведен
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДатаОкончания >= &ДатаДоставки
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	ЗапросНаПроверкуМатриц.УстановитьПараметр("ДоговорКонтрагента", Форма.ДоговорКонтрагента);
	ЗапросНаПроверкуМатриц.УстановитьПараметр("ДатаДоставки", Форма.ДатаДоставки);
	
	РезультатЗапроса = ЗапросНаПроверкуМатриц.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МатрицаДействует = Ложь;
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		МатрицаДействует = Истина;
	КонецЕсли;
	//\\	
	
	ЗапросПоГруппам = Новый Запрос;
	ЗапросПоГруппам.Текст = 
	"ВЫБРАТЬ
	|	ГруппыНоменклатуры.Ссылка КАК ГруппаНоменклатуры,
	|	ГруппыНоменклатуры.ПроизвольныйЗапрос,
	|	ГруппыНоменклатуры.Приоритет,
	|	ГруппыНоменклатуры.Код,
	|	ГруппыНоменклатуры.ИмяПоляНоменклатура
	|ИЗ
	|	Справочник.ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|ГДЕ
	|	НЕ ГруппыНоменклатуры.ПометкаУдаления
	|	И НЕ ГруппыНоменклатуры.НеАктивна
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыНоменклатуры.Приоритет УБЫВ,
	|	ГруппыНоменклатуры.Код УБЫВ";
	
	Выборка = ЗапросПоГруппам.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ТипЦен"              ,Форма.ТипЦен);
	Запрос.УстановитьПараметр("Контрагент"          ,Форма.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента"  ,Форма.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Посещение"           ,Форма.Посещение);
	Запрос.УстановитьПараметр("ТекущаяДата"         ,ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаДоставки"        ,Форма.ДатаДоставки);
	//Запрос.УстановитьПараметр("ИспользоватьСпецЦены",Форма.ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями);
	Запрос.УстановитьПараметр("ИспользоватьСпецЦены",МатрицаДействует);
	
	ОтборПоНоменклатуре = " %ПолеНоменклатура% В (Выбрать ТЧ.Номенклатура Из СпрНоменклатура Как ТЧ) ";
	
	// В случае, если выборка будет ограничена условиями поставок, то ограничим ее потом //
	Если Форма.ДоговорКонтрагента.ВидУсловийДоговора <> Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями
		Или Форма.ДоговорКонтрагента.ФБ_СпециальныеЦены Или Не МатрицаДействует Тогда
		ТекстЗапросаОбщий = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(Ограничение.Количество, 0) КАК ОграничениеЗаказа,
		|	ЛОЖЬ Как ЗапретЗаказа
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОграчениеОтгрузокВозвратообразущейПродукции КАК Ограничение
		|		ПО (Ограничение.Грузополучатель = &Контрагент)
		|			И (Ограничение.Номенклатура = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	НЕ СпрНоменклатура.ЭтоГруппа
		|   И НЕ СпрНоменклатура.ПозицияВПрайсе = -1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаОбщий = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(Ограничение.Количество, 0) КАК ОграничениеЗаказа,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Ограничение.Количество, 0) >= 0 И НЕ ТЧ.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапретЗаказа
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОграчениеОтгрузокВозвратообразущейПродукции КАК Ограничение
		|		ПО (Ограничение.Грузополучатель = &Контрагент)
		|			И (Ограничение.Номенклатура = СпрНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&ДатаДоставки, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ТЧ
		|		ПО СпрНоменклатура.Ссылка = ТЧ.Номенклатура
		|			И (ТЧ.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ НАЧАЛОПЕРИОДА(ТЧ.ДатаОкончания, ДЕНЬ) >= &ДатаДоставки)
		|ГДЕ
		|  НЕ СпрНоменклатура.ПозицияВПрайсе = -1" +
		//Глебов 00-00000000000000000000000000000000000000017400002
			?(Форма.ЭтоВозврат, "", " И НЕ ТЧ.Номенклатура ЕСТЬ NULL ") +
		//\\Глебов 00-00000000000000000000000000000000000000017400002
		"
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	КонецЕсли;
	
	// Сначала нужно будет создать таблицу СпрНоменклатура для отбора //
	ТекстЗапросаОбщий =  ТекстЗапросаОбщий  +" ; 
	|ВЫБРАТЬ
	|	ТЧУсловия.Номенклатура КАК Номенклатура,
	|	ТЧУсловия.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТЧУсловия.Цена,
	|	ТЧУсловия.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТСпециальныеУсловия
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
	|			&ДатаДоставки,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И &ИспользоватьСпецЦены) КАК ТЧУсловия
	|ГДЕ
	|	(ТЧУсловия.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(ТЧУсловия.ДатаОкончания, ДЕНЬ) >= &ДатаДоставки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Цены.Номенклатура,
	|	Цены.ХарактеристикаНоменклатуры,
	|	Цены.Цена,
	|	Цены.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаДоставки,
	|			ТипЦен = &ТипЦен
	|				И &ОтборПоНоменклатуре) КАК Цены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОстаткиТоваров.Количество) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрСведений.ОС_ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	&ОтборПоНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%","Номенклатура")) + ";";
	
	// В результате получаем помещенные во временные таблицы, каждый со своим ИД таблицы выборки номенклатуры //
	ТекстЗапроса    = ""; // Содержит запрос формирования временных таблиц по номенклатуре. 1 группа = 1 ВТ //	
	ТекстСоединения = ""; // Содержит текст соединений //
	ТекстПоля       = ""; // Содержит поля таблицы значений по группам - значение Истина, если номенклатура принадлежит группе и Ложь, если не принадлежит //
	ТекстВыборки    = ""; // Содержит текст выбора номенклатуры в таблицу значений //
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		//ТестТестУдалить
		//Продолжить;
		//\\
		
		ИДПриоритета = Формат(Выборка.Приоритет,"ЧН=0; ЧГ=0") + "_" + Выборка.Код;
		Запрос.УстановитьПараметр("Группа" + ИДПриоритета,Выборка.ГруппаНоменклатуры);	
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПринадлежитГруппе" + ИДПриоритета,Новый ОписаниеТипов("Булево"),"ДеревоТоваров"));
		
		//ТекстВыборки = ТекстВыборки + ?(ПустаяСтрока(ТекстВыборки),"",Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ") + "
		//|	ВЫБРАТЬ
		//|	" + Выборка.Приоритет + " КАК Приоритет,
		//|	&Группа" + ИДПриоритета + " КАК ГруппаРодитель,
		//|	"""" КАК НаименованиеГруппы,
		//|	ТЧ.*
		//|ИЗ 
		//|	ВТНоменклатураПодготовленная КАК ТЧ
		//|ГДЕ
		//|	ТЧ.ПринадлежитГруппе" + ИДПриоритета;
		ТекстВыборки = ТекстВыборки + ?(ПустаяСтрока(ТекстВыборки),"",Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ") + "
		|	ВЫБРАТЬ
		|	ДанныеГруппы.Приоритет КАК Приоритет,
		|	ДанныеГруппы.ГруппаРодитель КАК ГруппаРодитель,
		|	ДанныеГруппы.НаименованиеГруппы Как НаименованиеГруппы,
		|	ТЧ.*
		|ИЗ 
		|	(ВЫБРАТЬ
		|	" + Выборка.Приоритет + " КАК Приоритет,
		|	&Группа" + ИДПриоритета + " КАК ГруппаРодитель,
		|	"""" Как НаименованиеГруппы) КАК ДанныеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВТНоменклатураПодготовленная КАК ТЧ
		|			ПО
		|				ТЧ.ПринадлежитГруппе" + ИДПриоритета;
		
		Если Выборка.ПроизвольныйЗапрос Тогда
			
			ТекстЗапросаДляДобавления = Выборка.ГруппаНоменклатуры.ТекстЗапроса;
			// В тексте запроса обязательно должны содержаться следующее -
			//  Поле "Номенклатура" в выборке 
			// "//ПРИОРИТЕТ" - для того, чтобы подставить в запрос автоматически сгенерированный ИД приоритета
			// "//ПОМЕСТИТЬ" - для того, чтобы было понятно в каком месте идет помещение в ВТ
			// &ОтборПоНоменклатуре - опционально, чтобы предварительно уменьшить список только используемой номенклатуры и таким образом увеличить производительность запроса //
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПРИОРИТЕТ",",""" + ИДПриоритета + """ Как ИдПриоритета");
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПОМЕСТИТЬ","ПОМЕСТИТЬ СпрНоменклатура" + ИДПриоритета);
			Для Каждого СтрокаПараметр Из Выборка.ГруппаНоменклатуры.ЗначенияПараметров Цикл			
				ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&" + СтрокаПараметр.ИмяПараметра,"&" + СтрокаПараметр.ИмяПараметра + ИДПриоритета);
				мЗначениеПараметра = Неопределено;
				Если Не ПустаяСтрока(СтрокаПараметр.ТекстПолученияПараметра) Тогда
					Выполнить СтрокаПараметр.ТекстПолученияПараметра;
				Иначе
					мЗначениеПараметра = СтрокаПараметр.ЗначениеПараметра;
				КонецЕсли;					
				Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра + ИДПриоритета,мЗначениеПараметра);
			КонецЦикла;             
			
			// Устанавливаем отбор по номенклатуре, если нужно //
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%",Выборка.ИмяПоляНоменклатура));
			
			ТекстЗапросаДляДобавления = ТекстЗапросаДляДобавления + "
			| ИНДЕКСИРОВАТЬ ПО Номенклатура";
			
		Иначе
			ТекстЗапросаДляДобавления = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СпрНоменклатура.Номенклатура КАК Номенклатура,
			|	""" + ИДПриоритета + """ Как ИдПриоритета
			|ПОМЕСТИТЬ СпрНоменклатура" + ИДПриоритета + "
			|ИЗ
			|	РегистрСведений.ПринадлежностьНоменклатурыГруппам.СрезПоследних(, Группа = &Группа" + ИДПриоритета + " И &ОтборПоНоменклатуре) КАК СпрНоменклатура
			|ГДЕ
			|	НЕ СпрНоменклатура.Номенклатура.ЭтоГруппа
			|	И СпрНоменклатура.ПринадлежитГруппе = ИСТИНА
			|	
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, ИДПриоритета;";
			
			ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&ОтборПоНоменклатуре",СтрЗаменить(ОтборПоНоменклатуре,"%ПолеНоменклатура%","Номенклатура"));
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстЗапросаДляДобавления + ?(Прав(ТекстЗапросаДляДобавления,1) = ";","",";");
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ СпрНоменклатура" + ИДПриоритета + " 
		|			ПО СпрНоменклатура.Номенклатура = СпрНоменклатура" + ИДПриоритета + ".Номенклатура";
		
		ТекстПоля = ТекстПоля + "
		|	, ВЫБОР КОГДА  СпрНоменклатура" + ИДПриоритета + ".Номенклатура ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ Как ПринадлежитГруппе" + ИДПриоритета;
		
		// Установим условное оформление //
		Настройки = Выборка.ГруппаНоменклатуры.НастройкиУсловногоОформления.Получить();
		Если Настройки <> Неопределено Тогда
			ЭлОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
			Поле               = ЭлОформления.Поля.Элементы.Добавить();
			Поле.Поле          = Новый ПолеКомпоновкиДанных("ДеревоТоваровНоменклатура");
			Поле.Использование = Истина;
			
			Отбор = ЭлОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование  = Истина;
			Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоТоваров.ПринадлежитГруппе" + ИДПриоритета);
			Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.ПравоеЗначение = Истина;
			
			Для Каждого Эл Из Настройки Цикл
				ЭлНастройка = ЭлОформления.Оформление.Элементы.Найти(Эл.Ключ);
				Если ЭлНастройка <> Неопределено Тогда
					ЭлНастройка.Значение = Эл.Значение;
					ЭлНастройка.Использование = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		// Установим условное оформление //
		
	КонецЦикла;	
	
	ТекстЗапросаОбщий = ТекстЗапросаОбщий + ТекстЗапроса + "
	|	ВЫБРАТЬ
	|	СпрНоменклатура.Номенклатура,
	|	СпрНоменклатура.Номенклатура.Наименование Как НаименованиеНоменклатуры,
	|	СпрНоменклатура.Номенклатура.ПозицияВПрайсе Как ПриоритетНоменклатуры,
	|	СпрНоменклатура.Номенклатура.Артикул Как Код,
	|	ВЫБОР 
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка)
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель
	|		КОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ (Справочник.Номенклатура.ПустаяСсылка) 
	|			ТОГДА СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель
	|	КОНЕЦ Как Родитель,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА СпрНоменклатура.ОграничениеЗаказа >= 0 
	|			ТОГДА СпрНоменклатура.ЗапретЗаказа
	|		ИНАЧЕ Истина
	|	КОНЕЦ КАК ЗапретЗаказа,
	|	ЕСТЬNULL(ВТСпециальныеУсловия.Цена,ЕСТЬNULL(ВТЦены.Цена, 0)) * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения.Коэффициент,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0)) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения.Коэффициент,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0))
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(ВТЦены.Цена, 0) * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения.Коэффициент, 0)
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК ЦенаБезСкидки,
	|	ЕСТЬNULL(ВТСпециальныеУсловия.ЕдиницаИзмерения,ЕСТЬNULL(ВТЦены.ЕдиницаИзмерения, """")) КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.ОграничениеЗаказа,
	|	ВТОстатки.КоличествоОстаток КАК Остаток
	|//ПОЛЯ//
	|	ПОМЕСТИТЬ ВТНоменклатураПодготовленная
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО СпрНоменклатура.Номенклатура = ВТЦены.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТЦены.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальныеУсловия КАК ВТСпециальныеУсловия
	|		ПО СпрНоменклатура.Номенклатура = ВТСпециальныеУсловия.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТСпециальныеУсловия.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстатки КАК ВТОстатки
	|		ПО СпрНоменклатура.Номенклатура = ВТОстатки.Номенклатура
	|			И СпрНоменклатура.ХарактеристикаНоменклатуры = ВТОстатки.ХарактеристикаНоменклатуры
	|//СОЕДИНЕНИЯ//
	|;   ";      
	
	ТекстВыборки = ТекстВыборки + ?(ПустаяСтрока(ТекстВыборки),"",Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ") + "
	|ВЫБРАТЬ
	|	100 + Isnull(ТЧ.Родитель.ПозицияВПрайсе,0) Приоритет,
	|	ТЧ.Родитель Как ГруппаРодитель,
	|	ТЧ.Родитель.Наименование Как НаименованиеГруппы,
	|	*
	|ИЗ
	|	ВТНоменклатураПодготовленная КАК ТЧ
	|
	|ГДЕ НЕ ТЧ.Родитель.ПозицияВПрайсе = -1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НаименованиеГруппы,
	|	ПриоритетНоменклатуры,
	|	НаименованиеНоменклатуры
	|
	|ИТОГИ ПО
	|	ГруппаРодитель";	
	
	ТекстЗапросаОбщий = ТекстЗапросаОбщий + ТекстВыборки;
	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//ПОЛЯ//"      ,ТекстПоля);
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//СОЕДИНЕНИЯ//",ТекстСоединения);	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"&ОтборПоНоменклатуре",ОтборПоНоменклатуре);
	
	Запрос.Текст = ТекстЗапросаОбщий;
	
	// Добавим реквизиты на форму //
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Глебов для теста скорости
	Результат = Запрос.Выполнить();
	//\\
	
	ДеревоТоваров      = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоФормы        = Форма.РеквизитФормыВЗначение("ДеревоТоваров");
	МассивНоменклатуры = Новый Массив;
	Для Каждого СтрокаТЧ Из ДеревоТоваров.Строки Цикл
		ДобавитьСтрокуВДеревоРекурсивно(СтрокаТЧ,ДеревоФормы,МассивНоменклатуры);
	КонецЦикла;	
	
	// Заполним историю продаж //
	ЗаполнитьИсториюПродажТоваров(Форма,ДеревоФормы,Форма.Контрагент,Форма.ДатаДоставки,Форма.ТекДокумент);
	// Заполним историю продаж //
	
	Форма.ЗначениеВРеквизитФормы(ДеревоФормы,"ДеревоТоваров");
КонецФункции	

Процедура ЗаполнитьИсториюПродажТоваров (Форма, ДеревоФормы, Контрагент, ДатаДоставки, ТекДокумент) Экспорт
	
	МассивНоменклатуры = Новый Массив;
	Для Каждого СтрокаТЧ Из ДеревоФормы Цикл
		Если МассивНоменклатуры.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда 
			МассивНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура,
	|	СУММА(ТЧ.ПродажиТекПоставка) КАК ПродажиТекПоставка,
	|	СУММА(ТЧ.ВозвратыТекПоставка) КАК ВозвратыТекПоставка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧ.Номенклатура КАК Номенклатура,
	|		ТЧ.Количество КАК ПродажиТекПоставка,
	|		0 КАК ВозвратыТекПоставка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ТЧ
	|	ГДЕ
	|		ТЧ.Ссылка.Проведен
	|		И ТЧ.Ссылка.Контрагент = &Контрагент
	|		И ТЧ.Ссылка.ДатаДоставки = &ДатаДоставки
	|		И ТЧ.Ссылка <> &ТекДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧ.Номенклатура,
	|		0,
	|		ТЧ.Количество
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ТЧ
	|	ГДЕ
	|		ТЧ.Ссылка.Проведен
	|		И ТЧ.Ссылка.Контрагент = &Контрагент
	|		И ТЧ.Ссылка.ДатаДоставки = &ДатаДоставки
	|		И ТЧ.Ссылка <> &ТекДокумент) КАК ТЧ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ.Номенклатура";
	Запрос.УстановитьПараметр("Контрагент"  ,Контрагент);
	Запрос.УстановитьПараметр("ДатаДоставки",ДатаДоставки);
	Запрос.УстановитьПараметр("ТекДокумент" ,ТекДокумент);
	ТекДанные = Запрос.Выполнить().Выгрузить();
	
	Рез = ДополнительныеФункцииСервер.ПолучитьИсториюПродажТоваров(МассивНоменклатуры,Контрагент);	
	Для Каждого мНоменклатура Из МассивНоменклатуры Цикл
		ИскомыеСтроки = Рез.НайтиСтроки(Новый Структура("Номенклатура",мНоменклатура));
		СЧ            = 5;
		СтрокаТЧ      = Новый Структура;
		ЕстьПродажи   = ЛОЖЬ;
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			СЧ = СЧ - 1;
			Если СЧ = 0 Тогда
				Прервать;
			КонецЕсли;
			СтрокаТЧ.Вставить("ПродажиВозвраты" + СЧ,"" + Формат(ИскомаяСтрока.КоличествоОборот,"ЧДЦ=; ЧН=0; ЧГ=0") + "/" + Формат(ИскомаяСтрока.КоличествоВозвратОборот,"ЧДЦ=; ЧН=0; ЧГ=0"));  
			ЕстьПродажи = Истина;
		КонецЦикла;
		Если СЧ >= 1 Тогда
			Пока СЧ > 1 Цикл
				СЧ = СЧ - 1;
				СтрокаТЧ.Вставить("ПродажиВозвраты" + СЧ,"0/0");
			КонецЦикла;	
		КонецЕсли;
		СтрокаТЧ.Вставить("ЕстьПродажи",ЕстьПродажи);
		
		ИскомаяСтрока = ТекДанные.Найти(мНоменклатура);
		Если ИскомаяСтрока <> Неопределено Тогда
			СтрокаТЧ.Вставить("ПродажиТекПоставка" ,ИскомаяСтрока.ПродажиТекПоставка);
			СтрокаТЧ.Вставить("ВозвратыТекПоставка",ИскомаяСтрока.ВозвратыТекПоставка);
		КонецЕсли;	
		
		ИскомыеСтроки = ДеревоФормы.НайтиСтроки(Новый Структура("Номенклатура",мНоменклатура));
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ИскомаяСтрока,СтрокаТЧ);			
		КонецЦикла;
	КонецЦикла;
	МассивДат = Рез.ВыгрузитьКолонку("Дата");
	СписокДат = ОбщийМодульСервер.УдалитьПовторяющиесяЭлементыМассива(МассивДат);
	СЧ        = 5;
	Для Каждого мДата Из СписокДат Цикл
		СЧ = СЧ - 1;
		Если СЧ = 0 Тогда
			Прервать;
		КонецЕсли;
		Форма.Элементы["ДеревоТоваровГруппаПродажиВозвраты" + СЧ].Заголовок = Формат(мДата,"ДФ=дд.ММ");
	КонецЦикла;	
	
	Если Форма.Элементы.Найти("ДеревоТоваровГруппаПродажиВозвратыТекущие") <> Неопределено Тогда
		Форма.Элементы["ДеревоТоваровГруппаПродажиВозвратыТекущие"].Заголовок = Формат(ДатаДоставки,"ДФ=дд.ММ");	
	КонецЕсли;
	
	Если СЧ >= 1 Тогда
		Пока СЧ > 1 Цикл
			СЧ = СЧ - 1;
			Форма.Элементы["ДеревоТоваровГруппаПродажиВозвраты" + СЧ].Заголовок = "--.--";
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

Процедура ДобавитьСтрокуВДеревоРекурсивно (СтрокаТоваров, СтрокаДерева, МассивНоменклатуры)
	Если Не ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
		Если СтрокаТоваров.Уровень() > 0 Тогда
			Возврат;
		КонецЕсли;	
		
		НоваяСтрока                 = СтрокаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТоваров);
		НоваяСтрока.Номенклатура    = СтрокаТоваров.ГруппаРодитель;
		НоваяСтрока.ВидимостьСтроки = Истина;
		НоваяСтрока.КартинкаСтроки  = БиблиотекаКартинок.Папка;
		НоваяСтрока.ЭтоГруппа       = Истина;
		
		Если ТипЗнч(СтрокаТоваров.ГруппаРодитель) = Тип ("СправочникСсылка.ГруппыНоменклатуры") Тогда
			ИДПриоритета = Формат(СтрокаТоваров.ГруппаРодитель.Приоритет,"ЧН=0; ЧГ=0") + "_" + СтрокаТоваров.ГруппаРодитель.Код;
			НоваяСтрока["ПринадлежитГруппе" + ИДПриоритета] = Истина;
		КонецЕсли;	
		
		Для Каждого СтрокаПодч Из СтрокаТоваров.Строки Цикл
			ДобавитьСтрокуВДеревоРекурсивно(СтрокаПодч,СтрокаДерева, МассивНоменклатуры);
		КонецЦикла;	
		
	Иначе
		НоваяСтрока = СтрокаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТоваров);
		Если МассивНоменклатуры.Найти(СтрокаТоваров.Номенклатура) = Неопределено Тогда
			МассивНоменклатуры.Добавить(СтрокаТоваров.Номенклатура);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

Функция ЗапросДляОтбораКонтрагентов (Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Количество(Ссылка) Как КОЛ Из Справочник.Контрагенты ГДЕ НЕ ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Кол > 1000 Тогда
		ФоновыеЗадания.Выполнить("ДополнительныеФункцииСервер.АктуализироватьПринадлежностьКонтрагентовГруппам",,Строка(Новый УникальныйИдентификатор));
	Иначе
		АктуализироватьПринадлежностьКонтрагентовГруппам();
	КонецЕсли;
	
	Если Константы.СписокКлиентовОбновлен.Получить() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Элементы = Форма.Элементы;
	
	ЗапросПоГруппам = Новый Запрос;
	ЗапросПоГруппам.Текст = 
	"ВЫБРАТЬ
	|	ГруппыКонтрагентов.Ссылка КАК ГруппаКонтрагентов,
	|	ГруппыКонтрагентов.ПроизвольныйЗапрос,
	|	ГруппыКонтрагентов.Приоритет,
	|	ГруппыКонтрагентов.Код,
	|	ГруппыКонтрагентов.ИмяПоляКонтрагент
	|ИЗ
	|	Справочник.ГруппыКонтрагентов КАК ГруппыКонтрагентов
	|ГДЕ
	|	НЕ ГруппыКонтрагентов.ПометкаУдаления
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыКонтрагентов.Приоритет УБЫВ,
	|	ГруппыКонтрагентов.Код УБЫВ";
	
	Выборка = ЗапросПоГруппам.Выполнить().Выбрать();
	
	// В результате получаем помещенные во временные таблицы, каждый со своим ИД таблицы выборки номенклатуры //
	ТекстСоединения = ""; // Содержит текст соединений //
	ТекстПоля       = ""; // Содержит поля таблицы значений по группам - значение ИСТИНА, если контрагент принадлежит группе и ЛОЖЬ, если не принадлежит //
	
	ПараметрыЗапроса = Новый Структура;
	стрИмяТаблицыПоМаршруту = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Код) И Не ЗначениеЗаполнено(Выборка.Приоритет) Тогда
			Продолжить;
		КонецЕсли;	
		
		ИДПриоритета = Формат(Выборка.Приоритет,"ЧН=0; ЧГ=0") + "_" + Выборка.Код;
		
		ПараметрыЗапроса.Вставить("Группа" + ИДПриоритета,Выборка.ГруппаКонтрагентов);	
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяПринадлежностьКонтрагентовГруппам КАК СпрКонтрагенты" + ИДПриоритета + " 
		|			ПО  СпрКонтрагенты" + ИДПриоритета + ".Группа = &Группа" + ИДПриоритета + " 
		|				И СпрКонтрагенты.Ссылка = СпрКонтрагенты" + ИДПриоритета + ".Контрагент";
		
		ТекстПоля = ТекстПоля + ",
		|	ВЫБОР КОГДА  СпрКонтрагенты" + ИДПриоритета + ".Контрагент ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ Как ПринадлежитГруппе" + ИДПриоритета;
		
		Если СокрЛП(Выборка.ГруппаКонтрагентов.Наименование) = "Клиенты по маршруту" Тогда
			стрИмяТаблицыПоМаршруту = "Не СпрКонтрагенты" + ИДПриоритета + ".Контрагент is Null И "
		КонецЕсли;
		
	КонецЦикла;	
		
	ТекстЗапросаОбщий = "
	|
	|ВЫБРАТЬ
	|	СпрКонтрагенты.Ссылка Как Ссылка,
	|	СпрКонтрагенты.Наименование Как Наименование,
	|	СпрКонтрагенты.КодПоиска Как КодПоиска,
	|	СпрКонтрагенты.Адрес
	|//ПОЛЯ//
	|ИЗ
	|	Справочник.Контрагенты КАК СпрКонтрагенты
	|//СОЕДИНЕНИЯ//
	|ГДЕ 
	|	НЕ СпрКонтрагенты.ЭтоГруппа";
	
	// 2017-06-20 МСН
	ТекстПоля = ТекстПоля + ",
	|	Выбор Когда ЗаданияТП.НомерПосещения is Null Или ЗаданияТП.НомерПосещения = 0 Тогда 999
	|		Иначе ЗаданияТП.НомерПосещения Конец НомерПосещения,
	|	
	|	Выбор 	Когда ЗаданияТП.ВремяПосещения = 1 Тогда ""9-12""
	|   		Когда ЗаданияТП.ВремяПосещения = 2 Тогда ""12-15""
	|       	Когда ЗаданияТП.ВремяПосещения = 3 Тогда ""15-18""
	|           Иначе ""-""
	|	Конец КАК ВремяПосещения";
	
	ТекстСоединения = ТекстСоединения + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрут.ЗаданияТП КАК ЗаданияТП
	|		ПО " + стрИмяТаблицыПоМаршруту + "ЗаданияТП.Ссылка = &АктуальныйМаршрут И СпрКонтрагенты.Ссылка = ЗаданияТП.Контрагент";
	// 2017-06-20 МСН
	
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//ПОЛЯ//"      ,ТекстПоля);
	ТекстЗапросаОбщий = СтрЗаменить(ТекстЗапросаОбщий,"//СОЕДИНЕНИЯ//",ТекстСоединения);
	
	мСписок = Форма.СписокКлиентов;
	мСписок.ТекстЗапроса = СокрЛП(ТекстЗапросаОбщий);
	
	// 2017-06-20 МСН
	Попытка
		Форма.СписокКлиентов.Параметры.УстановитьЗначениеПараметра("АктуальныйМаршрут", ОбщийМодульСервер.ПолучитьАктуальныйМаршрут() );
	Исключение
	КонецПопытки;
	// 2017-06-20 МСН
	
	Если Форма.Элементы.Найти("СписокКлиентовСсылка") = Неопределено Тогда
		Эл             = Форма.Элементы.Добавить("СписокКлиентовКодПоиска", Тип("ПолеФормы"), Форма.Элементы.СписокКлиентовГруппаВерх);
		Эл.ПутьКДанным = "СписокКлиентов.КодПоиска";
		Эл.Шрифт       = Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста,,,Истина);
		Эл.Ширина      = 4;
		Эл.РастягиватьПоГоризонтали = ЛОЖЬ;
		
		Эл = Форма.Элементы.Добавить("СписокКлиентовСсылка", Тип("ПолеФормы"), Форма.Элементы.СписокКлиентовГруппаВерх);
		Эл.ПутьКДанным = "СписокКлиентов.Ссылка";
		Эл.Шрифт       = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
		Эл.ОтображатьВШапке = ЛОЖЬ;
		Эл.ОтображатьВШапке = ЛОЖЬ;
		// 2017-06-20 МСН
		Эл = Форма.Элементы.Добавить("СписокКлиентовАдрес", Тип("ПолеФормы") ,Форма.Элементы.СписокКлиентовНиз);
		//Эл = Форма.Элементы.Добавить("СписокКлиентовАдрес", Тип("ПолеФормы") ,Форма.Элементы.СписокКлиентовГруппа);
		Эл.ПутьКДанным = "СписокКлиентов.Адрес";
		Эл.ОтображатьВШапке = ЛОЖЬ;
		Эл.РастягиватьПоГоризонтали = Истина;
		Эл.АвтоМаксимальнаяШирина = Ложь;
		
		Эл = Форма.Элементы.Добавить("СписокКлиентовНомерПосещения", Тип("ПолеФормы"), Форма.Элементы.СписокКлиентовНиз);
		Эл.ПутьКДанным = "СписокКлиентов.НомерПосещения";
		Эл.ОтображатьВШапке = ЛОЖЬ;
		Эл.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
		Эл.Ширина = 4;
		Эл.РастягиватьПоГоризонтали = Ложь;
		Эл.АвтоМаксимальнаяШирина = Ложь;
		
		Эл = Форма.Элементы.Добавить("СписокКлиентовВремяПосещения", Тип("ПолеФормы"), Форма.Элементы.СписокКлиентовГруппаВерх);
		Эл.ПутьКДанным = "СписокКлиентов.ВремяПосещения";
		Эл.ОтображатьВШапке = ЛОЖЬ;
		Эл.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
		Эл.Ширина = 4;
		Эл.РастягиватьПоГоризонтали = Ложь;
		Эл.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Форма.СписокКлиентов.Параметры.УстановитьЗначениеПараметра(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;	
	
	Форма.СписокКлиентов.ОсновнаяТаблица = "Справочник.Контрагенты";

	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Код) И Не ЗначениеЗаполнено(Выборка.Приоритет) Тогда
			Продолжить;
		КонецЕсли;	
		
		ИДПриоритета = Формат(Выборка.Приоритет,"ЧН=0; ЧГ=0") + "_" + Выборка.Код;
		// Установим условное оформление //
		Настройки = Выборка.ГруппаКонтрагентов.НастройкиУсловногоОформления.Получить();
		Если Настройки <> Неопределено Тогда
			ЭлОформления = мСписок.УсловноеОформление.Элементы.Добавить();
			
			Поле               = ЭлОформления.Поля.Элементы.Добавить();
			Поле.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
			Поле.Использование = Истина;
			
			Отбор = ЭлОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование  = Истина;
			Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПринадлежитГруппе" + ИДПриоритета);
			Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.ПравоеЗначение = Истина;
			
			Для Каждого Эл Из Настройки Цикл
				ЭлНастройка = ЭлОформления.Оформление.Элементы.Найти(Эл.Ключ);
				Если ЭлНастройка <> Неопределено Тогда
					ЭлНастройка.Значение = Эл.Значение;
					ЭлНастройка.Использование = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		// Установим условное оформление //
	КонецЦикла;	
	
КонецФункции	

Процедура УстановитьСтандартныеПараметрыЗапросаКонтрагентов (Запрос)
	ТекПользователь = Константы.ТекущийПользователь.Получить();
	
	Запрос.УстановитьПараметр("ТекущаяДата"        ,ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПользователь",ТекПользователь);
	Запрос.УстановитьПараметр("ФизЛицо"            ,ТекПользователь.ФизЛицо);
	
	ТекущиеКоординаты = Новый Структура("Долгота, Широта", 0, 0);
	
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕСЕРВЕР ТОГДА
		Попытка
			Координаты = ОбщийМодульСервер.ПолучитьТекущиеКоординатыСервер();
			Если Координаты <> Неопределено Тогда
				Рез = ОбщийМодульСервер.МэппингСтруктурКоординатСервер(Координаты);
				ТекущиеКоординаты.Долгота = Рез.Долгота;
				ТекущиеКоординаты.Широта = Рез.Широта;
			КонецЕсли;
		Исключение
		КонецПопытки;
	#КОНЕЦЕСЛИ
	
	Запрос.УстановитьПараметр("ТекущаяДолгота", ТекущиеКоординаты.Долгота);
	Запрос.УстановитьПараметр("ТекущаяШирота", ТекущиеКоординаты.Широта);	
	//Запрос.УстановитьПараметр("ТекущаяДолгота",37.956559);
	//Запрос.УстановитьПараметр("ТекущаяШирота",55.798977);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляГруппыКонтрагентов (ГруппаКонтрагентов) Экспорт
	ИДПриоритета = Формат(ГруппаКонтрагентов.Приоритет,"ЧН=0; ЧГ=0") + "_" + ГруппаКонтрагентов.Код;
	
	Если ГруппаКонтрагентов.ПроизвольныйЗапрос Тогда
		Возврат ГруппаКонтрагентов.ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапросаДляДобавления = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрКонтрагенты.Контрагент КАК Контрагент
	|//ПРИОРИТЕТ
	|//ПОМЕСТИТЬ
	|ИЗ
	|	РегистрСведений.ПринадлежностьКонтрагентовГруппам.СрезПоследних(, Группа = &Группа" + ИДПриоритета + ") КАК СпрКонтрагенты
	|ГДЕ
	|	НЕ СпрКонтрагенты.Контрагент.ЭтоГруппа
	|	И СпрКонтрагенты.ПринадлежитГруппе = ИСТИНА";
	
	Возврат ТекстЗапросаДляДобавления;
КонецФункции	

Функция ПроверитьПринадлежностьКонтрагентаГруппе (Контрагент, ГруппаКонтрагентов) Экспорт
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекПринадлежность.Группа,
	|	ТекПринадлежность.Контрагент
	|ИЗ
	|	РегистрСведений.ТекущаяПринадлежностьКонтрагентовГруппам КАК ТекПринадлежность
	|ГДЕ
	|	ТекПринадлежность.Группа = &Группа
	|	И ТекПринадлежность.Контрагент = &Контрагент";	
	Запрос.УстановитьПараметр("Группа",ГруппаКонтрагентов);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция АктуализироватьПринадлежностьКонтрагентовГруппам(ГруппаКонтрагентов = Неопределено) Экспорт
	ЗапросПоГруппам = Новый Запрос;
	ЗапросПоГруппам.Текст = 
	"ВЫБРАТЬ
	|	ГруппыКонтрагентов.Ссылка КАК ГруппаКонтрагентов,
	|	ГруппыКонтрагентов.ПроизвольныйЗапрос,
	|	ГруппыКонтрагентов.Приоритет,
	|	ГруппыКонтрагентов.Код,
	|	ГруппыКонтрагентов.ИмяПоляКонтрагент
	|ИЗ
	|	Справочник.ГруппыКонтрагентов КАК ГруппыКонтрагентов
	|ГДЕ
	|	НЕ ГруппыКонтрагентов.ПометкаУдаления" + ?(ГруппаКонтрагентов = Неопределено, "
	|	И НЕ ГруппыКонтрагентов.ОбновлятьПриВыборе", "
	|	И ГруппыКонтрагентов.Ссылка = &ГруппаКонтрагентов") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыКонтрагентов.Приоритет УБЫВ,
	|	ГруппыКонтрагентов.Код УБЫВ";
	
	Если ГруппаКонтрагентов <> Неопределено Тогда
		ЗапросПоГруппам.УстановитьПараметр("ГруппаКонтрагентов", ГруппаКонтрагентов);
	КонецЕсли;
	
	Выборка = ЗапросПоГруппам.Выполнить().Выбрать();
	
	Запрос  = Новый Запрос;	
	УстановитьСтандартныеПараметрыЗапросаКонтрагентов(Запрос);
	
	// В результате получаем помещенные во временные таблицы, каждый со своим ИД таблицы выборки номенклатуры //
	ТекстЗапроса    = ""; // Содержит запрос формирования временных таблиц по контрагентам. 1 группа = 1 ВТ //	
	ТекстСоединения = ""; // Содержит текст соединений //
	ТекстПоля       = ""; // Содержит поля таблицы значений по группам - значение ИСТИНА, если контрагент принадлежит группе и ЛОЖЬ, если не принадлежит //
	ТекстУничтожить = ""; // Содержит текст уничтожения МВТ //
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Код) И Не ЗначениеЗаполнено(Выборка.Приоритет) Тогда
			Продолжить;
		КонецЕсли;	
		
		ИДПриоритета = Формат(Выборка.Приоритет,"ЧН=0; ЧГ=0") + "_" + Выборка.Код;
		Запрос.УстановитьПараметр("Группа" + ИДПриоритета,Выборка.ГруппаКонтрагентов);	
		
		ТекстЗапросаДляДобавления = ПолучитьТекстЗапросаДляГруппыКонтрагентов(Выборка.ГруппаКонтрагентов);
		// В тексте запроса обязательно должны содержаться следующее -
		//  Поле "Номенклатура" в выборке 
		// "//ПРИОРИТЕТ" - для того, чтобы подставить в запрос автоматически сгенерированный ИД приоритета
		// "//ПОМЕСТИТЬ" - для того, чтобы было понятно в каком месте идет помещение в ВТ
		ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПРИОРИТЕТ","," + Символы.ПС + "	&Группа" + ИДПриоритета + " КАК Группа,
		|	""" + ИДПриоритета + """ Как ИдПриоритета");
		ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"//ПОМЕСТИТЬ","ПОМЕСТИТЬ СпрКонтрагенты" + ИДПриоритета);
		ТекстУничтожить           = ТекстУничтожить + ?(ПустаяСтрока(ТекстУничтожить),"",Символы.ПС) + "УНИЧТОЖИТЬ СпрКонтрагенты" + ИДПриоритета+ ";";
		
		Если Выборка.ПроизвольныйЗапрос Тогда
			Для Каждого СтрокаПараметр Из Выборка.ГруппаКонтрагентов.ЗначенияПараметров Цикл
				ТекстЗапросаДляДобавления = СтрЗаменить(ТекстЗапросаДляДобавления,"&" + СтрокаПараметр.ИмяПараметра,"&" + СтрокаПараметр.ИмяПараметра + ИДПриоритета);
				мЗначениеПараметра = Неопределено;
				Если Не ПустаяСтрока(СтрокаПараметр.ТекстПолученияПараметра) Тогда
					Выполнить СтрокаПараметр.ТекстПолученияПараметра;
				Иначе
					мЗначениеПараметра = СтрокаПараметр.ЗначениеПараметра;
				КонецЕсли;					
				Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра + ИДПриоритета,мЗначениеПараметра);
			КонецЦикла;             
						
			ТекстЗапросаДляДобавления = ТекстЗапросаДляДобавления + "
			| ИНДЕКСИРОВАТЬ ПО Контрагент";
		КонецЕсли;	
		
		ТекстЗапросаДляДобавления = ТекстЗапросаДляДобавления +  ?(Прав(ТекстЗапросаДляДобавления,1) = ";","",";") + Символы.ПС + 
		"ВЫБРАТЬ
		|	ТекПринадлежность.Группа КАК Группа,
		|	ТекПринадлежность.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТекПринадлежность
		|ИЗ
		|	РегистрСведений.ТекущаяПринадлежностьКонтрагентовГруппам КАК ТекПринадлежность
		|ГДЕ
		|	ТекПринадлежность.Группа = &Группа" + ИДПриоритета + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Группа;
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТекПринадлежность.Контрагент, НоваяПринадлежность.Контрагент) КАК Контрагент,
		|	ЕСТЬNULL(ТекПринадлежность.Группа, НоваяПринадлежность.Группа) КАК Группа,
		|	ВЫБОР
		|		КОГДА НоваяПринадлежность.Контрагент ЕСТЬ NULL 
		|			ТОГДА -1
		|		КОГДА ТекПринадлежность.Контрагент ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДобавитьУдалить
		|ИЗ
		|	ТекПринадлежность КАК ТекПринадлежность
		|		ПОЛНОЕ СОЕДИНЕНИЕ СпрКонтрагенты" + ИДПриоритета + " КАК НоваяПринадлежность
		|		ПО ТекПринадлежность.Контрагент = НоваяПринадлежность.Контрагент
		|			И ТекПринадлежность.Группа = &Группа" + ИДПриоритета + "
		|ГДЕ
		|	(НоваяПринадлежность.Контрагент ЕСТЬ NULL 
		|			ИЛИ ТекПринадлежность.Контрагент ЕСТЬ NULL )";  
		
		Запрос.Текст = ТекстЗапросаДляДобавления;
		ТекстЗапроса = ТекстЗапросаДляДобавления + ?(Прав(ТекстЗапросаДляДобавления,1) = ";","",";");
		Попытка
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			// Удаляем ненужные //
			Для Каждого СтрокаТЧ Из ТЗ.НайтиСтроки(Новый Структура("ДобавитьУдалить",-1)) Цикл
				Менеджер = РегистрыСведений.ТекущаяПринадлежностьКонтрагентовГруппам.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Менеджер,СтрокаТЧ);
				Менеджер.Удалить();	
			КонецЦикла;
			
			// Загружаем нужные скопом //
			ТЗДляЗагрузки = ТЗ.Скопировать(Новый Структура("ДобавитьУдалить",1));
			Если ТЗДляЗагрузки.Количество() > 0 Тогда
				Набор = РегистрыСведений.ТекущаяПринадлежностьКонтрагентовГруппам.СоздатьНаборЗаписей();
				Набор.Отбор.Группа.Установить(Выборка.ГруппаКонтрагентов);
				Набор.Загрузить(ТЗДляЗагрузки);
				Набор.Записать(ЛОЖЬ);
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЧ.Контрагент) КАК Контрагент
			|ИЗ
			|	РегистрСведений.ТекущаяПринадлежностьКонтрагентовГруппам КАК ТЧ
			|ГДЕ
			|	ТЧ.Группа = &Группа" + ИДПриоритета;
			ВыборкаСЧ = Запрос.Выполнить().Выбрать();
			Если ВыборкаСЧ.Следующий() Тогда
				ВсегоКлиентов = ВыборкаСЧ.Контрагент;
			Иначе
				ВсегоКлиентов = 0;
			КонецЕсли;
			
			Если Выборка.ГруппаКонтрагентов.ВсегоКлиентов <> ВсегоКлиентов Тогда
				Эл = Выборка.ГруппаКонтрагентов.ПолучитьОбъект();
				Эл.ВсегоКлиентов = ВсегоКлиентов;
				Эл.Записать();
			КонецЕсли;	
		Исключение
			РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("ОШИБКА ОБНОВЛЕНИЯ СПИСКА КОНТРАГЕНТОВ: " + ОписаниеОшибки(),,,ТекстЗапросаДляДобавления);
			Продолжить;
		КонецПопытки;	
	КонецЦикла;	
КонецФункции	

Функция ПолучитьИсториюПродажТоваров (Номенклатура, Контрагент) Экспорт
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОС_ДанныеПродажДляМП.Дата КАК Дата,
	|	ОС_ДанныеПродажДляМП.Номенклатура КАК Номенклатура,
	|	ОС_ДанныеПродажДляМП.ПродажиКоличество,
	|	ОС_ДанныеПродажДляМП.ПродажиСумма,
	|	ОС_ДанныеПродажДляМП.ВозвратыКоличество,
	|	ОС_ДанныеПродажДляМП.ВозвратыСумма
	|ПОМЕСТИТЬ ВТПродажи
	|ИЗ
	|	РегистрСведений.ОС_ДанныеПродажДляМП КАК ОС_ДанныеПродажДляМП
	|ГДЕ
	|	ОС_ДанныеПродажДляМП.Контрагент = &Контрагент
	|	И ОС_ДанныеПродажДляМП.Номенклатура В(&Номенклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПродажи.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	РегистрСведений.ОС_ДанныеПродажДляМП КАК ВТПродажи
	|ГДЕ
	|	ВТПродажи.Контрагент = &Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПродажи.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ВТПродажи КАК ВТПродажи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДаты.Дата КАК Дата,
	|	ВТНоменклатура.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТДатыНоменклатура
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО (ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДатыНоменклатура.Дата КАК Дата,
	|	ВТДатыНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТПродажи.ПродажиКоличество, 0) КАК КоличествоОборот,
	|	ЕСТЬNULL(ВТПродажи.ВозвратыКоличество, 0) КАК КоличествоВозвратОборот,
	|	ЕСТЬNULL(ВТПродажи.ПродажиСумма, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(ВТПродажи.ВозвратыСумма, 0) КАК СуммаВозвратОборот
	|ИЗ
	|	ВТДатыНоменклатура КАК ВТДатыНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродажи КАК ВТПродажи
	|		ПО ВТДатыНоменклатура.Номенклатура = ВТПродажи.Номенклатура
	|			И ВТДатыНоменклатура.Дата = ВТПродажи.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Контрагент"  ,Контрагент);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПРОВЕДЕНИЕДОКУМЕНТОВ 

Процедура ПровестиДокументы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыДляОбработки.Документ
	|ИЗ
	|	РегистрСведений.ДокументыДляОбработки КАК ДокументыДляОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Документ) Тогда 
			Док = Выборка.Документ.ПолучитьОбъект();
			Если Док <> Неопределено Тогда
				Если Док.Проведен Тогда
					Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Иначе
					Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			Иначе
				Ошибка = ИнформацияОбОшибке();
				РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации(ПодробноеПредставлениеОшибки(Ошибка));
				СинхронизацияСервер.ЗаписьЛога(Выборка.Документ,ПодробноеПредставлениеОшибки(Ошибка));
			КонецЕсли;
		КонецЕсли;
		
		Запись = РегистрыСведений.ДокументыДляОбработки.СоздатьМенеджерЗаписи();
		Запись.Документ = Выборка.Документ;
		Запись.Удалить();
	КонецЦикла;	
		
КонецПроцедуры

#КОНЕЦОБЛАСТИ



//Версия работы с фото
&НаСервере
Процедура ПодгрузитьФотоНаСервере(ТекущаяСтраницаИмя, Форма) Экспорт
	
	ИД = СтрЗаменить(СтрЗаменить(ТекущаяСтраницаИмя,"Страница_", ""), "_","-");          
	СтрокаТабФайлов = Форма.Таблица_ПрисоединенныеФайлы.НайтиСтроки(Новый Структура ("ИДФайла", ИД));
	Если СтрокаТабФайлов.Количество() > 0 Тогда
		
		Если ЭтоАдресВременногоХранилища(СтрокаТабФайлов[0].АдресФайла) Тогда
			Форма.АдресИзображения = СтрокаТабФайлов[0].АдресФайла;
		Иначе	
			ДД = Новый ДвоичныеДанные(СтрокаТабФайлов[0].АдресФайла);
			Форма.АдресИзображения = ПоместитьВоВременноеХранилище(ДД, Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Поле = Форма.Элементы.Найти("Декорация_");// + СтрЗаменить(ИД, "-", "_"));
	Если Поле = Неопределено Тогда
		Поле = Форма.Элементы.Добавить("Декорация_", Тип("ПолеФормы"));
		Поле.Вид                   = ВидПоляФормы.ПолеКартинки;
		Поле.ПоложениеЗаголовка    = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Поле.РазмерКартинки        = РазмерКартинки.АвтоРазмер;
		Поле.ПутьКДанным           = "АдресИзображения";
	КонецЕсли;

КонецПроцедуры