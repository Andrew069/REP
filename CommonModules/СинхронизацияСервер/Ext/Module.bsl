
#ОБЛАСТЬ ОСНОВНЫЕФУНКЦИИ

Функция ПередатьФайлыНаСервер(СтрокаОбменаДляСервера)
	ИмяВФ = ПолучитьИмяВременногоФайла("xml");
	
	Стр = Новый Структура;
	Стр.Вставить("Данные",Новый ХранилищеЗначения(СтрокаОбменаДляСервера,Новый СжатиеДанных(9)));
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ИмяВФ,"UTF-8");
	Запись.ЗаписатьБезОбработки(Сериализовать(Стр));
	Запись.Закрыть();

	мФайл  = Новый Файл(ИмяВФ);
	
	Размер = мФайл.Размер();
	Рез    = РазделитьФайл(ИмяВФ,64 * 1024);
	
	//Киселев доп логи
	КоличествоФайловДляПередачи = Рез.Количество();
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Подготовлены файлы для передачи на сервер (" + КоличествоФайловДляПередачи + ")" );
	
	ИменаФайлов = Новый Массив;
	
	УдалитьФайлы(ИмяВФ);
	
	Для Каждого ИмяФайла Из Рез Цикл
		ПередатьФайл(ИмяФайла,ИменаФайлов);
		//Киселев доп логи
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Осталось передать " + КоличествоФайловДляПередачи + " файлов");
		КоличествоФайловДляПередачи = КоличествоФайловДляПередачи-1;
	КонецЦикла;	
		
	Возврат ИменаФайлов;
КонецФункции	

Функция СделатьОбмен(НеОповещатьОбОшибках = ЛОЖЬ) Экспорт
	
	// Сначала проверим доступна ли сеть - если этого нет, можно дальше не париться //
	//Попытка
	//	Ответ = ОбщийМодульСервер.ЗапросКВебСерверуАгента("GETNETWOKSTATE",Новый Соответствие);
	//	Если Ответ.ПолучитьТелоКакСтроку("UTF-8") <> "ON" Тогда
	//		Возврат Новый Структура("Успех,Ошибка",Ложь,"Сеть недоступна");
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	локВерсияПО = Метаданные.Версия;
	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Начат обмен с ЦБ");
	РезультатОбмена = Новый Структура;
	
	//Глебов удаление ранее выгруженных данных
	ЗапросПринятогоСообщение = Новый Структура;
	ЗапросПринятогоСообщение.Вставить("ИнформацияОКонфигурации"                ,ПолучитьИнфуОКонфигурации());
	//СтрокаЗапросПринятогоСообщение = Сериализовать(ЗапросПринятогоСообщение);
	
	СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.ИмяФункции = "GetNumberExchangeMessage";
	
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Отправляем информацию о конфигурации на сервер");
	
	Попытка
		
		НомерПринятогоСообщение = ПодключениеКВебСервисуЦентральнойБД(ЗапросПринятогоСообщение, СтруктураПодключения);
		а = Число(НомерПринятогоСообщение);
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Получен номер сообщения от сервера: " + НомерПринятогоСообщение);

	Исключение
		
		РезультатОбмена.Вставить("Успех",Ложь);
		РезультатОбмена.Вставить("Ошибка",НомерПринятогоСообщение);
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка обмена с ЦБ",,НомерПринятогоСообщение);
		Возврат РезультатОбмена;
		
	КонецПопытки;
	УзелОбмена = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
	
	//Киселев доп логи
	Если УзелОбмена = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ПустаяСсылка() Тогда
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Не удалось найти узел обмена");
	Иначе
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Найден узел обмена");	
	КонецЕсли;
	
	УдалитьРегистрациюИзменений(УзелОбмена, НомерПринятогоСообщение);	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Обработаны выгруженные ранее данные");
	//\\Глебов	
	
	// 2017-05-05 МСН
	Попытка
		СтруктураПодключения.ИмяФункции = "GetActualVersion";		
		Прокси = ПолучитьВСПрокси(СтруктураПодключения);
		ВерсияПОСервера = Прокси.GetActualVersion();
		//Киселев доп логи
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Получили актуальную версию ПО");
	Исключение
		мОшибка = ОписаниеОшибки();
		РезультатОбмена.Вставить("Успех", Ложь);
		РезультатОбмена.Вставить("Ошибка", мОшибка.ТекстОшибки);
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка обмена с ЦБ",,мОшибка.ТекстОшибки);
		Возврат РезультатОбмена;
	КонецПопытки;
		
	ЗаписыватьЛоги = ПараметрыСеанса.ЗаписыватьЛоги;		
	
	СтрЗапроса = Новый Структура; 	
	СтрЗапроса.Вставить("ИнформацияОКонфигурации",	ПолучитьИнфуОКонфигурации());
	СтрЗапроса.Вставить("ТекПользователь",			Константы.ТекущийПользователь.Получить());
	СтрЗапроса.Вставить("Узел",						ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел().Код);
	СтрЗапроса.Вставить("Логи",						СформироватьЛоги());	// Отправляем информацию об ошибках предыдущей загрузки //
	
	СписокМДДляСервера = МетаданныеОбменаСерверКлиент(локВерсияПО, ВерсияПОСервера);
	
	СтрДопПараметров = Новый Структура;
	СтрЗапроса.Вставить("ИнформацияПроОбмен", СформироватьПакетОбменаДляСервера(СтрДопПараметров));  // Формируем данные для загрузки на сервер //
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Сформирован данные регистров");
	СтрЗапроса.Вставить("ПакетОбмена",		  ПодготовитьДанныеДляЗагрузкиНаСервер(СтрДопПараметров));
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Сформирован данные документов и справочников");
	Строка = Сериализовать(СтрЗапроса);
	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Сформирован пакет данных для сервера");
	
	МассивФайлов = ПередатьФайлыНаСервер(Строка);
	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Файлы переданы на сервер. Идет загрузка. Ждем ответа от сервера");
	
	СтрОтвета = ПодключениеКВебСервисуЦентральнойБД(МассивФайлов);
	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Получен ответ сервера, начата загрузка");	
	
	АктуальнаяВерсия = "";
	Если ТипЗнч(СтрОтвета) <> Тип("Структура") Тогда
		РезультатОбмена.Вставить("Успех",Ложь);
		РезультатОбмена.Вставить("Ошибка", "Обшика обмена");
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка обмена с ЦБ",, "");
		Возврат РезультатОбмена;
		
	ИначеЕсли СтрОтвета.Свойство("АктуальнаяВерсия",АктуальнаяВерсия) И Константы.ОС_АктуальнаяВерсияМП.Получить() <> АктуальнаяВерсия Тогда
		Константы.ОС_АктуальнаяВерсияМП.Установить(АктуальнаяВерсия);
	КонецЕсли;	
	
	мОшибка = Неопределено;
	Если СтрОтвета.Свойство("Ошибка",мОшибка) Тогда
		Если ОбработкаОшибок(мОшибка,НеОповещатьОбОшибках) Тогда
			РезультатОбмена.Вставить("Успех",Ложь);
			РезультатОбмена.Вставить("Ошибка",мОшибка.ТекстОшибки);
			РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка обмена с ЦБ",,мОшибка.ТекстОшибки);
			Возврат РезультатОбмена;
		КонецЕсли;
	КонецЕсли;
		
	// Принимаем ответ по логам, ранее отправленным на сервер //
	ОбработатьОтветЛогов(СтрОтвета.ОтветЛогов); // Фиксируем то, что сервер принял логи //
	ОбработатьЛоги(СтрОтвета);                  // Фиксируем изменения, которые сервер не принял //
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Обработаны логи сервера, начинаем загрузку изменений");
	
	УзелОбмена = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
	
	ПринятьИзмененияПоПлану(СтрОтвета.ИнформацияПроОбмен);
	
	РассчитатьИтоговыеКоличества();
	ФоновыеЗаданияСервер.ЗапуститьВыполнениеВФоне("ДополнительныеФункцииСервер.ПровестиДокументы");
	
	Константы.ДатаПоследнейСинхронизации.Установить(ТекущаяДата());		
	
	РезультатОбмена.Вставить("Успех",Истина);
	
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Завершен обмен с ЦБ");
	
	Возврат РезультатОбмена;
	
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ЗАГРУЗКАДАННЫХ

Функция СформироватьПакетОбменаДляСервера(СтрТел)
	Запись          = Новый ЗаписьXML;
	ИмяВФ           = ПолучитьИмяВременногоФайла("xml");
	Запись.ОткрытьФайл(ИмяВФ,"UTF-8");
	Узел            = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Запись,Узел);
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,ЗаписьСообщения.НомерСообщения);
	
	// Rarus-spb byse {
	СоотвествиеИзменений = Новый Соответствие;
	//ДатаПроверки = НачалоДня(ТекущаяДата());
	Пока ВыборкаИзменений.Следующий() Цикл
		ИзмененныйОбъект = ВыборкаИзменений.Получить();
		ТипОбъекта       = ТипЗнч(ИзмененныйОбъект);
		Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ГеоКоординаты") Тогда
			//Если Час(ИзмененныйОбъект.Период) < 7 Или Час(ИзмененныйОбъект.Период) >= 23 Тогда
			//	Продолжить;
			//КонецЕсли;
			ЗаписатьXML(Запись,ИзмененныйОбъект);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ОС_ПрисоединенныеФайлы") Тогда
			ЗаписатьXML(Запись,ИзмененныйОбъект);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЗамерыОпераций") Тогда  //Замеры операций
			ЗаписатьXML(Запись,ИзмененныйОбъект);
			
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.КомментарииПоКонтрагентам") Тогда
			// 2017-06-12 МСН
			ЗаписатьXML(Запись, ИзмененныйОбъект);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СобытияПоКонтрагентам") Тогда
			ЗаписатьXML(Запись, ИзмененныйОбъект);
			
		Иначе	
			Массив = СоотвествиеИзменений.Получить(ТипОбъекта);
			Если Массив = Неопределено Тогда
				Массив = Новый Массив;
			КонецЕсли;
			Массив.Добавить(ИзмененныйОбъект);
			СоотвествиеИзменений.Вставить(ТипОбъекта,Массив);
		КонецЕсли;
	КонецЦикла;
	СтрТел.Вставить("СоотвествиеИзменений", СоотвествиеИзменений);
	// Rarus-spb byse }
	
	ЗаписьСообщения.ЗакончитьЗапись();
	Запись.Закрыть();
	
	Рез = РазделитьФайл(ИмяВФ,10000000);
	УдалитьФайлы(ИмяВФ);
	
	МассивФайлов = Новый Массив;	
	Для Каждого Файл Из Рез Цикл
		ДД = Новый ДвоичныеДанные(Файл);
		МассивФайлов.Добавить(Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9)));
		УдалитьФайлы(Файл);
	КонецЦикла;	
	
	Возврат МассивФайлов;
КонецФункции	

Функция ТекстЗапросаДляФормированияПакетаОбмена(СписокМетаданных)
	Текст = "";
	ТипыРеквизитов = Новый Массив;
	ТипыРеквизитов.Добавить("Реквизиты");
	ТипыРеквизитов.Добавить("СтандартныеРеквизиты");
	Для Каждого Эл Из СписокМетаданных Цикл
		Мета = Эл.Ключ;
		Если Эл.Значение = Неопределено Тогда
			ТекстПолей = "";
			Для Каждого ТипРеквизита Из ТипыРеквизитов Цикл
				Для Каждого Рекв Из Мета[ТипРеквизита] Цикл
					ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей),"","," + Символы.ПС) + "	ТЧ." + Рекв.Имя;
				КонецЦикла;
			КонецЦикла;		
			Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл 
				ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей),"","," + Символы.ПС) + "	ТЧ." + ТЧ.Имя + ".(" + Символы.ПС;
				ТекстПолейТЧ = "";
				Для Каждого ТипРеквизита Из ТипыРеквизитов Цикл
					Для Каждого Рекв Из ТЧ[ТипРеквизита] Цикл
						ТекстПолейТЧ = ТекстПолейТЧ + ?(ПустаяСтрока(ТекстПолейТЧ),"","," + Символы.ПС) + "		" + Рекв.Имя;
					КонецЦикла;
				КонецЦикла;		
				ТекстПолей = ТекстПолей + ТекстПолейТЧ + Символы.ПС + ")";
			КонецЦикла;
			Текст = Текст + Символы.ПС + "Выбрать " + Символы.ПС + ТекстПолей + " Из " + Мета.ПолноеИмя() + "  Как ТЧ
			|	Внутреннее Соединение " + Мета.ПолноеИмя() + ".Изменения КАК Изменения 
			|По ТЧ.Ссылка = Изменения.Ссылка 
			|Где Изменения.Узел = &Узел;" + Символы.ПС; 
		Иначе
			Текст = Текст + Символы.ПС + Эл.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Текст;
КонецФункции

Функция МассивМетаданныхДляОбмена(СписокМетаданных)
	ТипыРеквизитов         = Новый Массив;
	
	ТипыРеквизитов.Добавить("Реквизиты");
	ТипыРеквизитов.Добавить("СтандартныеРеквизиты");
	
	СоответствиеРеквизитовОбъектов = Новый Соответствие;
	
	Для Каждого Эл Из СписокМетаданных Цикл
		Мета = Эл.Ключ;
		
		Рез  = Новый Структура;
		
		СписокРеквизитов = Новый Массив;
		Для Каждого ТипРеквизита Из ТипыРеквизитов Цикл
			Для Каждого Рекв Из Мета[ТипРеквизита] Цикл
				СписокРеквизитов.Добавить(Рекв.Имя);
			КонецЦикла;
		КонецЦикла;		
		
		СписокТЧ = Новый Массив;     		
		Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл 
			МассивРеквизитовТЧ = Новый Массив;
			Для Каждого ТипРеквизита Из ТипыРеквизитов Цикл
				Для Каждого Рекв Из ТЧ[ТипРеквизита] Цикл
					МассивРеквизитовТЧ.Добавить(Рекв.Имя);
				КонецЦикла;
			КонецЦикла;	
			СписокТЧ.Добавить(Новый Структура(ТЧ.Имя,МассивРеквизитовТЧ));
		КонецЦикла;
		
		Рез.Вставить("Реквизиты"     ,СписокРеквизитов);
		Рез.Вставить("ТабличныеЧасти",СписокТЧ);
		
		СоответствиеРеквизитовОбъектов.Вставить(Мета.ПолноеИмя,Рез);
	КонецЦикла;
	
	Возврат СоответствиеРеквизитовОбъектов;	
КонецФункции	

Функция МетаданныеОбменаКлиентСервер()
	СписокВыгружаемыхБезусловно = Новый Соответствие;
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ВозвратТоваровОтПокупателя);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ЗаказПокупателя);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.РабочийДень);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.Уведомление);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.Посещение);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.РегистрацияКлиента);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ВнеплановоеДействие);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ФиксацияПоложения);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.Комментарий);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ИзменениеПрофиляТорговойТочки);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.МониторингЦен);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.АнкетаТП);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.СнятиеОстатков);
	Возврат СписокВыгружаемыхБезусловно;
КонецФункции

Процедура ЗагрузкаСправочника(НовТЗ, ТипСправочника, УзелОбмена = Неопределено)
	
	Если ТипЗнч(НовТЗ) = Тип ("ХранилищеЗначения") Тогда
		 ТЗ = НовТЗ.Получить();
	Иначе
		 ТЗ = НовТЗ;
	КонецЕсли;	
	
	СтрРеквизитов = ПолучитьСтруктуруРеквизитовСправочника(ТипСправочника,ТЗ.Колонки);
		
	Мета      = Метаданные.НайтиПоТипу(ТипСправочника);
	Для Каждого СтрокаТЧ Из ТЗ Цикл	
		Попытка
			ЭтоГруппа = ТЗ.Колонки.Найти("ЭтоГруппа") <> Неопределено И СтрокаТЧ.ЭтоГруппа;
			
			Менеджер  = Справочники[Мета.Имя];
			
			НовыйЭл   = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			
			Если НовыйЭл = Неопределено Тогда
				НовыйЭл = ?(ЭтоГруппа,Менеджер.СоздатьГруппу(),Менеджер.СоздатьЭлемент());
				НовыйЭл.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
			ИначеЕсли НовыйЭл <> Неопределено И ТЗ.Колонки.Найти("ЭтоГруппа") <> Неопределено И НовыйЭл.ЭтоГруппа <> СтрокаТЧ.ЭтоГруппа Тогда
				// Удалим если признак группы не совпадает//
				НовыйЭл.ОбменДанными.Загрузка = Истина;
				Если УзелОбмена <> Неопределено Тогда
					НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
				КонецЕсли;	
				НовыйЭл.Удалить();
				// Создадим новый //
				НовыйЭл = ?(ЭтоГруппа,Менеджер.СоздатьГруппу(),Менеджер.СоздатьЭлемент());
				НовыйЭл.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйЭл,СтрокаТЧ,СтрРеквизитов.Получить(ЭтоГруппа));
			
			Если Не ЭтоГруппа Тогда
				Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл
					Если ТЗ.Колонки.Найти(ТЧ.Имя) <> Неопределено Тогда
						НовыйЭл[ТЧ.Имя].Загрузить(СтрокаТЧ[ТЧ.Имя]);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			Если УзелОбмена <> Неопределено Тогда
				НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
			КонецЕсли;	
			НовыйЭл.Записать();
		Исключение
			Описание = ОписаниеОшибки();
			ЗаписьЛога(СтрокаТЧ.Ссылка,Описание);
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗагрузкаДокумента(НовТЗ, ТипСправочника ,УзелОбмена = Неопределено) 
	Мета      = Метаданные.НайтиПоТипу(ТипСправочника);
	
	Если ТипЗнч(НовТЗ) = Тип ("ХранилищеЗначения") Тогда
		 ТЗ = НовТЗ.Получить();
	Иначе
		 ТЗ = НовТЗ;
	КонецЕсли;	
		
	Для Каждого СтрокаТЧ Из ТЗ Цикл	
		Попытка
			Менеджер  = Документы[Мета.Имя];
			НовыйЭл   = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			Если НовыйЭл = Неопределено Тогда
				НовыйЭл   = Менеджер.СоздатьДокумент();
				НовыйЭл.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
			Иначе
				НовыйЭл.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовыйЭл,СтрокаТЧ,,"Ссылка");
			
			Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл
				Если ТЗ.Колонки.Найти(ТЧ.Имя) <> Неопределено Тогда
					НовыйЭл[ТЧ.Имя].Загрузить(СтрокаТЧ[ТЧ.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			Если УзелОбмена <> Неопределено Тогда
				НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
			КонецЕсли;		
			
			Если Мета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда 
				НовыйЭл.Записать(?(СтрокаТЧ.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Иначе
				НовыйЭл.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЛога(СтрокаТЧ.Ссылка,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаписьЛога(Объект, ОписаниеОшибки = "") Экспорт
	Запись                   = РегистрыСведений.ОС_Логи.СоздатьМенеджерЗаписи();
	Запись.Объект            = Объект;
	Запись.НаправлениеОбмена = Перечисления.НаправлениеОбмена.НаКлиент;
	Запись.ДатаОбмена        = ТекущаяДата();
	Запись.Описание          = ОписаниеОшибки;
	Запись.Записать(Истина);
КонецПроцедуры	

Функция СформироватьЛоги()
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОС_Логи.Объект,
	|	ОС_Логи.НаправлениеОбмена,
	|	ОС_Логи.ДатаОбмена,
	|	ОС_Логи.НомерСообщения,
	|	ОС_Логи.Описание
	|ИЗ
	|	РегистрСведений.ОС_Логи КАК ОС_Логи
	|ГДЕ
	|	ОС_Логи.НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.НаправлениеОбмена.НаКлиент)";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Процедура ОбработатьОтветЛогов(Ответ)
	Если Ответ = "Логи загружены" Тогда
		Набор = РегистрыСведений.ОС_Логи.СоздатьНаборЗаписей();
		Набор.Отбор.НаправлениеОбмена.Установить(Перечисления.НаправлениеОбмена.НаКлиент);
		Набор.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьСтруктуруРеквизитовСправочника(ТипСправочника, Колонки)
	Мета     = Метаданные.НайтиПоТипу(ТипСправочника);
	
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураРеквизитовЭлемента = "";
	СтруктураРеквизитовГруппы   = "";
	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл 
		Если Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
			СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
		ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы + Реквизит.Имя + ",";
		Иначе 
			СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
			СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы + Реквизит.Имя + ",";
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл 
		Если Колонки.Найти(Реквизит.Имя) = Неопределено 
			Или Найти("Ссылка,ВерсияДанных,ЭтоГруппа,ИмяПредопределенныхДанных,Предопределенный",Реквизит.Имя) > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
		СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы   + Реквизит.Имя + ",";
	КонецЦикла;		
	
	СтруктураРеквизитов.Вставить(Истина, Лев(СтруктураРеквизитовГруппы  ,СтрДлина(СтруктураРеквизитовГруппы) - 1));
	СтруктураРеквизитов.Вставить(Ложь  , Лев(СтруктураРеквизитовЭлемента,СтрДлина(СтруктураРеквизитовЭлемента) - 1));
	Возврат СтруктураРеквизитов;	
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ВЫГРУЗКАДАННЫХ

Функция СформироватьОтветЛогов(СтрТел)
	Рег = РегистрыСведений.ОС_Логи.СоздатьНаборЗаписей();
	Рег.Отбор.НаправлениеОбмена.Установить(Перечисления.НаправлениеОбмена.НаСервер);
	Для Каждого СтрокаТЧ Из СтрТел.Логи Цикл 
		Если ЗначениеЗаполнено(СтрокаТЧ.Описание) Тогда
			Запись = Рег.Добавить();
			Запись.Объект              = СтрокаТЧ.Объект;
			Запись.ДатаОбмена          = СтрокаТЧ.ДатаОбмена;
			Запись.Описание            = СтрокаТЧ.Описание;
			Запись.НаправлениеОбмена   = СтрокаТЧ.НаправлениеОбмена;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(СтрТел.Узел,СтрокаТЧ.Объект);
	КонецЦикла;	
	Рег.Записать(Истина);
	
	Возврат "Логи загружены";
КонецФункции

Функция МетаданныеОбменаСерверКлиент(ВерсияПО, ВерсияПОСервера)
	СписокВыгружаемыхБезусловно = Новый Соответствие;
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ВидыКонтактнойИнформации,
	"ВЫБРАТЬ
	|	ТЧ.Ссылка,
	|	ТЧ.Ссылка.Наименование КАК Наименование,
	|	ТЧ.Ссылка.Тип КАК Тип,
	|	ТЧ.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации.Изменения КАК ТЧ
	|ГДЕ
	|	ТЧ.Узел = &Узел
	|	И (ТЧ.Ссылка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ИЛИ ТЧ.Ссылка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))"
	);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ВидыПоказателей);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ГруппыКонтрагентов);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ГруппыНоменклатуры);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ДополнительныеРеквизиты);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Контрагенты);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Номенклатура);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ЕдиницыИзмерения);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ФБ_Базы);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Подразделения);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Пользователи);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Производители);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Склады);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.СтатусыПодписанияДоговоров);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ТипыЦенНоменклатуры);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ВидыКомментариев);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ФизическиеЛица);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Территории);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ДоговорыКонтрагентов);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ВопросыАнкетДляТП);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.КаналыСбыта);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.НоменклатурныеГруппы);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.Проекты);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.СетиБренды);
	
	// 2017-05-05 МСН
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ВидыЗаданийТорговымПредставителям);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Справочники.ТипыПосещенийКлиентовТорговымиПредставителями);
	
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.Маршрут);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.Уведомление);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.УстановкаГруппКонтрагентов);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ЦеныНоменклатуры);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.УсловияПоставокПоДоговорамКонтрагентов);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.УстановкаГруппНоменклатуры);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.УстановкаСоответствияТорговыхПредставителейТерриториям);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.УчастникиТрейдМаркетинговыхАкций);
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.ТрейдМаркетинговаяАкция);
	
	// 2017-05-05 МСН
	СписокВыгружаемыхБезусловно.Вставить(Метаданные.Документы.СнятиеОстатков);
	
	Возврат СписокВыгружаемыхБезусловно;
КонецФункции

Функция ПринятьИзмененияПоПлану(СтрСообщения)
	//НачатьТранзакцию();
	
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Объединение полученных файлов обмена");
	
	МассивДокументов = Новый Массив;
	
	Если ТипЗнч(СтрСообщения) = Тип ("ХранилищеЗначения") Тогда
		Рез = СтрСообщения.Получить();
		Если ТипЗнч(Рез) = Тип ("Структура") Тогда
			МассивХЗ     = Рез.МассивФайлов;
			МассивФайлов = Новый Массив;
			Для Каждого ХЗ Из МассивХЗ Цикл
				ИмяВФ = ПолучитьИмяВременногоФайла("xml_");
				ХЗ.Получить().Записать(ИмяВФ);
				МассивФайлов.Добавить(ИмяВФ);
			КонецЦикла;	
			
			ИмяВФ = ПолучитьИмяВременногоФайла("xml");
			ОбъединитьФайлы(МассивФайлов,ИмяВФ);
			
			Для Каждого Файл Из МассивФайлов Цикл
				УдалитьФайлы(Файл);
			КонецЦикла;	          			
		КонецЕсли;	
	КонецЕсли;		
	
	ТипыДокументов  = Документы.ТипВсеСсылки();
	
	#Если Не МобильноеПриложениеСервер Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяВФ);
			Всп = Текст.ПолучитьТекст();
			// todo
		Исключение
		КонецПопытки;
	#КонецЕсли
	
	Чтение          = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяВФ,,,"UTF-8");
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(Чтение);
	
	//Киселев доп логи
	РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Файлы объединены. Данные читаются");
	
	Пока ВозможностьЧтенияXML(Чтение) Цикл
		ИмяТекУзла = Чтение.Имя;
		Попытка
			Данные = ПрочитатьXML(Чтение);
			Если Данные <> Неопределено Тогда	
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.ОбменДанными.Загрузка    = Истина;
				Попытка
					Данные.Записать();
					Стр = Новый Структура("Ссылка",Неопределено);
					ЗаполнитьЗначенияСвойств(Стр,Данные);
					Если ТипЗнч(Данные) <> Тип ("УдалениеОбъекта") И Стр.Ссылка <> Неопределено И ТипыДокументов.СодержитТип(ТипЗнч(Стр.Ссылка)) Тогда
						Запись          = РегистрыСведений.ДокументыДляОбработки.СоздатьМенеджерЗаписи();
						Запись.Документ = Стр.Ссылка;
						Запись.Записать(Истина);
					КонецЕсли;	
				Исключение
					ЗаписьЛога(Данные.Ссылка,"Ошибка загрузки данных " + ИмяТекУзла + " : " + ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;
		Исключение
			мИнфо = ИнформацияОбОшибке();
			РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка загрузки данных " + ИмяТекУзла + " : " + Чтение.Имя,, ПодробноеПредставлениеОшибки(мИнфо));
			ВызватьИсключение ПодробноеПредставлениеОшибки(мИнфо);
		КонецПопытки;
	КонецЦикла;	

	Попытка
		
		//Киселев доп логи
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Удаляем зарегистрированные ранее изменения");
		УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель,ЧтениеСообщения.НомерПринятого);
		ЧтениеСообщения.ЗакончитьЧтение();
		Чтение.Закрыть();
		
		//Киселев доп логи
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Удаляем временные файлы");
		УдалитьФайлы(ИмяВФ);
		
	Исключение
		мИнфо = ИнформацияОбОшибке();
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка загрузки данных: ",, ПодробноеПредставлениеОшибки(мИнфо));
		ВызватьИсключение ПодробноеПредставлениеОшибки(мИнфо);
	КонецПопытки;	
	
	//ЗафиксироватьТранзакцию();
КонецФункции	

Функция УдалитьРегистрациюИзменений (УзелОбмена, НомерСообщения)
	//НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел"    ,УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения",Число(НомерСообщения));
	
	Для Каждого ЭлСостава Из Метаданные.ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.Состав Цикл
		Мета   = ЭлСостава.Метаданные;
		Запрос.Текст = "Выбрать * Из " + Мета.ПолноеИмя() + ".Изменения ГДЕ Узел = &Узел И НомерСообщения <= &НомерСообщения";
		Рез          = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТЧ Из Рез Цикл
			Если Метаданные.РегистрыСведений.Содержит(Мета) 
				Или Метаданные.РегистрыНакопления.Содержит(Мета) Тогда
				
				Набор = РегистрыСведений[Мета.Имя].СоздатьНаборЗаписей();
				Для Каждого Колонка Из Рез.Колонки Цикл
					Если Колонка.Имя = "Узел" Или Колонка.Имя = "НомерСообщения" Тогда
						Продолжить;
					КонецЕсли;
					Набор.Отбор[Колонка.Имя].Установить(СтрокаТЧ[Колонка.Имя]);
				КонецЦикла;					
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена,Набор);
				Если Ложь
					Или Мета.Имя = "ОС_ПрисоединенныеФайлы" 
					Или Мета.Имя = "ГеоКоординаты" 
					Или Мета.Имя = "ЗамерыОпераций"
				Тогда
					// Очищаем данные, чтобы не распухала база //
					Набор.ОбменДанными.Отправитель = УзелОбмена;
					Набор.ОбменДанными.Загрузка    = Истина;
					Набор.Записать(Истина);
				КонецЕсли;	
			Иначе	
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена,СтрокаТЧ.Ссылка);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	//ЗафиксироватьТранзакцию();
КонецФункции	

Функция ПодготовитьДанныеДляЗагрузкиНаСервер (СтрТел)
	Узел              = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
	Запрос            = Новый Запрос;
	
	Запрос.Текст      = ТекстЗапросаДляФормированияПакетаОбмена(МетаданныеОбменаКлиентСервер());
	Запрос.УстановитьПараметр("Узел",Узел);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураПакета = Новый Соответствие;
	Для Каждого Стр Из МассивРезультатов Цикл // Первая Таблица - Временная 
		Данные = Стр.Выгрузить();
		Если Не Данные.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Данные[0].Ссылка) = Тип ("Строка") Тогда
			СтруктураПакета.Вставить(Данные[0].Ссылка,Данные);
		Иначе	
			СтруктураПакета.Вставить(ТипЗнч(Данные[0].Ссылка),Данные);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СтруктураПакета;
КонецФункции	

Процедура ОбработатьЛоги (СтрТел)
	Рег  = РегистрыСведений.ОС_Логи.СоздатьНаборЗаписей();
	Узел = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.НайтиПоКоду("ЦБ");
	Рег.Отбор.НаправлениеОбмена.Установить(Перечисления.НаправлениеОбмена.НаСервер);
	Для Каждого СтрокаТЧ Из СтрТел.Логи Цикл 
		Если ЗначениеЗаполнено(СтрокаТЧ.Описание) Тогда
			Запись = Рег.Добавить();
			Запись.Объект              = СтрокаТЧ.Объект;
			Запись.ДатаОбмена          = СтрокаТЧ.ДатаОбмена;
			Запись.Описание            = СтрокаТЧ.Описание;
			Запись.НаправлениеОбмена   = СтрокаТЧ.НаправлениеОбмена;
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,СтрокаТЧ.Объект);
		КонецЕсли;
	КонецЦикла;	
	Рег.Записать(Истина);
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ МЕТОДЫПЕРЕДАЧИФАЙЛОВ

Процедура ПередатьФайл (ИмяФайла,ИменаФайлов)
	ДД    = Новый ДвоичныеДанные(ИмяФайла);
	мФайл = Новый Файл(ИмяФайла);
	СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.Вставить("ИмяФункции","GetFile");	
	Рез                   = Новый Структура("ИмяФайла,Данные",мФайл.Имя,ДД);
	ВСПрокси              = ПолучитьВСПрокси(СтруктураПодключения);
	Ответ                 = Неопределено;
	//Выполнить("Ответ = ВСПрокси." + СтруктураПодключения.ИмяФункции + "(Новый ХранилищеЗначения(Сериализовать(Рез),Новый СжатиеДанных (9)))");
	Выполнить("Ответ = ВСПрокси." + СтруктураПодключения.ИмяФункции + "(Новый ХранилищеЗначения(Сериализовать(Рез)))");
	Если ТипЗнч(Ответ) = Тип ("ХранилищеЗначения") Тогда
		Стр = Десериализовать(Ответ.Получить()).ИмяФайла;
	Иначе
		Стр = Ответ;
	КонецЕсли;	
	ИменаФайлов.Добавить(Стр);
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

// Не используется //
Функция ПередатьФайлHTTP (ИмяФайла,ИменаФайлов)
	Таймаут = Константы.ОС_СрокОжиданияВебСервиса.Получить();
	
	Если Таймаут = 0 Тогда
		Таймаут = 120;
	КонецЕсли;	
	
	Стр = Новый Структура;
	СтруктураПодключения = Константы.НастройкиПодключения.Получить().Получить();
	
	АдресСервера = Константы.АдресСервера.Получить();
	АдресСервера = Лев(АдресСервера,Найти(АдресСервера,"/"));
	Соединение   = Новый HTTPСоединение(Лев(АдресСервера,Найти(АдресСервера,"/")),,СтруктураПодключения.Пользователь,СтруктураПодключения.Пароль,,Таймаут);
	
	Запрос = Новый HTTPЗапрос(Прав(АдресСервера, СтрДлина(АдресСервера) - Найти (АдресСервера,"/")) + "/hs/HTTPDataTransfer");
	
	мФайл = Новый Файл(ИмяФайла);
	ДД    = Новый ДвоичныеДанные(ИмяФайла);
	
	//Запрос.Заголовки.Вставить("Filename",мФайл.Имя);
	//Запрос.Заголовки.Вставить("Content-Type:","text/xml");
	Запрос.Заголовки.Вставить("charset","utf-8");
	
	Запрос.УстановитьТелоИзДвоичныхДанных(ДД);
	
	УдалитьФайлы(ИмяФайла);
	
	Рез = Соединение.ВызватьHTTPМетод("POST",Запрос);
	
	Если Рез.КодСостояния = 200 Тогда
		Стр = Рез.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ИменаФайлов.Добавить(Стр);
	Иначе
		Стр = Рез.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ВызватьИсключение "Ошибка: " + Рез.КодСостояния + " " + Стр;
	КонецЕсли;
	
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СОПУТСТВУЮЩИЕПРОЦЕДУРЫ

Процедура СброситьПризнакСписокКлиентовОбновленПриЗаписи(Источник, Отказ) Экспорт
	Константы.СписокКлиентовОбновлен.Установить(Ложь);
КонецПроцедуры

Функция РассчитатьИтоговыеКоличества ()
	Справочники.ГруппыКонтрагентов.РассчитатьИтоговоеКоличествоКонтрагентов();
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ РЕГИСТРАЦИЯ

Функция АвторизацияНаСервере(АдресСервераАвторизации, СтруктураПараметров) Экспорт	
	
	ЛогинСотрудника		 = СтруктураПараметров.ЛогинСотрудника;
	ПарольСотрудника     = СтруктураПараметров.ПарольСотрудника;
	КодСотрудника = СтруктураПараметров.КодСотрудника;
	
	Константы.АдресСервера.Установить(АдресСервераАвторизации);
	
	// Пока адрес сервера не установлен - проверка не даст результата
	Если Не ПроверитьАктуальностьВерсии() Тогда
		Возврат Новый Структура("Успех,Ошибка",Ложь,"Требуется обновить конфигурацию"); 
	КонецЕсли;
	
	СтрЗапроса = Новый Структура; 
	СтрЗапроса.Вставить("ТипРегистрации", "Новая регистрация");
	#Область СистемнаяИнформация
	СтрИнфо = Новый Структура;
	МассивИнфы = Новый Массив;
	МассивИнфы.Добавить("ВерсияОС");
	МассивИнфы.Добавить("ВерсияПриложения");
	МассивИнфы.Добавить("ИдентификаторКлиента"); 
	МассивИнфы.Добавить("ИнформацияПрограммыПросмотра");
	МассивИнфы.Добавить("ОперативнаяПамять");
	МассивИнфы.Добавить("Процессор");
	МассивИнфы.Добавить("ТипПлатформы");
	Инфо = Новый СистемнаяИнформация; 
	Для Каждого Стр Из МассивИнфы Цикл 
		СтрИнфо.Вставить(Стр,Строка(Инфо[Стр])); 
	КонецЦикла; 
	СтрЗапроса.Вставить("СистемнаяИнформация", СтрИнфо);
	#КонецОбласти
	
	#Область Авторизация 
	СтрАвторизации = Новый Структура; 
	СтрАвторизации.Вставить("ЛогинСотрудника"    , ЛогинСотрудника); 
	СтрАвторизации.Вставить("ПарольСотрудника"   , ПарольСотрудника); 
	СтрАвторизации.Вставить("КодСотрудника"    , КодСотрудника); 
	СтрАвторизации.Вставить("Почта"   , "");
	СтрЗапроса.Вставить("АвторизационныеДанные", СтрАвторизации); 
	#КонецОбласти 
	
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтандартныеНастройкиПодключения()); 
	
	Если ОбработкаОшибок(Ответ.Ошибка,Истина) Тогда
		Возврат Новый Структура("Успех,Ошибка",Ложь,Ответ.Ошибка.ТекстОшибки); 
	Иначе
		
		Рез = Новый Структура("Успех",Истина);
		Если КодСотрудника = "AUTO" Тогда
			ПрисланныйКод = Ответ.КодАвторизации;
			Рез.Вставить("ПрисланныйКод",Ответ.КодАвторизации);
		КонецЕсли;	
		
		Константы.ID.Установить(СтрЗапроса.ИнформацияОКонфигурации.ID);
		Константы.ТекущийПользователь.Установить(Ответ.Пользователь);
		Константы.УчетныеДанныеСотрудника.Установить(Новый ХранилищеЗначения(Новый Структура("Логин, Пароль", ЛогинСотрудника, ПарольСотрудника)));
		ПараметрыСеанса.ТекущийПользователь = Константы.ТекущийПользователь.Получить();
		
		Возврат Рез; 
		
	КонецЕсли;
КонецФункции

Функция АктивироватьНаСервере(ПрисланныйКод)  Экспорт
	
	Если Не ПроверитьАктуальностьВерсии() Тогда
		Возврат Новый Структура("Успех,Ошибка",Ложь,"Требуется обновить конфигурацию"); 
	КонецЕсли;
	
	СтрЗапроса = Новый Структура; 
	
	Константы.НастройкиПодключения.Установить(Новый ХранилищеЗначения(СтандартныеНастройкиПодключения(),Новый СжатиеДанных(9)));
	
	СтрЗапроса.Вставить("ТипРегистрации", "Подтверждение регистрации"); 
	СтрЗапроса.Вставить("КодПодтверждения",ПрисланныйКод);
	СтрЗапроса.Вставить("ИнформацияОКонфигурации", ПолучитьИнфуОКонфигурации());
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтандартныеНастройкиПодключения()); 
	
	Если ОбработкаОшибок(Ответ.Ошибка, Истина) Тогда
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации(Ответ.Ошибка.ТекстОшибки);
		Возврат Новый Структура("Успех,Ошибка",Ложь,Ответ.Ошибка.ТекстОшибки); 
	КонецЕсли;
	
	Ответ.СтруктураСоединенияСЦентральнойБазой.Вставить("УспешнаяПроверка",ЛОЖЬ);	
	Константы.НастройкиПодключения.Установить(Новый ХранилищеЗначения(Ответ.СтруктураСоединенияСЦентральнойБазой));
	
	ЭтотУзел            = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ЭтотУзел();
	ОбУзла              = ЭтотУзел.ПолучитьОбъект();
	ОбУзла.Код          = Ответ.ДанныеДляНастройкиОбмена.КодУзлаМобУстр;
	ОбУзла.Наименование = Константы.ID.Получить();
	ОбУзла.Записать();
	
	ДанныеГлУзла = Ответ.ДанныеДляНастройкиОбмена.УзелГлавнойБазы;
 	ГлУзелСсылка = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.ПолучитьСсылку(ДанныеГлУзла.УникальныйИдентификатор);
	ГлУзел       = ГлУзелСсылка.ПолучитьОбъект();
	Если ГлУзел = Неопределено Тогда
		ГлУзел = ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.СоздатьУзел();
		ГлУзел.УстановитьСсылкуНового(ГлУзелСсылка);
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(ГлУзел,ДанныеГлУзла);
	ГлУзел.НомерОтправленного = 0;
	ГлУзел.НомерПринятого     = 0;
	ГлУзел.Записать();
	
	Возврат Новый Структура("Успех",Истина);
	
КонецФункции

Функция ПроверитьСоединениеНаСервере()  Экспорт
	Если Не ПроверитьАктуальностьВерсии() Тогда
		Возврат Новый Структура("Успех,Ошибка",Ложь,"Требуется обновить конфигурацию"); 
	КонецЕсли;
	
	СтрЗапроса = Новый Структура; 
	СтрЗапроса.Вставить("ТипРегистрации"         ,"Проверка соединения"); 
	СтрЗапроса.Вставить("ИнформацияОКонфигурации",ПолучитьИнфуОКонфигурации());
	
	СтруктураПодключения            = Константы.НастройкиПодключения.Получить().Получить();
	СтруктураПодключения.ИмяФункции = "Registration";
	
	Ответ = ПодключениеКВебСервисуЦентральнойБД(СтрЗапроса,СтруктураПодключения); 
	
	Если ОбработкаОшибок(Ответ.Ошибка) Тогда
		Возврат Новый Структура("Успех,Ошибка",Ложь,Ответ.Ошибка); 
	Иначе
		СтруктураПодключения  = Константы.НастройкиПодключения.Получить().Получить();
		СтруктураПодключения.Вставить("УспешнаяПроверка",Истина);
		Константы.НастройкиПодключения.Установить(Новый ХранилищеЗначения(СтруктураПодключения));
		
		Возврат Новый Структура("Успех,Информация",Истина,Ответ.Информация);
		
	КонецЕсли;	
КонецФункции

Функция ПроверитьАктуальностьВерсии()
	НастройкиПодключения = СтандартныеНастройкиПодключения();
	НастройкиПодключения.Вставить("ИмяФункции","GetActualVersion");
	
	Попытка
		Прокси = ПолучитьВСПрокси(НастройкиПодключения);	
		Рез    = Прокси.GetActualVersion();
		Константы.ОС_АктуальнаяВерсияМП.Установить(Рез);
		Если ТребуетсяОбновление(Метаданные.Версия,Рез) Тогда
			Возврат ЛОЖЬ;
		Иначе 
			Возврат Истина;
		КонецЕсли;	
	Исключение
		Инфо = ИнформацияОбОшибке();
		РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Ошибка",0,,ПодробноеПредставлениеОшибки(Инфо));
		Возврат Истина;
	КонецПопытки;
КонецФункции	

Функция ТребуетсяОбновление(ВерсияПриложения, АктуальнаяВерсия) Экспорт
	НомераВерсииПриложения = ОбщийМодульСервер.РазложитьСтрокуВМассивПодстрок(ВерсияПриложения,".");
	НомераАктуальнойВерсии = ОбщийМодульСервер.РазложитьСтрокуВМассивПодстрок(АктуальнаяВерсия,".");
	
	Если НомераАктуальнойВерсии.Количество() <> 3 Или НомераВерсииПриложения.Количество() <> 3 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Для СЧ = 0 По 2 Цикл
		
		Если Число(НомераВерсииПриложения[Сч]) = Число(НомераАктуальнойВерсии[СЧ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Число(НомераВерсииПриложения[Сч]) < Число(НомераАктуальнойВерсии[СЧ]) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;	
КонецФункции	

#КОНЕЦОБЛАСТИ