
&НаСервереБезКонтекста
Функция ПолучитьВидКомментария( Вид )
	Если нРег(Вид) = нРег("ФотоФасада") Тогда
		Возврат Справочники.ВидыКомментариев.ФотоФасада();
	ИначеЕсли нРег(Вид) = нРег("ФотоПолкиДоМерчендайзинга") Тогда
		Возврат Справочники.ВидыКомментариев.ФотоПолкиДоМерчендайзинга();
	Иначе
		Возврат Справочники.ВидыКомментариев.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеКомментарияПоКлиенту( Парам )
	МенеджерЗаписи = РегистрыСведений.КомментарииПоКонтрагентам.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Парам);
	МенеджерЗаписи.Прочитать();
	Возврат МенеджерЗаписи.Выбран();
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеСобытияПоКлиенту( Парам )
	МенеджерЗаписи = РегистрыСведений.СобытияПоКонтрагентам.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Парам);
	МенеджерЗаписи.Прочитать();
	Возврат МенеджерЗаписи.Выбран();
КонецФункции

#ОБЛАСТЬ ОБРАБОТЧИКИСОБЫТИЙФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Этап = ПроверкаЭтапаАвторизации();
	//РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Тест: ",, Этап);
	//Сообщить(Этап);
	Если Этап > 0 Тогда
		//РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Тес3: ",, "Тест3");
		мПараметры = Новый Структура;
		мПараметры.Вставить("Этап",Этап);
		Оповещение = Новый ОписаниеОповещения("ПриОткрытииЗавершение",ЭтаФорма);
		ОткрытьФорму("ОбщаяФорма.ФормаАвторизации", мПараметры, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		//Рез = ОткрытьФормуМодально("ОбщаяФорма.ФормаАвторизации",мПараметры);
		//Если Рез = Неопределено Тогда
		//	ЗавершитьРаботуСистемы(ЛОЖЬ);
		//Иначе 
		//	ИнициализироватьФормуСервер();
		//	ПриОткрытииЗавершение(ЛОЖЬ);
		//КонецЕсли;
	Иначе
		Сообщить("Производится очистка временных файлов");
		ОбщийМодульКлиент.ОчиститьВременныеФайлы();
		ПриОткрытииЗавершение(ЛОЖЬ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры = Неопределено)  Экспорт
	//РаботаСЖурналом.ОС_ЗаписьЖурналаРегистрации("Тест2: ",, "Тест2");
	//Сообщить("Тест2");
	Если Результат = Неопределено Тогда
		#ЕСЛИ НЕ ТОНКИЙКЛИЕНТ ТОГДА
		ЗавершитьРаботуСистемы(ЛОЖЬ);
		#КОНЕЦЕСЛИ
	КонецЕсли;	
	
	Если Результат = Истина Тогда
		ИнициализироватьФормуСервер();
	КонецЕсли;	
	
	ИнициализироватьФормуКлиент();
	
	#ЕСЛИ МобильноеПриложениеКлиент Тогда
	ОбщийМодульКлиент.УстановитьИЗапуститьСлужбу();
	#КонецЕсли
	
	// Подключаем и выполняем обработчики //
	//ОбработчикОбновленияВремени();
	//ПодключитьОбработчикОжидания("ОбработчикОбновленияВремени",1,Истина);
	
	ПериодичностьОпроса = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ПериодичностьРегистрацииКоординат");
	Если Не ЗначениеЗаполнено(ПериодичностьОпроса) Тогда
		ПериодичностьОпроса = 60;   // Для обновления состояния координат //
	КонецЕсли; 	
	
	Элементы.ДекорацияСостояниеОбменаГеокоординаты.Заголовок = "";
	Элементы.КартинкаОбмен.Картинка                          = БиблиотекаКартинок.КартинкаПустая;
	Элементы.КартинкаОбменГеоКоординаты.Картинка             = БиблиотекаКартинок.КартинкаПустая;
	
	ОбновитьСостояниеГеоПозиции();
	
	Если НЕ ПосещениеАктивно Тогда
		НачатьАвтоОбмен();
	КонецЕсли;
	
	ВерсияОбновления = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ВерсияДляВыводаОбновления");
	Если ВерсияОбновления <> ПолучитьВерсию() Тогда
		ФормаОтчета = ПолучитьФорму("ОбщаяФорма.ФормаИнформацииОбОбновлении");
		ФормаОтчета.Открыть();
	КонецЕсли;
	
	// ЭМУЛЯЦИЯ //
	//Если Найти(Строка(ТекущийПользователь),"ТП") > 0 Тогда
	//	НачатьЭмуляцию("");
	//КонецЕсли;	
	// ЭМУЛЯЦИЯ //
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьВерсию()
	
	Возврат Метаданные.Версия;
	
КонецФункции 

&НаКлиенте
Процедура ПриЗакрытии()
	///Проверить 
	ФоновыеЗаданияСервер.ОстановитьВсеФоновыеЗадания();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОповещения(Команда)
	ОткрытьФорму("Документ.Уведомление.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НачатьСинхронизацию" Тогда
		ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СделатьОбмен");
	ИначеЕсли ИмяСобытия = "НачатьЗагрузкуКоординат" Тогда
		ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СинхронизироватьКоординаты");
	ИначеЕсли ИмяСобытия = "УведомлениеПрочитано" Тогда
		ОбновитьСоставОповещений();    
	ИначеЕсли ИмяСобытия = "НовыйЗаказ" Тогда
		ОбновитьДанныеПоОтчетам();
	ИначеЕсли ИмяСобытия = "УведомлениеОВыполненииЗаданияТП" Тогда 
		Элементы.СписокЗаданий.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Киселев
	//Проверим необходимость обновления данных ИБ и если надо обновим
	ОбновлениеИнформационнойБазы.ОбновлениеИнформационнойБазы();
	
	//Константы.ВерсияКонфигурации.Установить("2.0.70");
	//Константы.ОС_АктуальнаяВерсияМП.Установить("2.0.70");
	
	СтруктураПодключения = Константы.НастройкиПодключения.Получить().Получить();
	Если ТипЗнч(СтруктураПодключения) = Тип("Структура") И СтруктураПодключения.Свойство("Адрес") Тогда
		СтруктураПодключения.Адрес = СтрЗаменить(СтруктураПодключения.Адрес, "91.211.106.85", "webapp.balmiko.ru");
		Константы.НастройкиПодключения.Установить(Новый ХранилищеЗначения(СтруктураПодключения));
	КонецЕсли;	
	АдресСервера = СтрЗаменить(Константы.АдресСервера.Получить(), "91.211.106.85", "webapp.balmiko.ru");	
	Константы.АдресСервера.Установить(АдресСервера);
	//Сообщить(Константы.ПериодичностьРегистрацииКоординат.Получить());
	//Константы.ПериодичностьРегистрацииКоординат.Установить(1200);
	
	Константы.СписокКлиентовОбновлен.Установить(Ложь);
	ИнициализироватьФормуСервер();
	
	#ЕСЛИ МобильноеПриложениеКлиент Или МобильноеПриложениеСервер ТОГДА
		Элементы.КнопкаОбновитьСписокЗаданий.Видимость = Ложь;
		Элементы.ТекущийПользовательФизЛицо.Видимость = Ложь;
	#ИНАЧЕ
		Элементы.КнопкаОбновитьСписокЗаданий.Видимость = Истина;
		//Элементы.ТекущийПользовательФизЛицо.Видимость = Истина;
	#КОНЕЦЕСЛИ
	
	ЭтаФорма.Заголовок = СокрЛП(ТекущийПользователь.ФизЛицо);
	Элементы.КомандаЗакончитьМаршрут1.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуКлиент()
	УстановитьСостояниеРабочегоДня();
	УстановитьСостояниеМаршрута();
КонецПроцедуры	

&НаСервере
Процедура ИнициализироватьФормуСервер()	
	ДополнительныеФункцииСервер.ПроверкаИзмененияВерсий();
	Элементы.КомандаРазмещениеПродукции.Видимость   = Ложь;
	Элементы.КомандаПостановкаНовойЗадачи.Видимость = Ложь;
	
	//Глебов 00-00000000000000000000000000000000000000017900001
	ОбновитьСписокКонтрагентов();
	
	ТекГруппаКлиентов = Константы.ГруппаКонтрагентов_КонтрагентыПоМаршруту.Получить();
	
	Если ТекГруппаКлиентов.ВсегоКлиентов = 0 Тогда
		ТекГруппаКлиентов = Константы.ГруппаКонтрагентов_СвоиКонтрагенты.Получить();
	КонецЕсли;
	//\\ Глебов 00-00000000000000000000000000000000000000017900001
	
	ТекущаяТерритория = "000";
		
	УстановитьСостояниеПосещения();
	ОбновитьГруппировкуКлиентов();
	
	ОбновлениеПослеСинхронизацииСервер();
	
	РассчитатьКоличествоНеотправленныхДокументов();
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСоставОповещений()
	// ПОКА НЕ ИСПОЛЬЗУЕМ //
	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Уведомление.Ссылка) КАК НеПрочитано
	|ИЗ
	|	Документ.Уведомление КАК Уведомление
	|ГДЕ
	|	НЕ Уведомление.Прочитано";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КолУведомлений = Выборка.НеПрочитано;
	Иначе
		КолУведомлений = 0;
	КонецЕсли;
	Если КолУведомлений > 0 Тогда
		Элементы.КомандаОповещения.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Элементы.КомандаОповещения.Заголовок  = "Непрочитанных уведомлений: " + КолУведомлений;
	Иначе
		Элементы.КомандаОповещения.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.КомандаОповещения.Заголовок  = "Уведомления";
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСоставПланов()
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Балмико_РазрезыПланирования.Ссылка КАК Показатель,
	|	СУММА(ОС_ПланыПродаж.НедельныйПлан) КАК НедельныйПлан,
	|	СУММА(ОС_ПланыПродаж.НедельныйФакт) КАК НедельныйФакт,
	|	СРЕДНЕЕ(ОС_ПланыПродаж.Прогноз) КАК Прогноз
	|ИЗ
	|	Перечисление.Балмико_РазрезыПланирования КАК Балмико_РазрезыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОС_ПланыПродаж КАК ОС_ПланыПродаж
	|		ПО (ОС_ПланыПродаж.РазрезПланирования = Балмико_РазрезыПланирования.Ссылка)
	|			И (ОС_ПланыПродаж.ТорговыйПредставитель = &ТорговыйПредставитель)
	|ГДЕ
	|	Балмико_РазрезыПланирования.Ссылка В(&РазрезПланирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	Балмико_РазрезыПланирования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""АТТ (ном. группы)"" КАК Показатель,
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйПлан) КАК НедельныйПлан,
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйФакт) КАК НедельныйФакт,
	|	СРЕДНЕЕ(ОС_ПланыПродаж.Прогноз) КАК Прогноз
	|ИЗ
	|	Перечисление.Балмико_РазрезыПланирования КАК Балмико_РазрезыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОС_ПланыПродаж КАК ОС_ПланыПродаж
	|		ПО (ОС_ПланыПродаж.РазрезПланирования = Балмико_РазрезыПланирования.Ссылка)
	|			И (ОС_ПланыПродаж.ТорговыйПредставитель = &ТорговыйПредставитель)
	|ГДЕ
	|	Балмико_РазрезыПланирования.Ссылка = ЗНАЧЕНИЕ(пЕРЕчисление.Балмико_разрезыПланирования.АТТ)
	|	И ОС_ПланыПродаж.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АТТ"",
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйПлан),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйФакт),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.Прогноз)
	|ИЗ
	|	Перечисление.Балмико_РазрезыПланирования КАК Балмико_РазрезыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОС_ПланыПродаж КАК ОС_ПланыПродаж
	|		ПО (ОС_ПланыПродаж.РазрезПланирования = Балмико_РазрезыПланирования.Ссылка)
	|			И (ОС_ПланыПродаж.ТорговыйПредставитель = &ТорговыйПредставитель)
	|ГДЕ
	|	Балмико_РазрезыПланирования.Ссылка = ЗНАЧЕНИЕ(пЕРЕчисление.Балмико_разрезыПланирования.АТТ)
	|	И ОС_ПланыПродаж.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Упаковки (ном. группы)"",
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйПлан),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйФакт),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.Прогноз)
	|ИЗ
	|	Перечисление.Балмико_РазрезыПланирования КАК Балмико_РазрезыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОС_ПланыПродаж КАК ОС_ПланыПродаж
	|		ПО (ОС_ПланыПродаж.РазрезПланирования = Балмико_РазрезыПланирования.Ссылка)
	|			И (ОС_ПланыПродаж.ТорговыйПредставитель = &ТорговыйПредставитель)
	|ГДЕ
	|	Балмико_РазрезыПланирования.Ссылка = ЗНАЧЕНИЕ(пЕРЕчисление.Балмико_разрезыПланирования.Упаковки)
	|	И ОС_ПланыПродаж.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Упаковки (номенклатура)"",
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйПлан),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.НедельныйФакт),
	|	СРЕДНЕЕ(ОС_ПланыПродаж.Прогноз)
	|ИЗ
	|	Перечисление.Балмико_РазрезыПланирования КАК Балмико_РазрезыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОС_ПланыПродаж КАК ОС_ПланыПродаж
	|		ПО (ОС_ПланыПродаж.РазрезПланирования = Балмико_РазрезыПланирования.Ссылка)
	|			И (ОС_ПланыПродаж.ТорговыйПредставитель = &ТорговыйПредставитель)
	|ГДЕ
	|	Балмико_РазрезыПланирования.Ссылка = ЗНАЧЕНИЕ(пЕРЕчисление.Балмико_разрезыПланирования.Упаковки)
	|	И ОС_ПланыПродаж.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Заказы (с планшета)"" КАК Показатель,
	|	0 КАК НедельныйПлан,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка) КАК НедельныйФакт,
	|	0 КАК Прогноз
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	Запрос.УстановитьПараметр("ТорговыйПредставитель",ТекущийПользователь.ФизЛицо);
	МассивРазрезов = Новый Массив;
	МассивРазрезов.Добавить(Перечисления.Балмико_РазрезыПланирования.Сумма);
	МассивРазрезов.Добавить(Перечисления.Балмико_РазрезыПланирования.СуммаТоп50);
	МассивРазрезов.Добавить(Перечисления.Балмико_РазрезыПланирования.SKU);
	Запрос.УстановитьПараметр("РазрезПланирования",МассивРазрезов);
	
	НачалоКонецНедели = ОбщийМодульСервер.ПолучитьНачалоКонецНедели();
	Запрос.УстановитьПараметр("ДатаНач",НачалоКонецНедели.НачалоНедели);
	Запрос.УстановитьПараметр("ДатаКон",НачалоКонецНедели.КонецНедели);
	
	РЗ = Запрос.ВыполнитьПакет();
	ВыполнениеПлановПродаж.Очистить();
	Для Каждого Эл Из РЗ Цикл
		//Скроем АТТ и Упаковки
		Если РЗ.Найти(Эл) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		//\\
		Выборка = Эл.Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ВыполнениеПлановПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;	
	КонецЦикла;	   	

	Для Каждого СтрокаТЧ Из ВыполнениеПлановПродаж Цикл 
		СтрокаТЧ.НедельныйПланЗаголовок = "План";
		СтрокаТЧ.НедельныйФактЗаголовок = "Факт";
		СтрокаТЧ.ПрогнозЗаголовок       = "Прогноз";
	КонецЦикла;	
	
	Элементы.ВыполнениеПлановПродаж.ВысотаВСтрокахТаблицы = ВыполнениеПлановПродаж.Количество();
	
	Элементы.ВыполнениеПлановПродаж.Видимость = ВыполнениеПлановПродаж.Итог("НедельныйПланЗаголовок") <> 0 Или ВыполнениеПлановПродаж.Итог("НедельныйФактЗаголовок") <> 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаОбязательства(Команда)
	ОткрытьФорму("Обработка.Обязательства.Форма.Форма");
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюТерриторию()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Территории.Код КАК Код
	|ИЗ
	|	Справочник.Территории КАК Территории
	|ГДЕ
	|	Территории.ФБ_ТорговыйПредставитель = &ТорговыйПредставитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("ТорговыйПредставитель",ТекущийПользователь.ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.ДекорацияТекущаяТерритория.Заголовок = Выборка.Код;
	Иначе
		Элементы.ДекорацияТекущаяТерритория.Заголовок = "000";
	КонецЕсли;	
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ КЛИЕНТСКИЕПРОЦЕДУРЫ

&НаКлиенте
Процедура ОбработчикОбновленияВремени() Экспорт
	Элементы.ДатаВремя.ПодсказкаВвода = ОбщийМодульСервер.ФорматДаты(ТекущаяДата());
	Элементы.ДатаВремя.ОбновитьТекстРедактирования();
	ПодключитьОбработчикОжидания("ОбработчикОбновленияВремени",1,Истина);
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСостояниеГеоПозиции()  Экспорт
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕКЛИЕНТ ТОГДА	
		//ФоновыеЗаданияСервер.ЗапуститьВыполнениеВФоне("ФоновыеЗаданияСервер.СинхронизироватьКоординаты");
		ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СинхронизироватьКоординаты");
	#КОНЕЦЕСЛИ
	
	//ПодключитьОбработчикОжидания("ОбновитьСостояниеGPSКлиент",2,Истина);
	ПодключитьОбработчикОжидания("ОбновитьСостояниеГеоПозиции",ПериодичностьОпроса,Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияНовогоКлиента(Команда)
	ОткрытьФорму("Документ.АнкетаТП.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура КомандаВнеплановоеДействие(Команда)
	ОткрытьФорму("Документ.ВнеплановоеДействие.ФормаОбъекта");
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ГЕОКООРДИНАТЫ
&НаКлиенте
Процедура ДекорацияСостояниеОбменаГеокоординатыНажатие(Элемент)
	ОткрытьФорму("Обработка.ОбработкаОшибокНаКлиенте.Форма.Форма",Новый Структура("ТекстОшибки",ТекстОшибкиГеоКоординаты));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеGPSКлиент()
	ОбновитьСостояниеGPS();
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСостояниеGPS()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГеоКоординатыСрезПоследних.Период,
	|	ГеоКоординатыСрезПоследних.gpsВключен
	|ИЗ
	|	РегистрСведений.ГеоКоординаты.СрезПоследних КАК ГеоКоординатыСрезПоследних
	|ГДЕ
	|	ГеоКоординатыСрезПоследних.Документ = НЕОПРЕДЕЛЕНО";
	GPSДоступен = ЛОЖЬ;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		GPSДоступен = Выборка.GPSВключен И (ТекущаяДата() - Выборка.Период) < 15;	
	КонецЕсли;	
	
	Если GPSДоступен Тогда
		ЦветФона = WebЦвета.СветлоЗеленый;
	Иначе 	
		ЦветФона = WebЦвета.Розовый;
	КонецЕсли;
	
	Если Элементы.ДекорацияGPS.ЦветФона <> ЦветФона Тогда
		Элементы.ДекорацияGPS.ЦветФона = ЦветФона;
	КонецЕсли;	
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ РАБОЧИЙДЕНЬ
 
&НаКлиенте
Процедура КомандаНачатьРабочийДень(Команда)
	//Киселев удалим старые данные
	//Парам = Новый Структура;
	//Парам.Вставить("ИмяПроцедуры"    , "ОбщийМодульСервер.ОчиститьУстаревшиеДанныеБД");
	//Парам.Вставить("ЗаголовокФормы"  , "Подготовка базы данных");
	//Парам.Вставить("ВернутьРезультат", Ложь);
	//ОткрытьФорму("ОбщаяФорма.ФормаДлительнойОперации",Парам);
	КомандаНачатьРабочийДеньНаСервере();
	УстановитьСостояниеРабочегоДня();
	ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекРабочийДень    ,"Начало рабочего дня");	
	УстановитьСостояниеМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииЗавершенияПрограммы(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекРабочийДень, "Конец рабочего дня");
		КомандаЗавершитьРабочийДеньНаСервере();
	КонецЕсли;
	УстановитьСостояниеРабочегоДня();
	УстановитьСостояниеМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьРабочийДень(Команда)
	
	//ЗамерыОперацийОбщий.НачатьИлиОбновитьЗамер("Команда.ЗавершитьРабочийДень",,,,,Истина);
	
	ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииЗавершенияПрограммы", ЭтотОбъект)
	,				"Вы уверены, что хотите завершить рабочий день?", РежимДиалогаВопрос.ДаНет, , , "Завершение рабочего дня");
	
	//Ответ = Вопрос("Вы уверены, что хотите завершить рабочий день?",РежимДиалогаВопрос.ДаНет,,,"Завершение рабочего дня");
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекРабочийДень, "Конец рабочего дня");
	//	КомандаЗавершитьРабочийДеньНаСервере();
	//КонецЕсли;
	//УстановитьСостояниеРабочегоДня();
	//УстановитьСостояниеМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура КомандаНачатьРабочийДеньНаСервере()
	Док            = Документы.РабочийДень.СоздатьДокумент();
	Док.Дата       = ТекущаяДата();
	Док.ДатаНачала = ТекущаяДата();
	Док.Сотрудник  = ПараметрыСеанса.ТекущийПользователь;
	Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

&НаСервере
Процедура КомандаЗавершитьРабочийДеньНаСервере()
	Стр               = РегистрыСведений.СостоянияРабочегоДня.ПолучитьПоследнее();
	Док               = Стр.РабочийДень.ПолучитьОбъект();
	Док.ДатаОкончания = ТекущаяДата();
	Док.Завершен      = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеРабочегоДня()
	Стр = ПолучитьСостояниеРабочегоДня();
	Элементы.КомандаНачатьРабочийДень.Видимость = Не Стр.Начат ИЛИ (Стр.Начат И Стр.Завершен) И Не ПосещениеАктивно;
	Элементы.ГруппаНеотправленныеДокументы.Видимость = Не ПосещениеАктивно;
	Элементы.ГруппаРабочийДень.Видимость        = Стр.Начат И Не Стр.Завершен И Не ПосещениеАктивно;
	ДеньНачат                                   = Стр.Начат;
	ДеньЗавершен                                = Стр.Завершен;
	Если ДеньНачат И Не ДеньЗавершен Тогда
		ТекРабочийДень = Стр.РабочийДень;
	Иначе
		ТекРабочийДень = Неопределено;
	КонецЕсли;	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСостояниеРабочегоДня()
	Возврат РегистрыСведений.СостоянияРабочегоДня.ПолучитьПоследнее();
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ МАРШРУТ

&НаКлиенте
Процедура КомандаНачатьМаршрут(Команда)
	
	//ЗамерыОперацийОбщий.НачатьИлиОбновитьЗамер("Команда.НачатьМаршрут",,,,,Истина);
	
	КомандаНачатьМаршрутНаСервере();
	УстановитьСостояниеМаршрута();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакончитьМаршрут(Команда)
	КомандаЗакончитьМаршрутНаСервере();
	УстановитьСостояниеМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореГруппыКонтрагентов(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекГруппаКлиентов = Результат;
		Если ОбновлятьГруппыКлиентов(Результат) Тогда
			ДополнительныеФункцииСервер.АктуализироватьПринадлежностьКонтрагентовГруппам(ТекГруппаКлиентов);
			ОбновитьСписокКонтрагентов();
		КонецЕсли;
		ОбновитьГруппировкуКлиентов();
		Элементы.СписокКлиентов.Обновить();
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаКлиентов(Команда)
	ОткрытьФорму( "Справочник.ГруппыКонтрагентов.ФормаВыбора", , ЭтаФорма, Истина, , , Новый ОписаниеОповещения( "ПриВыбореГруппыКонтрагентов", ЭтотОбъект ),  );
	
	//Рез = ОткрытьФормуМодально("Справочник.ГруппыКонтрагентов.ФормаВыбора");
	//Если Рез <> Неопределено Тогда
	//	ТекГруппаКлиентов = Рез;
	//	Если ОбновлятьГруппыКлиентов(Рез) Тогда
	//		ДополнительныеФункцииСервер.АктуализироватьПринадлежностьКонтрагентовГруппам(ТекГруппаКлиентов);
	//		ОбновитьСписокКонтрагентов();
	//	КонецЕсли;
	//	ОбновитьГруппировкуКлиентов();
	//КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновлятьГруппыКлиентов(Группа)
	
	Возврат Группа.ОбновлятьПриВыборе;	//Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПриНачалеАктивности(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ОбязательныйКомментарий = Результат.ОбязательныйКомментарий;
		НачатьПосещениеКлиент( Результат );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНачалаАктивности()
	
	ОбязательныйКомментарий = Ложь;
	
	ОткрытьФорму( "ОбщаяФорма.ФормаНачалоАктивности", Новый Структура("Контрагент,Сотрудник", ТекКонтрагент, ТекущийПользователь), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПриНачалеАктивности", ЭтотОбъект ),  );
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииВыбораКлиента(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ОткрытьФормуНачалаАктивности();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКлиентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекКонтрагент = Элементы.СписокКлиентов.ТекущаяСтрока;
	ТекКонтрагентНаименование = ПолучитьНаименованиеКонтрагентСКодом(ТекКонтрагент);
	
	Если Не ЭтоСвойКонтрагент(ТекКонтрагент) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриПодтвержденииВыбораКлиента", ЭтотОбъект), "Клиент не является вашим, прервать процедуру начала активности?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "ЧУЖОЙ КЛИЕНТ");
		Возврат;
		//Ответ = Вопрос("Клиент не является вашим, прервать процедуру начала активности?",РежимДиалогаВопрос.ДаНет,,,"ЧУЖОЙ КЛИЕНТ");
		//Если Не Ответ = КодВозвратаДиалога.Нет Тогда
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуНачалаАктивности();
	//ОбязательныйКомментарий = Ложь;
	//Рез = ОткрытьФормуМодально("ОбщаяФорма.ФормаНачалоАктивности", Новый Структура("Контрагент,Сотрудник", ТекКонтрагент, ТекущийПользователь));
	//Если Рез <> Неопределено Тогда
	//	ОбязательныйКомментарий = Рез.ОбязательныйКомментарий;
	//	НачатьПосещениеКлиент(Рез);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеКонтрагентСКодом(Контрагент)
	Возврат Контрагент.КодПоиска + ", " + Контрагент.Наименование;
КонецФункции	
	
&НаСервере
Процедура КомандаНачатьМаршрутНаСервере()
	МаршрутВиден = Истина;
	ОбновитьГруппировкуКлиентов();
КонецПроцедуры

&НаСервере
Процедура КомандаЗакончитьМаршрутНаСервере()
	МаршрутВиден = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеМаршрута()
	
	Элементы.КомандаНачатьМаршрут.Видимость           = (ДеньНачат И Не ДеньЗавершен) И Не МаршрутВиден;
	Элементы.КомандаЗакончитьМаршрут.Видимость        = Ложь;//(ДеньНачат И Не ДеньЗавершен) И МаршрутВиден;	
	Элементы.КомандаЗакончитьМаршрут1.Видимость       = (ДеньНачат И Не ДеньЗавершен) И МаршрутВиден;	
	Элементы.ГруппаМаршрут.Видимость                  = (ДеньНачат И Не ДеньЗавершен) И МаршрутВиден;
	
	Элементы.КомандаЗавершитьРабочийДень.Видимость    = (ДеньНачат И Не ДеньЗавершен) И НЕ ДеньЗавершен И Не МаршрутВиден;
	Элементы.ГруппаРабочийДеньДополнительно.Видимость = (ДеньНачат И Не ДеньЗавершен) И НЕ МаршрутВиден И НЕ ПосещениеАктивно;
	//Элементы.ГруппаПланы.Видимость                    = (ДеньНачат И Не ДеньЗавершен) И Не МаршрутВиден;
	
	//Элементы.ГруппаПланы.Видимость = Ложь;
	Элементы.ГруппаПланы.Видимость                    = НЕ (ДеньНачат И Не ДеньЗавершен) И Не МаршрутВиден И Не ПосещениеАктивно;
	//Элементы.ГруппаСинхронизация.Видимость            = (Не МаршрутВиден) ИЛИ ПосещениеАктивно;
	//Элементы.ГруппаУведомления.Видимость              = (Не МаршрутВиден) ИЛИ ПосещениеАктивно;
	
	Элементы.ГруппаИсторияСегодняшнихЗаказов.Видимость           = (ДеньНачат И Не ДеньЗавершен) И Не МаршрутВиден;
	РассчитатьИсториюСегодняшнихЗаказов();	
	РассчитатьКоличествоНеотправленныхДокументов();
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьКоличествоНеотправленныхДокументов()
	ДокМета = Метаданные.Документы;
	Запрос = Новый Запрос;
	Для Каждого Эл Из Метаданные.ПланыОбмена.ОС_ОбменСМобильнымиУстройствами.Состав Цикл
		ЭлМета = Эл.Метаданные;
		Если Эл.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить И ДокМета.Содержит(ЭлМета) Тогда
			Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст),"", Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС)
			+ "ВЫБРАТЬ Сумма(1) Как КоличествоИзменений Из " + ЭлМета.ПолноеИмя() + ".Изменения Как Изменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ЭлМета.ПолноеИмя() + " КАК Док ПО Изменения.Ссылка = Док.Ссылка";
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = "Выбрать СУММА(ТЧ.КоличествоИзменений) Как КоличествоИзменений Из ( " + Запрос.Текст + " ) КАК ТЧ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НеОтправленоДокументов = Выборка.КоличествоИзменений;
	Иначе
		НеОтправленоДокументов = 0;
	КонецЕсли;
	
	Элементы.ДекорацияНеотправленоДокументов.Заголовок = "Не отправлено документов: " + Формат(НеОтправленоДокументов,"ЧДЦ=; ЧН=0");
	Элементы.ДекорацияНеотправленоДокументов.ЦветФона = ?(НеОтправленоДокументов > 0,Новый Цвет(255,240,240),Новый Цвет(240,255,240));
	Элементы.ДекорацияНеотправленоДокументов.ЦветТекста = ?(НеОтправленоДокументов > 0,Новый Цвет(240,0,0),Новый Цвет(0,0,240));
КонецПроцедуры

&НаСервере
Процедура РассчитатьИсториюСегодняшнихЗаказов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказПокупателяТовары.Номенклатура) КАК КоличествоSKU,
		|	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма,
		|	""Заказы с планшета"" КАК Вид,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяТовары.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВозвратТоваровОтПокупателяТовары.Номенклатура),
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма),
		|	""Возвраты с планшета"",
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВозвратТоваровОтПокупателяТовары.Ссылка)
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	""Посещения"",
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Посещение.Контрагент)
		|ИЗ
		|	Документ.Посещение КАК Посещение
		|ГДЕ
		|	Посещение.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И Посещение.ВидПосещения <> ЗНАЧЕНИЕ(Перечисление.ВидыПосещений.ТелефонныйЗвонок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(Балмико_ДанныеПоЗаказамДляМП.КоличествоSKU),
		|	СУММА(Балмико_ДанныеПоЗаказамДляМП.СуммаЗаказа),
		|	""Заказы по территории"",
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Балмико_ДанныеПоЗаказамДляМП.НомерДокумента)
		|ИЗ
		|	РегистрСведений.Балмико_ДанныеПоЗаказамДляМП КАК Балмико_ДанныеПоЗаказамДляМП
		|ГДЕ
		|	Балмико_ДанныеПоЗаказамДляМП.Операция = ""Заказ""
		|	И Балмико_ДанныеПоЗаказамДляМП.ДатаОтгрузки = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1), ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(Балмико_ДанныеПоЗаказамДляМП.КоличествоSKU),
		|	СУММА(Балмико_ДанныеПоЗаказамДляМП.СуммаЗаказа),
		|	""Возвраты по территории"",
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Балмико_ДанныеПоЗаказамДляМП.НомерДокумента)
		|ИЗ
		|	РегистрСведений.Балмико_ДанныеПоЗаказамДляМП КАК Балмико_ДанныеПоЗаказамДляМП
		|ГДЕ
		|	Балмико_ДанныеПоЗаказамДляМП.Операция = ""Возврат""
		|	И Балмико_ДанныеПоЗаказамДляМП.ДатаОтгрузки = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1), ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ИсторияСегодняшнихЗаказов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	


#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПОСЕЩЕНИЕ

&НаСервереБезКонтекста
Функция РасстояниеДоТочки(Контрагент, Широта, Долгота) Экспорт
	ЧислоПи = 3.1415926535897932;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И Не Контрагент.Пустая() Тогда
		Кл = Контрагент.ПолучитьОбъект();
		ШиротаКлиента = Кл.ГеографическаяШирота * ЧислоПи / 180;
		ДолготаКлиента = Кл.ГеографическаяДолгота * ЧислоПи / 180;
	
		Расстояние = 2
		*	aSin( Sqrt( Sin( (Широта*ЧислоПи/180 - ШиротаКлиента)/2 ) * Sin( (Широта * ЧислоПи / 180 - ШиротаКлиента)/2 )
		+		Cos( Широта*ЧислоПи/180 ) * Cos( ШиротаКлиента ) * Sin( (Долгота*ЧислоПи/180 - ДолготаКлиента)/2 ) * Sin( (Долгота*ЧислоПи/180 - ДолготаКлиента)/2 ) ) )
		*	6372795;
		Возврат Расстояние;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции	// РасстояниеДоТочки

&НаКлиенте
Процедура ПриПодтвержденииНачалаАктивностиБезКоординат(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗавершитьАвтообмен();
		ВидТекущегоПосещения = ДопПараметры.ВидПосещения;
		НачатьПосещениеСервер( ДопПараметры );
		ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекПосещение, "Начато посещение");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НачатьПосещениеКлиент(Рез)
	Перем стрКоординат;
	стрКоординат = Новый Структура;
	
	Если Рез.ВидПосещения = ПредопределенноеЗначение("Перечисление.ВидыПосещений.ТелефонныйЗвонок") Тогда
	ИначеЕсли Не ПроверитьГеопозицияДоступна(стрКоординат) Тогда
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииНачалаАктивностиБезКоординат", ЭтотОбъект, Рез), "Отсутствует информация
		|о текущей позиции. Для того,
		|чтобы избежать спорных
		|ситуаций, рекомендуется 
		|дождаться получения
		|информации о позиции.
		|Прервать процедуру начала
		|активности?", РежимДиалогаВопрос.ДаНет, , ,"НЕТ ПОЗИЦИИ");
		Возврат;
		
	ИначеЕсли ТипЗнч(стрКоординат) = Тип("Структура") И стрКоординат.Свойство("Широта") И стрКоординат.Свойство("Долгота") Тогда
		Всп = РасстояниеДоТочки(Рез.Контрагент, стрКоординат.Широта, стрКоординат.Долгота);
		СинхронизацияСервер.ЗаписьЛога( Рез.Контрагент, "Широта " + стрКоординат.Широта + ", долгота " + стрКоординат.Долгота + ", расстояние " + Всп );
		Если Всп > 101 Тогда
			
			ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииНачалаАктивностиБезКоординат", ЭтотОбъект, Рез)
			, "Вы находитесь
			|на расстояниии " + Формат(Всп, "ЧДЦ=") + " метров
			|от торговой точки.
			|Для того,
			|чтобы избежать спорных
			|ситуаций, рекомендуется 
			|подойти ближе.
			|Прервать процедуру начала
			|активности?", РежимДиалогаВопрос.ДаНет, , ,"ВЫ СЛИШКОМ ДАЛЕКО ОТ ТОРГОВОЙ ТОЧКИ");
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПриПодтвержденииНачалаАктивностиБезКоординат(КодВозвратаДиалога.Нет, Рез);
	
	//ЗавершитьАвтообмен();
	//ВидТекущегоПосещения = Рез.ВидПосещения;
	//НачатьПосещениеСервер(Рез);
	//ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекПосещение, "Начато посещение");
КонецПроцедуры	

&НаКлиенте
Процедура КомандаФиксацияПоложения(Команда)
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕКЛИЕНТ ТОГДА
		Если ПроверитьГеопозицияДоступна() Тогда
			Координаты  = ОбщийМодульСервер.МэппингСтруктурКоординатСервер(ОбщийМодульСервер.ПолучитьТекущиеКоординатыСервер());
			ДокФиксации = КомандаФиксацияПоложенияНаСервере();
			ОбщийМодульКлиент.ЗафиксироватьМестоположение(ДокФиксации,"Фиксация положения");
		Иначе	
			Сообщить("Включите GPS для фиксации положения!",СтатусСообщения.Важное);
		КонецЕсли;	
	#ИНАЧЕ
		Сообщить("Фиксация местоположения доступна только на мобильном устройстве!",СтатусСообщения.Важное);	
	#КОНЕЦЕСЛИ	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииЗавершенияПосещения(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекПосещение,"Завершено посещение");
		КомандаЗавершитьПосещениеНаСервере();
		НачатьАвтоОбмен();
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура КомандаЗавершитьПосещение(Команда)
	
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕКЛИЕНТ ТОГДА
	Если Не ПроверитьВозможностьЗаверешенияПосещенияНаличиеФото(ТекПосещение) Тогда
		Сообщить("Не сделано ниодной фотографии при посещении, закрытие посещения невозможно");
		Возврат;
	КонецЕсли;
	#КОНЕЦЕСЛИ
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕКЛИЕНТ ТОГДА
	Если Не ПроверитьВозможностьЗаверешенияПосещенияНаличиеКомментария(ТекПосещение, ОбязательныйКомментарий) Тогда
		Сообщить("Не заполнен обязательный комментарий, закрытие посещения невозможно");
		Возврат;
	КонецЕсли;
	#КОНЕЦЕСЛИ
	
	Если Не ПроверитьВыполнениеОбязательныхПунктовПосещения( ТекПосещение ) Тогда
		ПоказатьПредупреждение(, "Не выполнены обязательные пункты посещения");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПриПодтвержденииЗавершенияПосещения", ЭтаФорма), "Вы уверены, что хотите завершить посещение?", РежимДиалогаВопрос.ДаНет, , , "Завершение посещения");
	//Ответ = Вопрос("Вы уверены, что хотите завершить посещение?",РежимДиалогаВопрос.ДаНет,,,"Завершение посещения");
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ОбщийМодульКлиент.ЗафиксироватьМестоположение(ТекПосещение,"Завершено посещение");
	//	КомандаЗавершитьПосещениеНаСервере();
	//	НачатьАвтоОбмен();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьЗаверешенияПосещенияНаличиеКомментария(Посещение, ПроверкаКомментария)
	
	Если Истина
		И ПроверкаКомментария
		И ПустаяСтрока(Посещение.Комментарий)
	Тогда	
		Возврат Ложь
	Иначе
	    Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьЗаверешенияПосещенияНаличиеФото(Посещение)
	
	Если Посещение.ВидПосещения = Перечисления.ВидыПосещений.ТелефонныйЗвонок Тогда
		Возврат Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокКомментарий.Ссылка
		|ИЗ
		|	Документ.Комментарий КАК ДокКомментарий
		|ГДЕ
		|	ДокКомментарий.Посещение = &Посещение";
		
		Запрос.УстановитьПараметр("Посещение", Посещение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеОбязательныхПунктовПосещения( Посещение )
	
	Запрос = Новый Запрос;
	Если Посещение.ВидПосещения = Перечисления.ВидыПосещений.ПлановоеПосещение Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийЗаданияТП.ВидЗадания,
		|	РегистрСведенийЗаданияТП.Обязательное,
		|	ЕСТЬNULL(ВыполнениеЗаданийТП.Выполнено, ЛОЖЬ) КАК Выполнено
		|ИЗ
		|	РегистрСведений.ЗаданияТП КАК РегистрСведенийЗаданияТП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Посещение КАК ДокументПосещение
		|		ПО (ДокументПосещение.Ссылка = &Посещение)
		|			И РегистрСведенийЗаданияТП.Маршрут = ДокументПосещение.Маршрут
		|			И РегистрСведенийЗаданияТП.Контрагент = ДокументПосещение.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеЗаданийТП КАК ВыполнениеЗаданийТП
		|		ПО РегистрСведенийЗаданияТП.Маршрут = ВыполнениеЗаданийТП.Маршрут
		|			И РегистрСведенийЗаданияТП.ВидЗадания = ВыполнениеЗаданийТП.ВидЗадания
		|			И РегистрСведенийЗаданияТП.Контрагент = ВыполнениеЗаданийТП.Контрагент
		|			И (ВыполнениеЗаданийТП.Посещение = &Посещение)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаданийТорговымПредставителям КАК ВидыЗаданийТорговымПредставителям
		|		ПО РегистрСведенийЗаданияТП.ВидЗадания = ВидыЗаданийТорговымПредставителям.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияПоАнкетированиюКлиентов КАК ЗаданияПоАнкетированиюКлиентов
		|		ПО (ВидыЗаданийТорговымПредставителям.Идентификатор = ""Анкета""
		|				ИЛИ ВидыЗаданийТорговымПредставителям.Идентификатор = ""АктуализацияКонтактныхДанных"")
		|			И (ВыполнениеЗаданийТП.Документ ЕСТЬ NULL )
		|			И РегистрСведенийЗаданияТП.Контрагент = ЗаданияПоАнкетированиюКлиентов.Контрагент
		|			И РегистрСведенийЗаданияТП.ШаблонАнкеты = ЗаданияПоАнкетированиюКлиентов.ШаблонАнкеты
		|			И (ЗаданияПоАнкетированиюКлиентов.ДатаНачалаАнкетирования <= РегистрСведенийЗаданияТП.Маршрут.Дата)
		|			И (РегистрСведенийЗаданияТП.Маршрут.Дата <= КОНЕЦПЕРИОДА(ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования, ДЕНЬ)
		|				ИЛИ ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования = ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АнкетаТП КАК АнкетаТП
		|		ПО (НЕ ЗаданияПоАнкетированиюКлиентов.Контрагент ЕСТЬ NULL )
		|			И РегистрСведенийЗаданияТП.Контрагент = АнкетаТП.Контрагент
		|			И РегистрСведенийЗаданияТП.ШаблонАнкеты = АнкетаТП.ШаблонАнкеты
		|			И (НЕ АнкетаТП.ПометкаУдаления)
		|			И (ЗаданияПоАнкетированиюКлиентов.ДатаНачалаАнкетирования <= АнкетаТП.Дата)
		|			И (АнкетаТП.Дата <= КОНЕЦПЕРИОДА(ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования, ДЕНЬ)
		|				ИЛИ ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	РегистрСведенийЗаданияТП.Активность
		|	И РегистрСведенийЗаданияТП.Маршрут = &Маршрут
		|	И РегистрСведенийЗаданияТП.Обязательное
		|	И АнкетаТП.Ссылка ЕСТЬ NULL 
		|	И (ВыполнениеЗаданийТП.Выполнено ЕСТЬ NULL 
		|			ИЛИ НЕ ВыполнениеЗаданийТП.Выполнено)";
		Запрос.УстановитьПараметр("Маршрут", ОбщийМодульСервер.ПолучитьАктуальныйМаршрут() );
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийЗаданияТП.ВидЗадания,
		|	РегистрСведенийЗаданияТП.Обязательное,
		|	ЕСТЬNULL(ВыполнениеЗаданийТП.Выполнено, ЛОЖЬ) КАК Выполнено
		|ИЗ
		|	РегистрСведений.ЗаданияТППоВнеплановымПосещениям КАК РегистрСведенийЗаданияТП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеЗаданийТП КАК ВыполнениеЗаданийТП
		|		ПО РегистрСведенийЗаданияТП.Маршрут = ВыполнениеЗаданийТП.Маршрут
		|			И РегистрСведенийЗаданияТП.ВидЗадания = ВыполнениеЗаданийТП.ВидЗадания
		|			И РегистрСведенийЗаданияТП.Контрагент = ВыполнениеЗаданийТП.Контрагент
		|			И РегистрСведенийЗаданияТП.Посещение = ВыполнениеЗаданийТП.Посещение
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаданийТорговымПредставителям КАК ВидыЗаданийТорговымПредставителям
		|		ПО РегистрСведенийЗаданияТП.ВидЗадания = ВидыЗаданийТорговымПредставителям.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияПоАнкетированиюКлиентов КАК ЗаданияПоАнкетированиюКлиентов
		|		ПО (ВидыЗаданийТорговымПредставителям.Идентификатор = ""Анкета""
		|				ИЛИ ВидыЗаданийТорговымПредставителям.Идентификатор = ""АктуализацияКонтактныхДанных"")
		|			И (ВыполнениеЗаданийТП.Документ ЕСТЬ NULL )
		|			И РегистрСведенийЗаданияТП.Контрагент = ЗаданияПоАнкетированиюКлиентов.Контрагент
		|			И РегистрСведенийЗаданияТП.ШаблонАнкеты = ЗаданияПоАнкетированиюКлиентов.ШаблонАнкеты
		|			И (ЗаданияПоАнкетированиюКлиентов.ДатаНачалаАнкетирования <= РегистрСведенийЗаданияТП.Маршрут.Дата)
		|			И (РегистрСведенийЗаданияТП.Маршрут.Дата <= КОНЕЦПЕРИОДА(ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования, ДЕНЬ)
		|				ИЛИ ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования = ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АнкетаТП КАК АнкетаТП
		|		ПО (НЕ ЗаданияПоАнкетированиюКлиентов.Контрагент ЕСТЬ NULL )
		|			И РегистрСведенийЗаданияТП.Контрагент = АнкетаТП.Контрагент
		|			И РегистрСведенийЗаданияТП.ШаблонАнкеты = АнкетаТП.ШаблонАнкеты
		|			И (НЕ АнкетаТП.ПометкаУдаления)
		|			И (ЗаданияПоАнкетированиюКлиентов.ДатаНачалаАнкетирования <= АнкетаТП.Дата)
		|			И (АнкетаТП.Дата <= КОНЕЦПЕРИОДА(ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования, ДЕНЬ)
		|				ИЛИ ЗаданияПоАнкетированиюКлиентов.ДатаОкончанияАнкетирования = ДАТАВРЕМЯ(1, 1, 1))
		
		|ГДЕ
		|	РегистрСведенийЗаданияТП.Активность
		|	И РегистрСведенийЗаданияТП.Посещение = &Посещение
		|	И РегистрСведенийЗаданияТП.Обязательное
		|	И АнкетаТП.Ссылка ЕСТЬ NULL 
		|	И (ВыполнениеЗаданийТП.Выполнено ЕСТЬ NULL 
		|			ИЛИ НЕ ВыполнениеЗаданийТП.Выполнено)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Посещение", Посещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат (ВыборкаДетальныеЗаписи.Количество() = 0);
	
КонецФункции

&НаСервере
Процедура НачатьПосещениеСервер(Парам)
	Док = Документы.Посещение.СоздатьДокумент();
	// Контрагент, Сотрудник, ВидПосещения будут заполнены из параметров //
	Док.Заполнить(Парам);
	Док.Дата         = ТекущаяДата();
	//Док.РабочийДень  = ОбщийМодульСервер.ПолучитьАктуальныйРабочийДень(ТекущийПользователь); 	
	Док.ДатаНачала   = ТекущаяДата();
	Док.РабочийДень  = ОбщийМодульСервер.ПолучитьАктуальныйРабочийДень(ТекущийПользователь);
	Док.ДатаДоставки = КонецДня(ТекущаяДата()) + 1;
	Док.Маршрут = ОбщийМодульСервер.ПолучитьАктуальныйМаршрут( ТекущийПользователь, Док.Дата );
	Док.ЦельПосещения = ?(Парам.Свойство("ЦельПосещения"), Парам.ЦельПосещения, "");
	
	Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	УстановитьСостояниеПосещения();
КонецПроцедуры

&НаСервере
Процедура КомандаЗавершитьПосещениеНаСервере()
	Стр               = РегистрыСведений.СостоянияПосещений.ПолучитьПоследнее();
	Док               = Стр.Посещение.ПолучитьОбъект();
	Док.ДатаОкончания = ТекущаяДата();
	Док.Завершено     = Истина;
	ЗаполнитьДатуДоставкиДляСвязанных(Док.Ссылка);
	Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	УстановитьСостояниеПосещения();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуДоставкиДляСвязанных(Посещение)
	
	ДатаДоставки = Посещение.ДатаДоставки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Посещение = &Посещение
		|	И ВозвратТоваровОтПокупателя.ДатаДоставки <> &ДатаДоставки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Посещение = &Посещение
		|	И ЗаказПокупателя.ДатаДоставки <> &ДатаДоставки";
	
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("Посещение", Посещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Док.ДатаДоставки = ДатаДоставки;
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КомандаФиксацияПоложенияНаСервере()
	Док               = Документы.ФиксацияПоложения.СоздатьДокумент();
	Док.Контрагент    = ТекКонтрагент;
	Док.Ответственный = ТекущийПользователь;
	Док.Посещение     = ОбщийМодульСервер.ПолучитьАктуальноеПосещение(ТекущийПользователь);
	Док.Дата          = ТекущаяДата();
	Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	Возврат Док.Ссылка;
КонецФункции

Процедура ПриСменеДатыДоставки(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекДатаДоставки = Результат;
		КомандаДатаДоставкиСервер();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДатаДоставки(Команда)
	Форма = ПолучитьФорму( "ОбщаяФорма.ФормаВыбораДаты", Новый Структура("ТекДатаДоставки", ТекДатаДоставки), ЭтаФорма );
	Форма.ЗакрыватьПриВыборе = Истина;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения( "ПриСменеДатыДоставки", ЭтотОбъект );
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Форма.Открыть();
	
	//Рез = ОткрытьФормуМодально("ОбщаяФорма.ФормаВыбораДаты",Новый Структура("ТекДатаДоставки",ТекДатаДоставки));
	//Если Рез <> Неопределено Тогда
	//	ТекДатаДоставки = Рез;
	//	КомандаДатаДоставкиСервер();		
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КомандаДатаДоставкиСервер()
	Док              = ТекПосещение.ПолучитьОбъект();
	Док.ДатаДоставки = ТекДатаДоставки;
	Док.Записать(РежимЗаписиДокумента.Запись);
	УстановитьСостояниеДатыДоставки();
КонецПроцедуры	

&НаСервере
Функция ЭтоСвойКонтрагент(Контрагент)
	Возврат ДополнительныеФункцииСервер.ПроверитьПринадлежностьКонтрагентаГруппе(Контрагент,Константы.ГруппаКонтрагентов_СвоиКонтрагенты.Получить());
КонецФункции	

&НаСервере
Процедура УстановитьСостояниеПосещения()
	Стр = РегистрыСведений.СостоянияПосещений.ПолучитьПоследнее();
	
	Если Стр.Завершено Тогда
		ТекПосещение  = Неопределено;
		ТекКонтрагент = Неопределено;
		ТекКонтрагентНаименование = "";
		ВидТекущегоПосещения = Перечисления.ВидыПосещений.ПустаяСсылка();
	Иначе
		ТекПосещение  = Стр.Посещение;
		ТекКонтрагент = ТекПосещение.Контрагент;
		ТекКонтрагентНаименование = ТекКонтрагент.КодПоиска + ", " + ТекКонтрагент.Наименование;
		ВидТекущегоПосещения = ТекПосещение.ВидПосещения;
	КонецЕсли;	
	
	ПосещениеАктивно = Стр.Начато И НЕ Стр.Завершено;
	
	//Если ПосещениеАктивно Тогда
	//	МаршрутВиден = Истина;
	//КонецЕсли;	
	
	Элементы.ГруппаПосещение.Видимость     = ПосещениеАктивно;
	Элементы.ГруппаРабочийДень.Видимость   = Не ПосещениеАктивно;
	Элементы.ГруппаНеотправленныеДокументы.Видимость = Не ПосещениеАктивно;
	
	Если ТекПосещение <> Неопределено И ТекПосещение.ВидПосещения = Перечисления.ВидыПосещений.ТелефонныйЗвонок Тогда
		Элементы.КомандаФото.Видимость = Ложь;
	Иначе
		Элементы.КомандаФото.Видимость = Истина;
	КонецЕсли;
	
	ТекДатаДоставки = ТекПосещение.ДатаДоставки;
	
	Элементы.КомандаЗавершитьПосещение.Заголовок = ВРег("Закончить " + ТекПосещение.ВидПосещения);
		
	УстановитьСостояниеДатыДоставки();
	ОбновитьДанныеПоОтчетам();
	РассчитатьКоличествоНеотправленныхДокументов();
	
	УстановитьОтборСпискаЗаданий();
КонецПроцедуры	

&НаСервере
Процедура УстановитьСостояниеДатыДоставки()
	Эл = Элементы.КомандаДатаДоставки;
	Если ЗначениеЗаполнено(ТекДатаДоставки) Тогда
		Эл.Заголовок = "Дата доставки: " +  ОбщийМодульСервер.ФорматДаты(ТекДатаДоставки,Истина);
		Эл.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	Иначе	
		Эл.Заголовок  = "Выберите дату доставки!";
		Эл.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	КонецЕсли;	
	ОбновитьСписокАкцийКонтрагента();
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборСпискаЗаданий()
	текМаршрут = ОбщийМодульСервер.ПолучитьАктуальныйМаршрут( ПараметрыСеанса.ТекущийПользователь, ТекПосещение.Дата );
	
	Для каждого текПараметр Из СписокЗаданий.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("Маршрут") Тогда
			текПараметр.Использование = Истина;
			текПараметр.Значение = текМаршрут;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("Контрагент") Тогда
			текПараметр.Использование = Истина;
			текПараметр.Значение = ТекКонтрагент;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ПлановоеПосещение") Тогда
			текПараметр.Использование = Истина;
			текПараметр.Значение = (ВидТекущегоПосещения = Перечисления.ВидыПосещений.ПлановоеПосещение);
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("Посещение") Тогда
			текПараметр.Использование = Истина;
			текПараметр.Значение = ТекПосещение;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода") Тогда
			текПараметр.Использование = Истина;
			текПараметр.Значение = НачалоДня(ТекущаяДата());
		КонецЕсли;
	КонецЦикла;
	
	//Для каждого текОтбор Из СписокЗаданий.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
	//	Если текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Маршрут") Тогда
	//		текОтбор.Использование = Истина;
	//		текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		текОтбор.ПравоеЗначение = текМаршрут;
	//	ИначеЕсли текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент") Тогда
	//		текОтбор.Использование = Истина;
	//		текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		текОтбор.ПравоеЗначение = ТекКонтрагент;
	//	КонецЕсли; 
	//КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокАкцийКонтрагента()
	//СписокАкций = Балмико_УправлениеАкциями.СписокАкцийКонтрагента(ТекКонтрагент,ТекДатаДоставки);
	//ЭлементыКУдалению = Новый Массив;
	//СписокОбновленных = Новый Массив;
	//Для Каждого Акция Из СписокАкций Цикл
	//	ИмяЭл = "ДекорацияАкция_" + СтрЗаменить(Строка(Акция.Значение.УникальныйИдентификатор()),"-","_");
	//	Если Элементы.ГруппаАкции.ПодчиненныеЭлементы.Найти(ИмяЭл) = Неопределено Тогда
	//		НовыйЭл = Элементы.Добавить(ИмяЭл,Тип("ДекорацияФормы"),Элементы.ГруппаАкции);
	//		НовыйЭл.Заголовок = "Акция " + Акция.Значение.НаименованиеАкции; 
	//	КонецЕсли;
	//	СписокОбновленных.Добавить(ИмяЭл);
	//КонецЦикла;	
	//ЭлементыДляУдаления = Новый Массив;
	//Для Каждого Эл Из Элементы.ГруппаАкции.ПодчиненныеЭлементы Цикл
	//	Если СписокОбновленных.Найти(Эл.Имя) = Неопределено Тогда
	//		ЭлементыДляУдаления.Добавить(Эл);
	//	КонецЕсли;	
	//КонецЦикла;	
	//Для Каждого Эл Из ЭлементыДляУдаления Цикл
	//	Элементы.Удалить(Эл);
	//КонецЦикла;		
КонецПроцедуры	

#ОБЛАСТЬ ОТЧЕТЫ

&НаСервере
Процедура ОбновитьДанныеПоОтчетам()
	// Обновим данные по отчетам //
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ДанныеПродаж.ПродажиКоличество) КАК КоличествоОборот,
	|	СУММА(ДанныеПродаж.ПродажиСумма) КАК СуммаОборот,
	|	СУММА(ДанныеПродаж.ВозвратыКоличество) КАК КоличествоВозвратОборот,
	|	СУММА(ДанныеПродаж.ВозвратыСумма) КАК СуммаВозвратОборот
	|ИЗ
	|	РегистрСведений.ОС_ДанныеПродажДляМП КАК ДанныеПродаж
	|ГДЕ
	|	ДанныеПродаж.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеВзаиморасчетов.КонечныйОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрСведений.ОС_ДанныеВзаиморасчетовДляМП КАК ДанныеВзаиморасчетов
	|ГДЕ
	|	ДанныеВзаиморасчетов.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(0) КАК СуммаОстаток
	|ИЗ
	|	РегистрСведений.ОС_ДанныеВзаиморасчетовДляМП КАК ДанныеВзаиморасчетов
	|ГДЕ
	|	ДанныеВзаиморасчетов.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаказПокупателяТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка.Посещение = &Посещение
	|	И ЗаказПокупателяТовары.Ссылка.Проведен
	|	И ЗаказПокупателяТовары.Ссылка.Посещение <> ЗНАЧЕНИЕ(Документ.Посещение.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Контрагент"     ,ТекКонтрагент);
	Запрос.УстановитьПараметр("Посещение"      ,ТекПосещение);
	РЗ = Запрос.ВыполнитьПакет();
	
	Выборка = РЗ[0].Выбрать();
	Эл = Элементы.ОтчетПродажиИВозвраты;
	Если Выборка.Следующий() Тогда
		Эл.Заголовок = "ПРОДАЖИ И ВОЗВРАТЫ: " + Выборка.СуммаОборот + " / " + Выборка.СуммаВозвратОборот + " р. ";
	Иначе
		Эл.Заголовок = "ПРОДАЖИ И ВОЗВРАТЫ: НЕТ";
	КонецЕсли;	
	
	Выборка = РЗ[1].Выбрать();
	Эл = Элементы.ОтчетВзаиморасчеты;
	Если Выборка.Следующий() Тогда
		Эл.Заголовок = "Состояние взаиморасчетов: " + Выборка.СуммаОстаток +  "р. ";
	Иначе
		Эл.Заголовок = "Состояние взаиморасчетов: Нет";
	КонецЕсли;
	
	Выборка = РЗ[2].Выбрать();
	Эл = Элементы.ОтчетПросроченныйДолг;
	Если Выборка.Следующий() Тогда
		Эл.Заголовок = "Просроченный долг: " + Выборка.СуммаОстаток + " р. ";
	Иначе
		Эл.Заголовок = "Просроченный долг: Нет";
	КонецЕсли;	
	
	Выборка = РЗ[3].Выбрать();
	Эл = Элементы.ОтчетЗаказаннаяПродукция;
	Если Выборка.Следующий() Тогда
		Эл.Заголовок = "Заказано продуктов: " + Выборка.НомерСтроки + " на сумму: " + Выборка.Сумма + " р. ";
		Эл.Видимость = Истина;
	Иначе
		Эл.Заголовок = "Заказано продуктов: Нет";
		Эл.Видимость = ЛОЖЬ;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОтчетВзаиморасчеты(Команда)
	ОткрытьФорму("Обработка.ОтчетВзаиморасчеты.Форма", Новый Структура("Контрагент",ТекКонтрагент));
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиИВозвраты(Команда)
	ОткрытьФорму("Обработка.ОтчетПродажиИВозвраты.Форма.ФормаПоНакладным", Новый Структура("Контрагент",ТекКонтрагент));
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПросроченныйДолг(Команда)
	Всп = "";
	//ОткрытьФорму("Обработка.ОтчетПросроченнаяЗадолженность.Форма", Новый Структура("Контрагент",ТекКонтрагент));
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ АКТИВНОСТИ

&НаКлиенте
Процедура ОтчетЗаказаннаяПродукция(Команда)
	ОткрытьФорму("Обработка.ОтчетЗаказаннаяПродукция.Форма.Форма",Новый Структура("Посещение",ТекПосещение));
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаказПродукции(Команда)
	Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
		Сообщить("Не выбрана дата доставки!",СтатусСообщения.Внимание);
	Иначе
		Парам = Новый Структура("Основание,Посещение",Новый Структура("Контрагент,ДатаДоставки,Посещение",ТекКонтрагент,ТекДатаДоставки,ТекПосещение));
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",Парам, ,,,,,);
		//ОкнаКП = ПолучитьОкна();
		//ОкнаКП[ОкнаКП.Количество()-1].Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВозвратТоваров(Команда)
	Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
		Сообщить("Не выбрана дата доставки!",СтатусСообщения.Внимание);
	ИначеЕсли Не Элементы.ОтчетЗаказаннаяПродукция.Видимость Тогда
		Сообщить("Нельзя оформлять возврат, если не оформлено ни одного заказа!");		
	Иначе
		Парам = Новый Структура("Основание,Посещение",Новый Структура("Контрагент,ДатаДоставки,Посещение",ТекКонтрагент,ТекДатаДоставки,ТекПосещение), ТекПосещение);
		ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта",Парам);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазмещениеПродукции(Команда)
	Всп = "";
КонецПроцедуры

&НаКлиенте
Процедура КомандаМониторингЦен(Команда)
	Парам = Новый Структура("Основание",Новый Структура("Контрагент,Посещение",ТекКонтрагент,ТекПосещение));
	ОткрытьФорму("Документ.МониторингЦен.ФормаОбъекта",Парам);
КонецПроцедуры

&НаКлиенте
Процедура КомандаАнкета(Команда)
	Основание = Новый Структура("Посещение,Контрагент",ТекПосещение,ТекКонтрагент);
	ОткрытьФорму("Документ.АнкетаТП.ФормаОбъекта", Новый Структура("Основание",Основание));
КонецПроцедуры

&НаКлиенте
Процедура КомандаФото(Команда)
	Парам = Новый Структура("Основание",Новый Структура("Контрагент, Посещение", ТекКонтрагент, ТекПосещение));
	ОткрытьФорму("Документ.Комментарий.ФормаОбъекта",Парам);
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеКомментарияПоПосещению(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("Посещение") Тогда
		
		Результат.Вставить("Посещение", ДопПараметры.Посещение);
		КомандаЗаписатьКомментарийСервер(Результат);
		
		Элементы.СписокЗаданий.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаКомментарий(Команда)
	Комментарий = ПолучитьЗаписанныйКомментарийКПосещению(ТекПосещение);
	Пар = Новый Структура;
	Пар.Вставить("Комментарий", Комментарий);
	
	ОткрытьФорму( "Документ.Посещение.Форма.ФормаКомментария", Пар, ЭтаФорма, Истина, , , Новый ОписаниеОповещения( "ПриВводеКомментарияПоПосещению", ЭтотОбъект, Новый Структура("Посещение", ТекПосещение) ),  );
	
	//Результат = ОткрытьФормуМодально("Документ.Посещение.Форма.ФормаКомментария", Пар);
	//Если Результат <> Неопределено Тогда
	//	Результат.Вставить("Посещение", ТекПосещение);
	//	КомандаЗаписатьКомментарийСервер(Результат);
	//КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаписанныйКомментарийКПосещению(СсылкаНаПосещение)
	Возврат СсылкаНаПосещение.Комментарий;
КонецФункции
	
&НаСервереБезКонтекста
Процедура КомандаЗаписатьКомментарийСервер(Парам)
	ПосещениеОбъект = Парам.Посещение.ПолучитьОбъект();	Если Ложь Тогда	ПосещениеОбъект = Документы.Посещение.СоздатьДокумент();	КонецЕсли; 
	ПосещениеОбъект.Комментарий = Парам.Комментарий;
	ПосещениеОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если Не ПустаяСтрока(Парам.Комментарий) Тогда
		
		РегистрыСведений.ВыполнениеЗаданийТП.ОтметитьВыполнениеЗаданияТП( ПосещениеОбъект.Маршрут, ПосещениеОбъект.Контрагент, "Комментарий", ПосещениеОбъект.Ссылка );
		
	Иначе
		РегистрыСведений.ВыполнениеЗаданийТП.УдалитьВыполнениеЗаданияТП( ПосещениеОбъект.Ссылка );
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаИзменениеПрофиляТорговойТочки(Команда)
	Парам = Новый Структура("Основание",Новый Структура("Контрагент,Посещение,Сотрудник",ТекКонтрагент,ТекПосещение,ТекущийПользователь));
	ОткрытьФорму("Документ.ИзменениеПрофиляТорговойТочки.ФормаОбъекта",Парам);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПостановкаНовойЗадачи(Команда)
	Всп = "";
КонецПроцедуры

&НаКлиенте
Функция ПроверитьГеопозицияДоступна( Рез = Неопределено )
	#ЕСЛИ МОБИЛЬНОЕПРИЛОЖЕНИЕКЛИЕНТ ТОГДА
		Попытка
			Координаты = ОбщийМодульСервер.ПолучитьТекущиеКоординатыСервер();
			Рез = ОбщийМодульСервер.МэппингСтруктурКоординатСервер(Координаты);
		Исключение 
			ОбщийМодульКлиент.УстановитьИЗапуститьСлужбу();
			Координаты = ОбщийМодульСервер.ПолучитьТекущиеКоординатыСервер();
			Рез = ОбщийМодульСервер.МэппингСтруктурКоординатСервер(Координаты);
		КонецПопытки;
		
		Если Координаты = Неопределено Тогда
			Возврат Ложь;
		Иначе
			//Рез = ОбщийМодульСервер.МэппингСтруктурКоординатСервер(Координаты);
			Возврат Рез.gpsВключен;
		КонецЕсли;	
	#ИНАЧЕ
		Возврат ЛОЖЬ;
	#КОНЕЦЕСЛИ
КонецФункции	

&НаСервере
Процедура КомандаОтменитьПосещениеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Посещение = &Посещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Посещение = &Посещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументКомментарий.Ссылка
	|ИЗ
	|	Документ.Комментарий КАК ДокументКомментарий
	|ГДЕ
	|	ДокументКомментарий.Посещение = &Посещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МониторингЦен.Ссылка
	|ИЗ
	|	Документ.МониторингЦен КАК МониторингЦен
	|ГДЕ
	|	МониторингЦен.Посещение = &Посещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СнятиеОстатков.Ссылка
	|ИЗ
	|	Документ.СнятиеОстатков КАК СнятиеОстатков
	|ГДЕ
	|	СнятиеОстатков.Посещение = &Посещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГеоКоординаты.Сотрудник,
	|	ГеоКоординаты.Документ,
	|	ГеоКоординаты.Период
	|ИЗ
	|	РегистрСведений.ГеоКоординаты КАК ГеоКоординаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ГеоКоординаты.Документ = ВТ_Документы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОС_Логи.Объект,
	|	ОС_Логи.НаправлениеОбмена
	|ИЗ
	|	РегистрСведений.ОС_Логи КАК ОС_Логи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ОС_Логи.Объект = ВТ_Документы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОС_ПрисоединенныеФайлы.СсылкаНаОбъект,
	|	ОС_ПрисоединенныеФайлы.ИдентификаторФайла
	|ИЗ
	|	РегистрСведений.ОС_ПрисоединенныеФайлы КАК ОС_ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ОС_ПрисоединенныеФайлы.СсылкаНаОбъект = ВТ_Документы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполнениеЗаданийТП.Маршрут,
	|	ВыполнениеЗаданийТП.ВидЗадания,
	|	ВыполнениеЗаданийТП.Контрагент
	|ИЗ
	|	РегистрСведений.ВыполнениеЗаданийТП КАК ВыполнениеЗаданийТП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ВыполнениеЗаданийТП.Документ = ВТ_Документы.Ссылка";
	
	Запрос.УстановитьПараметр("Посещение", ТекПосещение);
	
	РЗ = Запрос.ВыполнитьПакет();
	
	Выборка = РЗ[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	Выборка = РЗ[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ГеоКоординаты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Удалить();
	КонецЦикла;
	Выборка = РЗ[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ОС_Логи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Удалить();
	КонецЦикла;
	Выборка = РЗ[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ОС_ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Удалить();
	КонецЦикла;
	Если РЗ.Количество() > 5 Тогда
		Выборка = РЗ[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			МЗ = РегистрыСведений.ВыполнениеЗаданийТП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			МЗ.Удалить();
		КонецЦикла;
	КонецЕсли; 

	ТекПосещение.ПолучитьОбъект().Удалить();
	УстановитьСостояниеПосещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииОтменыПосещения(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		КомандаОтменитьПосещениеНаСервере();		
		//НачатьАвтоОбмен();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьПосещение(Команда)
	
	ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииОтменыПосещения", ЭтотОбъект), "Вы уверены, что хотите отменить посещение?" + Символы.ПС + "Все события этого посещения будут удалены.",РежимДиалогаВопрос.ДаНет,,,"Отмена посещения" );
	
	//Ответ = Вопрос("Вы уверены, что хотите отменить посещение?" + Символы.ПС + "Все события этого посещения будут удалены.",РежимДиалогаВопрос.ДаНет,,,"Отмена посещения");
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	КомандаОтменитьПосещениеНаСервере();		
	//	//НачатьАвтоОбмен();
	//КонецЕсли;
	
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ЭМУЛЯЦИЯ 

&НаКлиенте
Процедура НачатьЭмуляцию(Команда)
	мПериод = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ОС_ПериодичностьВводаДокументов");
	Если НЕ ЗначениеЗаполнено(мПериод) Тогда
		мПериод = 5;
	КонецЕсли;		
	ПодключитьОбработчикОжидания("ЭмуляцияСозданияДокументов",мПериод);
	
	мПериод = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ОС_ПериодичностьАвтообмена");
	Если НЕ ЗначениеЗаполнено(мПериод) Тогда
		мПериод = 600;
	КонецЕсли;		      
	ПодключитьОбработчикОжидания("ЭмуляцияОбмена",мПериод,Истина);
	
	Элементы.НачатьЭмуляцию.Доступность    = ЛОЖЬ;
	Элементы.ЗакончитьЭмуляцию.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЭмуляцияСозданияДокументов()
	Попытка
		ЭмуляцияСервер.СоздатьДокументы();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЭмуляцияОбмена()
	ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СделатьОбмен");
	мПериод = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ОС_ПериодичностьАвтообмена");
	Если НЕ ЗначениеЗаполнено(мПериод) Тогда
		мПериод = 600;
	КонецЕсли;		      
	ПодключитьОбработчикОжидания("ЭмуляцияОбмена",мПериод,Истина);
КонецПроцедуры	

&НаКлиенте
Процедура ЗакончитьЭмуляцию(Команда)
	ОтключитьОбработчикОжидания("ЭмуляцияСозданияДокументов");
	ОтключитьОбработчикОжидания("ЭмуляцияОбмена");
	Элементы.НачатьЭмуляцию.Доступность    = Истина;
	Элементы.ЗакончитьЭмуляцию.Доступность = Ложь;
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ АВТОООБМЕН

&НаКлиенте
Процедура НачатьАвтоОбмен()
	мПериод = ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ОС_ПериодичностьАвтообмена");
	Если НЕ ЗначениеЗаполнено(мПериод) Тогда
		мПериод = 600;
	КонецЕсли;		      
	ПодключитьОбработчикОжидания("ЭмуляцияОбмена",мПериод,Истина);
	КомандаСинхронизация(Неопределено);
КонецПроцедуры	

&НаКлиенте
Процедура ЗавершитьАвтообмен()
	//Если ЗначениеЗаполнено(ИДСинхронизации) Тогда
	//	ФоновыеЗаданияСервер.ОтменитьВыполнениеЗадания(ИДСинхронизации);
	//КонецЕсли;	
	ОтключитьОбработчикОжидания("ЭмуляцияОбмена");
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СПИСОККОНТРАГЕНТОВ

&НаСервере
Процедура ОбновитьСписокКонтрагентов()
	// Настройка и установка списка отбора контрагентов, установка условного оформления
	ДополнительныеФункцииСервер.ЗапросДляОтбораКонтрагентов(ЭтаФорма);	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаНайтиКлиента(Команда)
	ОтборКлиентовСервер(ПоискКлиента);
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентаПриИзменении(Элемент)
	ОтборКлиентовСервер(ПоискКлиента);
КонецПроцедуры

&НаСервере
Процедура ОтборКлиентовСервер(Знач Текст)
	Отбор = СписокКлиентов.Отбор.Элементы;

	ТекГруппа = Неопределено;
	
	Для Каждого Эл Из Отбор Цикл
		Если ТипЗнч(Эл) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекГруппа = Эл;
		КонецЕсли;	
	КонецЦикла;
	
	Если ТекГруппа = Неопределено Тогда
		ТекГруппа               = Отбор.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ТекГруппа.Использование = Истина;
		ТекГруппа.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	КонецЕсли;	
	
	СписокПолей = Новый Массив;
	СписокПолей.Добавить("Наименование");
	СписокПолей.Добавить("КодПоиска");
	
	Для Каждого ИмяПоля Из СписокПолей Цикл
		ТекПоле   = Неопределено;
		
		Для Каждого Эл Из ТекГруппа.Элементы Цикл
			Если Строка(Эл.ЛевоеЗначение) = ИмяПоля Тогда
				ТекПоле = Эл;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТекПоле = Неопределено Тогда
			ТекПоле                = ТекГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекПоле.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
			ТекПоле.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Текст) Тогда
			ТекПоле.ПравоеЗначение = "";
			ТекПоле.Использование  = Ложь;
		Иначе
			ТекПоле.ПравоеЗначение = Текст;
			ТекПоле.Использование  = Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьГруппировкуКлиентов()
	ИДПриоритета = Формат(ТекГруппаКлиентов.Приоритет,"ЧН=0; ЧГ=0") + "_" + ТекГруппаКлиентов.Код;
	Отбор = СписокКлиентов.Отбор.Элементы;
	Отбор.Очистить();
	Если Не ЗначениеЗаполнено(ТекГруппаКлиентов.Код) Тогда
		Возврат;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекГруппаКлиентов) Тогда
		Эл                = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПринадлежитГруппе" + ИДПриоритета);
		Эл.ПравоеЗначение = Истина;
		Эл.Использование  = Истина;
		Элементы.НадписьКоличествоКлиентов.Заголовок = "Всего: " + ТекГруппаКлиентов.ВсегоКлиентов;
		Элементы.ГруппировкаКлиентов.Заголовок = ТекГруппаКлиентов.Наименование;
	КонецЕсли;
	
	Если СокрЛП(ТекГруппаКлиентов) = "Клиенты по маршруту" Тогда
		Для каждого текПорядок Из СписокКлиентов.Порядок.Элементы Цикл
			Если текПорядок.Поле = Новый ПолеКомпоновкиДанных("НомерПосещения") Тогда
				текПорядок.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого текЭлемент Из СписокКлиентов.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = СписокКлиентов.Порядок.ИдентификаторПользовательскойНастройки Тогда
				Для каждого текПорядок Из текЭлемент.Элементы Цикл
					Если текПорядок.Поле = Новый ПолеКомпоновкиДанных("НомерПосещения") Тогда
						текПорядок.Использование = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Элементы.СписокКлиентовНомерПосещения.Видимость = Истина;
		Элементы.СписокКлиентовНомерПосещения.Ширина = 8;
		Элементы.СписокКлиентовНомерПосещения.АвтоМаксимальнаяШирина = Ложь;
		Элементы.СписокКлиентовНомерПосещения.РастягиватьПоГоризонтали = Ложь;
	Иначе
		Для каждого текПорядок Из СписокКлиентов.Порядок.Элементы Цикл
			Если текПорядок.Поле = Новый ПолеКомпоновкиДанных("НомерПосещения") Тогда
				текПорядок.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого текЭлемент Из СписокКлиентов.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если текЭлемент.ИдентификаторПользовательскойНастройки = СписокКлиентов.Порядок.ИдентификаторПользовательскойНастройки Тогда
				Для каждого текПорядок Из текЭлемент.Элементы Цикл
					Если текПорядок.Поле = Новый ПолеКомпоновкиДанных("НомерПосещения") Тогда
						текПорядок.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Элементы.СписокКлиентовНомерПосещения.Видимость = Ложь;
	КонецЕсли;
	
	ОтборКлиентовСервер(ПоискКлиента);
КонецПроцедуры	

&НаКлиенте
Процедура КомандаОчиститьПоиск(Команда)
	ПоискКлиента = "";
	ОтборКлиентовСервер(ПоискКлиента);
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ИСТОРИЯ

&НаКлиенте
Процедура КомандаИсторияМаршрутов(Команда)
	ОткрытьФорму("ЖурналДокументов.ЗаказыИВозвраты.Форма.ФормаСпискаИстория");
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсторияЗаказов(Команда)
	ОткрытьФорму("ЖурналДокументов.ЗаказыИВозвраты.Форма.ФормаСпискаРедактируемая");
КонецПроцедуры

&НаКлиенте
Процедура КомандаВведенныеЗаказыИВозвраты(Команда)
	ОткрытьФорму("ЖурналДокументов.ЗаказыИВозвраты.Форма.ФормаСпискаРедактируемая",Новый Структура("Посещение",ТекПосещение));
КонецПроцедуры

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СИНХРОНИЗАЦИЯ

&НаКлиенте
Процедура КомандаСинхронизация(Команда)
	Если ЗначениеЗаполнено(ИДСинхронизации) И ИмяПроцедурыСинхронизации = "ФоновыеЗаданияСервер.СинхронизироватьКоординаты" Тогда
		ФоновыеЗаданияСервер.ОтменитьВыполнениеЗадания(ИДСинхронизации);
		ИДСинхронизации           = Неопределено;
		ИмяПроцедурыСинхронизации = "";
	КонецЕсли; 
	ИмяПроцедуры = "ФоновыеЗаданияСервер.СделатьОбмен";
	ОбработчикНачалаСинхронизации(ИмяПроцедуры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачалаСинхронизации(ИмяПроцедуры)
	Если ЗначениеЗаполнено(ИмяПроцедурыСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	//СписокЗаданийДляПроверки = Новый Массив;
	//СписокЗаданийДляПроверки.Добавить("ФоновыеЗаданияСервер.СделатьОбмен");
	//СписокЗаданийДляПроверки.Добавить("ФоновыеЗаданияСервер.СинхронизироватьКоординаты");
	//
	Если ИмяПроцедуры = "ФоновыеЗаданияСервер.СделатьОбмен" Тогда
		СтрокиСостояния = Новый Структура("ОписаниеПроцесса,ОписаниеЗавершения,ОписаниеЗавершенияСОшибкой,Суффикс,НеОбновлятьФорму","Загрузка на сервер: ","Синхронизировано: ","Ошибка: ",""             , Ложь);
	ИначеЕсли ИмяПроцедуры = "ФоновыеЗаданияСервер.СинхронизироватьКоординаты" Тогда
		СтрокиСостояния = Новый Структура("ОписаниеПроцесса,ОписаниеЗавершения,ОписаниеЗавершенияСОшибкой,Суффикс,НеОбновлятьФорму","Положение: "         ,"Положение: "       ,"Ошибка: ","Геокоординаты", Истина);
	КонецЕсли;	
	
	ИмяПроцедурыСинхронизации = ИмяПроцедуры;
	
	//ФоновыеЗаданияКлиент.ОбработчикНачалаСинхронизации(ЭтаФорма,ИмяПроцедуры,,СписокЗаданийДляПроверки);	
	ФоновыеЗаданияКлиент.ОбработчикНачалаСинхронизации(ЭтаФорма,ИмяПроцедуры);	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработчикОбновленияСостоянияСинхронизации()
	ФоновыеЗаданияКлиент.ОбработчикОбновленияСостоянияСинхронизации(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИДСинхронизации) Тогда
		ОбновлениеПослеСинхронизации();
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПриПодтвержденииОбновления(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат <> "Отмена" Тогда
		ТипПроцессора = Результат;
		
		Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Рез   = ОбщийМодульСервер.ОбновитьКонфигурацию(Адрес, ТипПроцессора);
		Если Рез.Успех Тогда
			ДД   = ПолучитьИзВременногоХранилища(Адрес);
			Путь = КаталогВременныхФайлов() + "update.apk";
			Если ДД = Неопределено Тогда
				ОбработкаОшибкиКлиент("Файл обновлений не загружен!");
				Возврат;
			КонецЕсли;	
			ДД.Записать(Путь);
			ЗапуститьПриложение(Путь);
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОбменаНажатие(Элемент)
	Если Найти(Элемент.Заголовок,"требуется обновление") > 0 Тогда
		ТипПроцессора = ОбщийМодульСервер.ОпределитьТипПроцессора();
		Если ТипПроцессора = Неопределено Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("arm");
			Список.Добавить("x86");
			Список.Добавить("Отмена");
			ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииОбновления", ЭтотОбъект), "Выберите ваш тип процессора", Список, 15, "Отмена", "Обновление приложения", "Отмена");
			
			//Ответ  = Вопрос("Выберите ваш тип процессора",Список,15,"Отмена","Обновление приложения","Отмена");
			//Если Ответ <> Неопределено И Ответ <> "Отмена" Тогда
			//	ТипПроцессора = Ответ;
			//Иначе
			//	Возврат;
			//КонецЕсли;
		КонецЕсли;
		////ОбщийМодульКлиент.ОбновитьКонфигурацию(ТипПроцессора);
		//Адрес = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
		//Рез   = ОбщийМодульСервер.ОбновитьКонфигурацию(Адрес,ТипПроцессора);
		//Если Рез.Успех Тогда
		//	ДД   = ПолучитьИзВременногоХранилища(Адрес);
		//	Путь = КаталогВременныхФайлов() + "update.apk";
		//	Если ДД = Неопределено Тогда
		//		ОбработкаОшибкиКлиент("Файл обновлений не загружен!");
		//		Возврат;
		//	КонецЕсли;	
		//	ДД.Записать(Путь);
		//	ЗапуститьПриложение(Путь);
		//КонецЕсли;	
	Иначе	
		ОткрытьФорму("Обработка.ОбработкаОшибокНаКлиенте.Форма.Форма",Новый Структура("ТекстОшибки",ТекстОшибки));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеПослеСинхронизации()  Экспорт
	
	ОтключитьОбработчикОжидания("ОбработчикОбновленияСостоянияСинхронизации");
	
	Если ИмяПроцедурыСинхронизации = "ФоновыеЗаданияСервер.СделатьОбмен" Тогда
		ОбновлениеПослеСинхронизацииСервер();
	ИначеЕсли  ИмяПроцедурыСинхронизации = "ФоновыеЗаданияСервер.СинхронизироватьКоординаты" Тогда 	
		ОбновитьСостояниеGPS();
	КонецЕсли;
	ИмяПроцедурыСинхронизации = "";
	
КонецПроцедуры	

&НаСервере
Процедура ОбновлениеПослеСинхронизацииСервер()
	НаименованиеОрганизации = Константы.НаименованиеОрганизации.Получить();
	ИД                      = Константы.ИдентификаторУстройства.Получить();
	ТекущийПользователь     = Константы.ТекущийПользователь.Получить();
	Если Не ЗначениеЗаполнено(ТекГруппаКлиентов) Тогда
		ТекГруппаКлиентов = Константы.ГруппаКонтрагентов_ВсеКонтрагенты.Получить();
	КонецЕсли;	
	Элементы.ТекущийПользовательФизЛицо.ОбновитьТекстРедактирования();
	НаименованиеОрганизации = Константы.НаименованиеОрганизации.Получить();
	ОбновитьСоставОповещений();
	ОбновитьСоставПланов();
	УстановитьТекущуюТерриторию();
	
	ДатаПоследнейСинхронизации = Константы.ДатаПоследнейСинхронизации.Получить();
	ДатаВремя = "Последняя удачная синхронизация: " + ДатаПоследнейСинхронизации;
	
	РазностьДат = ТекущаяДата() - ДатаПоследнейСинхронизации;
	Если РазностьДат > 3600 Тогда
		ЦветФона = Новый Цвет(255,240,240);
	Иначе
		ЦветФона = Новый Цвет(240,255,240);
	КонецЕсли;
	
	Если Элементы.ДатаВремя.ЦветФона <> ЦветФона Тогда
		Элементы.ДатаВремя.ЦветФона  = ЦветФона;
	КонецЕсли;	     
	
	мТекущаяВерсия    = Константы.ВерсияКонфигурации.Получить();
	мАктуальнаяВерсия = Константы.ОС_АктуальнаяВерсияМП.Получить();
	мЗаголовок        = "Версия : " + Константы.ВерсияКонфигурации.Получить();
	
	Если СинхронизацияСервер.ТребуетсяОбновление(мТекущаяВерсия,мАктуальнаяВерсия) Тогда
		мЗаголовок   = мЗаголовок + " требуется обновление";
		мГиперссылка = Истина;
		мЦветФона     = WebЦвета.Розовый;
	Иначе 	
		мГиперссылка = Ложь;
		мЦветФона     = WebЦвета.СветлоЗеленый;
	КонецЕсли;	
	
	Если Элементы.ДекорацияСостояниеОбмена.Заголовок <> мЗаголовок Тогда 
		Элементы.ДекорацияСостояниеОбмена.Заголовок = мЗаголовок;
	КонецЕсли;
	
	Если Элементы.ДекорацияСостояниеОбмена.ЦветФона <> мЦветФона Тогда 
		Элементы.ДекорацияСостояниеОбмена.ЦветФона = мЦветФона;
	КонецЕсли;
	
	Если Элементы.ДекорацияСостояниеОбмена.Гиперссылка <> мГиперссылка Тогда 
		Элементы.ДекорацияСостояниеОбмена.Гиперссылка = мГиперссылка;
	КонецЕсли;
	
	РассчитатьКоличествоНеотправленныхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Ответ = Вопрос("Завершить работу с программой?",РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Нет);
	//Если Ответ <> КодВозвратаДиалога.Да Тогда
	//	Отказ = Истина;
	//Иначе
	//	ЗавершитьРаботуСистемы(ЛОЖЬ);
	//КонецЕсли;
	Всп = "";
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленоДокументовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПросмотрЗарегистрированныхИзменений.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеотправленоДокументовНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПросмотрЗарегистрированныхИзменений.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСегодняшнихЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ФормаИсторииЗаказов", Новый Структура("ВыводимаяИнформация",Элементы.ИсторияСегодняшнихЗаказов.ТекущиеДанные.Вид));
КонецПроцедуры

&НаКлиенте
Процедура ПослеФотографированияФасада(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеФотографированияФотоПолкиДоМерчендайзинга(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеФотографированияФотоПолкиПослеМерчендайзинга(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗаказа(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаВозврата(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеСнятияОстатков(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАнкеты(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПредЗаказа(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеМерчендайзинга(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеМаркетинговойАктивности(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеКомментария(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Результат.Вставить("Посещение", ДопПараметры.Посещение);
		КомандаЗаписатьКомментарийСервер(Результат);
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ПослеВводаКомментарияПоКонтрагенту(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСобытияПоКонтрагенту(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	КонецЕсли;
	Элементы.СписокЗаданий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.СписокЗаданий.ТекущиеДанные = Неопределено Тогда
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ФотоФасада") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФасада", ЭтотОбъект ),  );
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
			,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоФасада"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
			НоваяФорма = ОткрытьФорму("Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФасада", ЭтотОбъект ), );
			НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
			//НоваяФорма.ОписаниеОповещенияОЗакрытии
		КонецЕсли;
		НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		НоваяФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ФотоПолкиДоМерчендайзинга") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФотоПолкиДоМерчендайзинга", ЭтотОбъект ),  );
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
			,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПолкиДоМерчендайзинга"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
			НоваяФорма = ОткрытьФорму("Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФотоПолкиДоМерчендайзинга", ЭтотОбъект ),  );
			НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		КонецЕсли;
		НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("Мерчендайзинг") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеМерчендайзинга", ЭтотОбъект ),  );
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
			,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПрочее"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
			НоваяФорма = ОткрытьФорму("Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеМерчендайзинга", ЭтотОбъект ),  );
			НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		КонецЕсли;
		НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ФотоПолкиПослеМерчендайзинга") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФотоПолкиПослеМерчендайзинга", ЭтотОбъект ), );
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
			,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПолкиДоМерчендайзинга"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
			НоваяФорма = ОткрытьФорму("Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеФотографированияФотоПолкиПослеМерчендайзинга", ЭтотОбъект ), );
			НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		КонецЕсли;
		НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("СнятиеОстатков") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.СнятиеОстатков.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеСнятияОстатков", ЭтотОбъект ), );
		Иначе
			Парам = Новый Структура("Основание"
			,	Новый Структура("Контрагент, Посещение", ТекКонтрагент, ТекПосещение) );
			НоваяФорма = ОткрытьФорму("Документ.СнятиеОстатков.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеСнятияОстатков", ЭтотОбъект ), );
			НоваяФорма.Объект.Контрагент = ТекКонтрагент;
			НоваяФорма.Объект.Посещение = ТекПосещение;
		КонецЕсли;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("Заказ") Тогда
		Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
			Сообщить("Не выбрана дата доставки!", СтатусСообщения.Внимание);
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, ДатаДоставки, Посещение", ТекКонтрагент, ТекДатаДоставки, ТекПосещение));
			ОткрытьФорму( "Документ.ЗаказПокупателя.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаЗаказа", ЭтотОбъект ) );
		КонецЕсли;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("МаркетинговаяАктивность") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеМаркетинговойАктивности", ЭтотОбъект ), );
		Иначе
			Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
			,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПрочее"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
			НоваяФорма = ОткрытьФорму("Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеМаркетинговойАктивности", ЭтотОбъект ), );
			НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		КонецЕсли;
		НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("Анкета") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.АнкетаТП.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаАнкеты", ЭтотОбъект ), );
		Иначе
			Парам = Новый Структура( "Контрагент,Посещение,ШаблонАнкеты", ТекКонтрагент, ТекПосещение, Элементы.СписокЗаданий.ТекущиеДанные.ШаблонАнкеты );
			НоваяФорма = ОткрытьФорму( "Документ.АнкетаТП.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаАнкеты", ЭтотОбъект ), );
			//НоваяФорма.Объект.Контрагент = ТекКонтрагент;
			//НоваяФорма.Объект.Посещение = ТекПосещение;
		КонецЕсли;
		НоваяФорма.Элементы.ШаблонАнкеты.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("Возврат") Тогда
		Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
			Сообщить("Не выбрана дата доставки!", СтатусСообщения.Внимание);
		ИначеЕсли Не Элементы.ОтчетЗаказаннаяПродукция.Видимость Тогда
			Сообщить("Нельзя оформлять возврат, если не оформлено ни одного заказа!");
		Иначе
			//Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			//	НоваяФорма = ПолучитьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ));
			//Иначе
				Парам = Новый Структура("Основание", Новый Структура("Контрагент, ДатаДоставки, Посещение", ТекКонтрагент, ТекДатаДоставки, ТекПосещение));
				НоваяФорма = ОткрытьФорму( "Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаВозврата", ЭтотОбъект ), );
				НоваяФорма.Объект.Контрагент = ТекКонтрагент;
				НоваяФорма.Объект.ДатаДоставки = ТекДатаДоставки;
				НоваяФорма.Объект.Посещение = ТекПосещение;
			//КонецЕсли;
			НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("АктуализацияКонтактныхДанных") Тогда
		Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			НоваяФорма = ОткрытьФорму( "Документ.АнкетаТП.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаАнкеты", ЭтотОбъект ), );
		Иначе
			Парам = Новый Структура( "Контрагент,Посещение,ШаблонАнкеты", ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ШаблонАнкетыДляТППолучитьПредопределенныйЭлемент("АктуализацияКонтактныхДанных") );
			НоваяФорма = ОткрытьФорму("Документ.АнкетаТП.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаАнкеты", ЭтотОбъект ), );
		КонецЕсли;
		НоваяФорма.Элементы.ШаблонАнкеты.ТолькоПросмотр = Истина;
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("Комментарий") Тогда
		//ПредопределенноеЗначение("Справочник.ВидыЗаданийТорговымПредставителям.Комментарий") Тогда
		
		//Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
		//	НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ), ЭтаФорма, , , , Новый ОписаниеОповещения( "ПриВводеКомментария", ЭтотОбъект ), );
		//Иначе
		//	Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания"
		//	,		ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПрочее"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
		//	НоваяФорма = ОткрытьФорму( "Документ.Комментарий.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПриВводеКомментария", ЭтотОбъект ), );
		//	НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		//КонецЕсли;
		
		//++PSV 02.06.17
		//Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
		НоваяФорма = ОткрытьФорму("Документ.Посещение.Форма.ФормаКомментария", Новый Структура("Ссылка", ТекПосещение), ЭтаФорма, , , , Новый ОписаниеОповещения("ПриВводеКомментария", ЭтотОбъект, Новый Структура("Посещение", ТекПосещение)), );
		//Иначе
		//	Парам = Новый Структура("Основание", Новый Структура("Контрагент, Посещение, ВидКомментария, ВидЗадания", ТекКонтрагент, ТекПосещение, ОбщийМодульПовтИсп.ВидыКомментариевПолучитьПредопределенныйЭлемент("ФотоПрочее"), Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания ) );
		//	НоваяФорма = ОткрытьФорму("Документ.Посещение.ФормаКомментария", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения("ПриВводеКомментария", ЭтотОбъект ), );
		//	НоваяФорма.Объект.ВидЗадания = Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания;
		//КонецЕсли;
		//НоваяФорма.Элементы.ВидКомментария.ТолькоПросмотр = Истина;
		//НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		//Комментарий = ПолучитьЗаписанныйКомментарийКПосещению(ТекПосещение);
		//Пар = Новый Структура;
		//Пар.Вставить("Комментарий", Комментарий);
		//
		//Форма = ПолучитьФорму( "Документ.Посещение.Форма.ФормаКомментария", Пар, ЭтаФорма );
		//Форма.ЗакрыватьПриВыборе = Истина;
		//Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
		//Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения( "ПриВводеКомментарияПоПосещению", ЭтотОбъект, Новый Структура("Посещение", ТекПосещение) );
		//Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		//Форма.Открыть();
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ПредварительныйЗаказ") Тогда
		//ПредопределенноеЗначение("Справочник.ВидыЗаданийТорговымПредставителям.ПредварительныйЗаказ") Тогда
		Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
			Сообщить("Не выбрана дата доставки!", СтатусСообщения.Внимание);
		Иначе
			//Если ЗначениеЗаполнено(Элементы.СписокЗаданий.ТекущиеДанные.Документ) Тогда
			//	НоваяФорма = ПолучитьФорму( "Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("Ссылка", Элементы.СписокЗаданий.ТекущиеДанные.Документ) );
			//Иначе
				Парам = Новый Структура("Основание", Новый Структура("Контрагент, ДатаДоставки, Посещение", ТекКонтрагент, ТекДатаДоставки, ТекПосещение));
				НоваяФорма = ОткрытьФорму( "Документ.ЗаказПокупателя.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаПредЗаказа", ЭтотОбъект ), );
				НоваяФорма.Объект.ПредЗаказ = Истина;
			//КонецЕсли;
			НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("РекомендованныйЗаказ") Тогда
		//ПредопределенноеЗначение("Справочник.ВидыЗаданийТорговымПредставителям.РекомендованныйЗаказ") Тогда
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ДобавитьКомментарийПоТорговойТочке") Тогда
		ПередаваемыеПараметры = Новый Структура("Контрагент,ТорговыйПредставитель", ТекКонтрагент, ОбщийМодульПовтИсп.ПолучитьФизЛицоТекущегоПользователя());
		Если ПроверитьНаличиеКомментарияПоКлиенту( ПередаваемыеПараметры ) Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить( ПередаваемыеПараметры );
			КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.КомментарииПоКонтрагентам", МассивПараметров);
			ПередаваемыеПараметры.Вставить("Ключ", КлючЗаписиРегистра);
		КонецЕсли;
		ПередаваемыеПараметры.Вставить("РежимОткрытия", "ДляВводаЗначения");
		ПередаваемыеПараметры.Вставить("Посещение", ТекПосещение);
		ОткрытьФорму("РегистрСведений.КомментарииПоКонтрагентам.ФормаЗаписи", ПередаваемыеПараметры, , , , , Новый ОписаниеОповещения("ПослеВводаКомментарияПоКонтрагенту", ЭтотОбъект) );
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ВвестиДатуСледующегоПосещения") Тогда
		ПередаваемыеПараметры = Новый Структура("Период,Контрагент,ТорговыйПредставитель", ТекущаяДата(), ТекКонтрагент, ОбщийМодульПовтИсп.ПолучитьФизЛицоТекущегоПользователя());
		Если ПроверитьНаличиеСобытияПоКлиенту( ПередаваемыеПараметры ) Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить( ПередаваемыеПараметры );
			КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.СобытияПоКонтрагентам", МассивПараметров);
			ПередаваемыеПараметры.Вставить("Ключ", КлючЗаписиРегистра);
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.СобытияПоКонтрагентам.ФормаЗаписи", ПередаваемыеПараметры, , , , , Новый ОписаниеОповещения("ПослеВводаСобытияПоКонтрагенту", ЭтотОбъект));
		
	ИначеЕсли Элементы.СписокЗаданий.ТекущиеДанные.ВидЗадания = ОбщийМодульПовтИсп.ВидыЗаданийТорговымПредставителямПолучитьПредопределенныйЭлемент("ЗаказНаБонусЗаВозврат") Тогда
		ПередаваемыеПараметры = Новый Структура("Дата,Контрагент,ТорговыйПредставитель", ТекущаяДата(), ТекКонтрагент, ОбщийМодульПовтИсп.ПолучитьФизЛицоТекущегоПользователя());
		ПроверитьСоздатьЗаказНаБонусЗаВозврат( ПередаваемыеПараметры );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииВводаБонусаБезВозврата(Результат, Парам) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		НоваяФорма = ОткрытьФорму( "Документ.ЗаказПокупателя.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаПредЗаказа", ЭтотОбъект ), );
		Попытка
			НоваяФорма.Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ЗаказНаОтгрузкуБонусаПоВозвратам");
			НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоздатьЗаказНаБонусЗаВозврат( Параметры )
	
	Если Не ЗначениеЗаполнено(ТекДатаДоставки) Тогда
		Сообщить("Не выбрана дата доставки!", СтатусСообщения.Внимание);
	Иначе
		Парам = Новый Структура("Основание", Новый Структура("Контрагент, ДатаДоставки, Посещение, ВидЗаказа, ВидДокумента"
		,		ТекКонтрагент, ТекДатаДоставки, ТекПосещение, ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ЗаказНаОтгрузкуБонусаПоВозвратам")
		,		ПредопределенноеЗначение("Перечисление.ВидыЗаказа.ОсновнойЗаказ") ) );
		
		Сум = РассчитатьДопустимуюСуммаЗаказаНаБонусЗаВозврат(Параметры);
		Если Сум > 10 Тогда
			НоваяФорма = ОткрытьФорму( "Документ.ЗаказПокупателя.ФормаОбъекта", Парам, ЭтаФорма, , , , Новый ОписаниеОповещения( "ПослеВводаПредЗаказа", ЭтотОбъект ), );
			Попытка
				НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
			Исключение
			КонецПопытки;
		ИначеЕсли Сум = -1 Тогда
			ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииВводаБонусаБезВозврата", ЭтаФорма, Парам), "Вы уверены, что хотите добавить заказ на товарный бонус при отсутствии основного заказа?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
			//ПоказатьПредупреждение(, "Нельзя добавить заказ на товарный бонус, если нет основного заказа.");
		ИначеЕсли Сум = 0 Тогда
			ПоказатьПредупреждение(, "Нельзя добавить заказ на товарный бонус, если основной заказ меньше " + Формат(ОбщийМодульСервер.ПолучитьЗначениеКонстанты("МинимальнаяСуммаЗаказа"), "ЧДЦ=2") + " руб.");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДопустимуюСуммаЗаказаНаБонусЗаВозврат( Параметры )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.Контрагент,
	|	СУММА(Данные.СуммаДокумента) КАК СуммаДокумента,
	|	МАКСИМУМ(Данные.ЕстьЗаказ) КАК ЕстьЗаказ
	|ПОМЕСТИТЬ СуммаЗаказов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Контрагент КАК Контрагент,
	|		СУММА(ЗаказПокупателя.СуммаДокумента) КАК СуммаДокумента,
	|		ИСТИНА КАК ЕстьЗаказ
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Дата >= &Дата
	|		И ЗаказПокупателя.Проведен
	|		И ЗаказПокупателя.ВидЗаказа = ЗНАЧЕНИЕ(Перечисление.ВидыЗаказов.ОбычныйЗаказ)
	|		И ЗаказПокупателя.Контрагент = &Контрагент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Контрагент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Контрагент,
	|		0,
	|		ЛОЖЬ) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистры.Контрагент,
	|	Регистры.ВидТоварногоБонуса,
	|	СУММА(ВЫБОР
	|			КОГДА СуммаЗаказов.ЕстьЗаказ
	|					И СуммаЗаказов.СуммаДокумента < &МинСуммаЗаказа
	|				ТОГДА 0
	|			ИНАЧЕ Регистры.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	МАКСИМУМ(СуммаЗаказов.ЕстьЗаказ) КАК ЕстьЗаказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварныйБонусКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|		ТоварныйБонусКонтрагентовСрезПоследних.ВидТоварногоБонуса КАК ВидТоварногоБонуса,
	|		ТоварныйБонусКонтрагентовСрезПоследних.Сумма КАК Сумма
	|	ИЗ
	|		РегистрСведений.ТоварныйБонусКонтрагентов.СрезПоследних(
	|				,
	|				Контрагент = &Контрагент
	|					И ВидТоварногоБонуса = ЗНАЧЕНИЕ(Перечисление.Балмико_ВидыТоварногоБонуса.БонусТоваромЗаВозврат)) КАК ТоварныйБонусКонтрагентовСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Балмико_ТоварныйБонусОбороты.Контрагент,
	|		Балмико_ТоварныйБонусОбороты.ВидТоварногоБонуса,
	|		Балмико_ТоварныйБонусОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.Балмико_ТоварныйБонус.Обороты(
	|				,
	|				,
	|				Период,
	|				Контрагент = &Контрагент
	|					И ВидТоварногоБонуса = ЗНАЧЕНИЕ(Перечисление.Балмико_ВидыТоварногоБонуса.БонусТоваромЗаВозврат)) КАК Балмико_ТоварныйБонусОбороты) КАК Регистры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммаЗаказов КАК СуммаЗаказов
	|		ПО Регистры.Контрагент = СуммаЗаказов.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистры.Контрагент,
	|	Регистры.ВидТоварногоБонуса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СуммаЗаказов";
	Запрос.УстановитьПараметр("Дата", НачалоДня(Параметры.Дата));
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	МинСуммаЗаказа = Константы.МинимальнаяСуммаЗаказа.Получить();
	Запрос.УстановитьПараметр("МинСуммаЗаказа", МинСуммаЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат 0;
	ИначеЕсли Не ВыборкаДетальныеЗаписи.ЕстьЗаказ И ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
		Возврат -1;
	Иначе
		Возврат ВыборкаДетальныеЗаписи.Сумма;
	КонецЕсли;
	
КонецФункции

#КОНЕЦОБЛАСТИ
