&НаКлиенте
Перем ВыполняетсяЗакрытие;

#ОБЛАСТЬ ОБРАБОТЧИКИСОБЫТИЙФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПолныйДоступ") И Параметры.ПолныйДоступ Тогда
		ОбщийМодульСервер.УстановитьЗначениеКонстанты("ПолныйДоступ", Истина);
	КонецЕсли;
	Если ОбщийМодульСервер.ПолучитьЗначениеКонстанты("ПолныйДоступ") Тогда
		Элементы.АдресСервераАвторизации.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресСервераАвторизации") И Не ПустаяСтрока(Параметры.АдресСервераАвторизации) Тогда
		АдресСервераАвторизации = Параметры.АдресСервераАвторизации;
	Иначе
		АдресСервераАвторизации = ОбщийМодульСервер.АдресСервераАвторизацииПоУмолчанию();
	КонецЕсли;
	
	Шаг = Параметры.Этап;
	Если Шаг = 0 Тогда
		Шаг = 1;
	КонецЕсли;
	УправлениеВидимостью();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполняетсяЗакрытие = Ложь;
	
	Если ПустаяСтрока(АдресСервераАвторизации) Тогда
		АдресСервераАвторизации = ОбщийМодульСервер.АдресСервераАвторизацииПоУмолчанию();
	КонецЕсли;
	АдресСервераАвторизацииПриИзмененииНаСервере();
	
	// Подключаем и выполняем обработчики //
	ОбработчикОбновленияВремени();
	ПодключитьОбработчикОжидания("ОбработчикОбновленияВремени",1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриПодтвержденииЗакрытияФормы(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ФоновыеЗаданияСервер.ОстановитьВсеФоновыеЗадания();
		ВыполняетсяЗакрытие = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ВыполняетсяЗакрытие Тогда
	ИначеЕсли ЗначениеЗаполнено(ИДСинхронизации) Тогда
		ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииЗакрытияФормы", ЭтаФорма), "Завершение работы прервет синхронизацию, продолжить?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет );
		
		//Ответ = Вопрос("Завершение работы прервет синхронизацию, продолжить?",РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Нет);
		//Если Ответ <> КодВозвратаДиалога.Да Тогда
		//	Отказ = Истина;
		//Иначе
		//	ФоновыеЗаданияСервер.ОстановитьВсеФоновыеЗадания();
		//КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераАвторизацииПриИзменении(Элемент)
	АдресСервераАвторизации = СокрЛП(АдресСервераАвторизации);
	АдресСервераАвторизацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АдресСервераАвторизацииПриИзмененииНаСервере()
	Константы.АдресСервера.Установить(АдресСервераАвторизации);
КонецПроцедуры

&НаКлиенте
Процедура КодСотрудникаПриИзменении(Элемент)
	КодСотрудника = СокрЛП(КодСотрудника);
КонецПроцедуры

&НаКлиенте
Процедура ПочтаПриИзменении(Элемент)	
	Почта           = СокрЛП(Почта);
	ПочтаПравильная = Найти(Почта,"@") > 0 И Найти(Почта,".") > 0 И Найти(Почта," ") = 0 И Найти(Почта,",") = 0;
	Элементы.ПочтаУказанаВерно.Видимость   = ПочтаПравильная;
	Элементы.ПочтаУказанаНеВерно.Видимость = Не ПочтаПравильная;
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	//Элементы.Авторегистрация.Видимость              = Шаг = 1;
	Элементы.ГруппаАвторизации.Видимость            = Шаг = 1;
	Элементы.ГруппаАвторизация.Видимость            = Шаг = 1;
	//Элементы.АдресСервераАвторизации.Видимость      = Шаг = 1;
	Элементы.ДекорацияНадписьПомощь1.Видимость      = Шаг = 1;
	Элементы.ГруппаВводаКапчи.Видимость             = Шаг = 2;
	Элементы.ГруппаПроверкиСоединения.Видимость     = Шаг = 3;
	Элементы.КомандаНазад.Видимость                 = Шаг = 2;
	Элементы.ГруппаСостояниеОбмена.Видимость        = ЗначениеЗаполнено(ИдСинхронизации) Или ЗначениеЗаполнено(ТекстОшибки);
	
	Элементы.ГруппаАвторизация.ТолькоПросмотр                 = ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаАвторизация.Доступность                    = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаВводаКапчи.ТолькоПросмотр                 = ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаВводаКапчи.Доступность                    = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаПроверкиСоединения.ТолькоПросмотр                 = ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаПроверкиСоединения.Доступность                    = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	
	//Элементы.АдресСервераАвторизации.ТолькоПросмотр = ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ГруппаАвторизации.ТолькоПросмотр       = ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.Авторизация.Доступность         = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	//Элементы.Авторегистрация.Доступность     = НЕ ЗначениеЗаполнено(ИдСинхронизации); 
	Элементы.Активировать.Доступность        = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.ПроверитьСоединение.Доступность = НЕ ЗначениеЗаполнено(ИдСинхронизации);
	Элементы.КомандаНазад.Доступность        = НЕ ЗначениеЗаполнено(ИдСинхронизации);
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ОБРАБОТЧИКИКОМАНД

&НаКлиенте
Процедура КомандаНазад(Команда)
	КомандаНазадНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	
	Если не ЗначениеЗаполнено(ЛогинСотрудника)
		Или Не ЗначениеЗаполнено(ПарольСотрудника) Тогда
		
		Сообщить("Не заполнены данные доменной учетной записи!");
		
		Возврат;
	КонецЕсли;	
	КодСотрудника = "AUTO";	
	АвторизацияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Активировать(Команда)
	АктивацияКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	ПроверитьСоединениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Авторегистрация(Команда)
	ОчиститьБазуДанных();
	КодСотрудника = "AUTO";
	АвторизацияКлиент();
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияКлиент()
	
	ДополнительныеФункцииСервер.ПроверкаИзмененияВерсий();
	
	МассивПараметров = Новый Массив;
	
	МассивПараметров.Добавить(АдресСервераАвторизации);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЛогинСотрудника",ЛогинСотрудника);
	ДопПараметры.Вставить("ПарольСотрудника",ПарольСотрудника);
	ДопПараметры.Вставить("КодСотрудника",КодСотрудника);
	МассивПараметров.Добавить(ДопПараметры);
	
	ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СделатьРегистрацию", МассивПараметров);
	
КонецПроцедуры	

&НаКлиенте
Процедура АктивацияКлиент()
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПрисланныйКод);
	ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СделатьАктивацию",МассивПараметров);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСоединениеКлиент()
	ДопПараметры = Новый Массив;
	ДопПараметры.Добавить(Истина);
	ОбработчикНачалаСинхронизации("ФоновыеЗаданияСервер.СделатьОбмен",ДопПараметры);
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СЕРВЕРНЫЕОБРАБОТЧИКИКОМАНД

&НаСервере
Процедура КомандаНазадНаСервере()
	Если Шаг = 2 Тогда
		Шаг = 1;
		УправлениеВидимостью();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОчиститьБазуДанных()
	ОбщийМодульСервер.ОчисткаБазыДанных();
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПОДКЛЮЧАЕМЫЕОБРАБОТЧИКИ

&НаКлиенте
Процедура ОбработчикОбновленияВремени() Экспорт
	Элементы.ДатаВремя.ПодсказкаВвода = ОбщийМодульСервер.ФорматДаты(ТекущаяДата());
	Элементы.ДатаВремя.ОбновитьТекстРедактирования();
	ПодключитьОбработчикОжидания("ОбработчикОбновленияВремени",1,Истина);
КонецПроцедуры	

&НаКлиенте
Процедура ОбработчикНачалаСинхронизации(ИмяПроцедуры, ДопПараметры = Неопределено)
	ФоновыеЗаданияКлиент.ОбработчикНачалаСинхронизации(ЭтаФорма,ИмяПроцедуры,ДопПараметры); 
	УправлениеВидимостью();
КонецПроцедуры	

&НаКлиенте
Процедура ОбработчикОбновленияСостоянияСинхронизации()
	ФоновыеЗаданияКлиент.ОбработчикОбновленияСостоянияСинхронизации(ЭтаФорма);
КонецПроцедуры	

&НаКлиенте
Процедура ПриПодтвержденииОбновления(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат <> "Отмена" Тогда
		ОбщийМодульКлиент.ОбновитьКонфигурацию(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОбменаНажатие(Элемент)
	Если Найти(Элемент.Заголовок,"требуется обновление") > 0 Тогда
		Список = Новый СписокЗначений;
		Список.Добавить("arm");
		Список.Добавить("x86");
		Список.Добавить("Отмена");
		ПоказатьВопрос( Новый ОписаниеОповещения("ПриПодтвержденииОбновления", ЭтотОбъект), "Выберите ваш тип процессора", Список, 15, "Отмена", "Обновление приложения", "Отмена");
		
		//Ответ  = Вопрос("Выберите ваш тип процессора",Список,15,"Отмена","Обновление приложения","Отмена");
		//Если Ответ <> Неопределено И Ответ <> "Отмена" Тогда
		//	ОбщийМодульКлиент.ОбновитьКонфигурацию(Ответ);
		//КонецЕсли;
	Иначе	
		ОткрытьФорму("Обработка.ОбработкаОшибокНаКлиенте.Форма.Форма",Новый Структура("ТекстОшибки",ТекстОшибки));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеПослеСинхронизации() Экспорт
	ОбновлениеПослеСинхронизацииСервер();
	
	ОтключитьОбработчикОжидания("ОбработчикОбновленияСостоянияСинхронизации");
	
	Если Шаг = 1 Тогда
		мСтруктура = ПолучитьИзВременногоХранилища(АдресРезультатовЗадания);
		ИдСинхронизации = Неопределено;
		Если ТипЗнч(мСтруктура) = Тип ("Структура") И Истина = мСтруктура.Успех Тогда
			Шаг             = 2;
			мСтруктура.Свойство("ПрисланныйКод",ПрисланныйКод);
			Если ЗначениеЗаполнено(ПрисланныйКод) Тогда
				АктивацияКлиент();
			КонецЕсли; 
		КонецЕсли;	
		УправлениеВидимостью();
	ИначеЕсли Шаг = 2 Тогда
		мСтруктура = ПолучитьИзВременногоХранилища(АдресРезультатовЗадания);
		ИдСинхронизации = Неопределено;
		Если ТипЗнч(мСтруктура) = Тип ("Структура") И Истина = мСтруктура.Успех Тогда
			ОбщийМодульСервер.УстановитьЗначениеКонстанты("СтарыйID","");
			Шаг = 3;
			УправлениеВидимостью();
			Если КодСотрудника = "AUTO" Тогда
				ПроверитьСоединениеКлиент();
			КонецЕсли;	
		КонецЕсли;
		УправлениеВидимостью();
	ИначеЕсли Шаг = 3 Тогда
		мСтруктура = ПолучитьИзВременногоХранилища(АдресРезультатовЗадания);
		ИдСинхронизации = Неопределено;
		Если ТипЗнч(мСтруктура) = Тип ("Структура") И Истина = мСтруктура.Успех Тогда
			Шаг = 4;
			Закрыть(Истина);
		Иначе	
			УправлениеВидимостью();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ОбновлениеПослеСинхронизацииСервер()
	мТекущаяВерсия    = Константы.ВерсияКонфигурации.Получить();
	мАктуальнаяВерсия = Константы.ОС_АктуальнаяВерсияМП.Получить();
	мЗаголовок = "Версия : " + Константы.ВерсияКонфигурации.Получить();
	Если мАктуальнаяВерсия <> мТекущаяВерсия Тогда
		мЗаголовок = мЗаголовок + " требуется обновление";
		Элементы.ДекорацияСостояниеОбмена.Гиперссылка = Истина;
	КонецЕсли;	
	Элементы.ДекорацияСостояниеОбмена.Заголовок = мЗаголовок;
КонецПроцедуры	

&НаКлиенте
Процедура ЖурналРегистрации(Команда)
	ОткрытьФорму("Обработка.ПросмотрЛогов.Форма.Форма");
КонецПроцедуры

#КОНЕЦОБЛАСТИ